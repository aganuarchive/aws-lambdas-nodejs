SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL Serializable
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating types'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[accno] FROM bigint NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[accrual] FROM decimal (22, 7) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[balance] FROM decimal (19, 2) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[bic] FROM varchar (11) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[cardstyle] FROM varchar (20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[custid] FROM bigint NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[custname] FROM varchar (50) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[empl_no] FROM int NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[iban] FROM varchar (34) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[ibnkusername] FROM varchar (50) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[product_id] FROM varchar (15) NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[txnclrcode] FROM varchar (2) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
CREATE TYPE [dbo].[wrkl_reason] FROM varchar (20) NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKitem]'
GO
CREATE TABLE [dbo].[SDKitem]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[layer] [int] NULL,
[deleted] [int] NULL,
[dep_no] [int] NULL,
[no] [int] NULL,
[prompt] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (120) COLLATE Latin1_General_CI_AS NULL,
[rep_indexname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rep_report] [int] NULL,
[rep_primaryparent] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[rep_tablename] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[itemtype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[relatetype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[desc1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[sortorder] [int] NULL,
[shortcut] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[userskip] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKitem] on [dbo].[SDKitem]'
GO
ALTER TABLE [dbo].[SDKitem] ADD CONSTRAINT [PK_SDKitem] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_SDKitem_sortorder] on [dbo].[SDKitem]'
GO
CREATE NONCLUSTERED INDEX [IX_SDKitem_sortorder] ON [dbo].[SDKitem] ([dep_no], [sortorder])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKitem]'
GO
ALTER TABLE [dbo].[SDKitem] ADD CONSTRAINT [IX_SDKitem_name] UNIQUE NONCLUSTERED  ([name], [layer])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKitem]'
GO
ALTER TABLE [dbo].[SDKitem] ADD CONSTRAINT [sdkitemix] UNIQUE NONCLUSTERED  ([no], [layer])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKdetail]'
GO
CREATE TABLE [dbo].[SDKdetail]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[layer] [int] NULL,
[deleted] [int] NULL,
[name] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[extra] [int] NULL,
[indexname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[relatetype] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[buffername] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[itemno] [int] NULL,
[type] [int] NULL,
[pos_x] [int] NULL,
[pos_y] [int] NULL,
[size_x] [int] NULL,
[size_y] [int] NULL,
[tabindex] [int] NULL,
[tag] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[prompt] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (120) COLLATE Latin1_General_CI_AS NULL,
[enumerated] [int] NULL,
[lbl_pos_x] [int] NULL,
[lbl_pos_y] [int] NULL,
[lbl_size_x] [int] NULL,
[lbl_size_y] [int] NULL,
[tabpagenames] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[tabpageprompts] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[approvalrequired] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_SDKitem] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKdetail]'
GO
ALTER TABLE [dbo].[SDKdetail] ADD CONSTRAINT [sdkdetailix] UNIQUE CLUSTERED  ([FK_rowid_SDKitem], [no], [layer])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKdetail] on [dbo].[SDKdetail]'
GO
ALTER TABLE [dbo].[SDKdetail] ADD CONSTRAINT [PK_SDKdetail] PRIMARY KEY NONCLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_SDKdetail] on [dbo].[SDKdetail]'
GO
CREATE NONCLUSTERED INDEX [IX_SDKdetail] ON [dbo].[SDKdetail] ([FK_rowid_SDKitem], [name], [layer])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_profilevalidation]'
GO
SET QUOTED_IDENTIFIER OFF
GO

create procedure [dbo].[SDK_profilevalidation]
as
	set nocount on
	begin transaction

		declare @buffername sysname, @fieldname sysname, @item sysname, @detail sysname
		declare SDKusage cursor for
		select sdkitem.name as itemname, sdkdetail.name, sdkdetail.buffername, sdkdetail.fieldname as detailname from sdkdetail join sdkitem on (sdkdetail.FK_rowid_sdkitem = sdkitem.rowid)
		where
		(sdkdetail.fieldname != '[none]' and sdkdetail.fieldname != '') and
		(sdkdetail.buffername != 'global' and sdkdetail.buffername != '[none]')
		group by sdkitem.name, sdkdetail.name, sdkdetail.buffername, sdkdetail.fieldname

		create table #missing (problem sysname)

		open SDKusage
		fetch next from SDKusage into @item, @detail, @buffername, @fieldname
		while @@fetch_status=0
		begin
			if not exists (select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = @buffername and COLUMN_NAME = @fieldname)
			begin
				insert into #missing values ('Invalid ' + @detail + ' detail [' + @buffername + '/' + @fieldname + '] on ' + @item)
			end
			fetch next from SDKusage into @item, @detail, @buffername, @fieldname
		end
	close SDKusage

	select problem as 'SDK Item/Detail Problems' from #missing
	drop table #missing

	deallocate SDKusage
	commit
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_cleantable]'
GO

create procedure [dbo].[SDK_cleantable]
	@TABLENAME sysname
as
	set rowcount 5000
	set nocount on

	declare @count int
	declare @err int

	create table #count(c int) 

	insert #count exec ('select count(*) from ' + @TABLENAME) 
	select @err = @@error if @err <> 0 return @err 
	select @count = c from #count 
	raiserror('Cleaning %d records in table %s', 0, -1, @count, @TABLENAME) 

	delete #count 

	insert #count 
		exec ('declare @err int select @err = 0 while @err = 0 and exists(select * from ' + @TABLENAME + 
             ') begin delete ' + @TABLENAME + ' select @err = @@error end select @err') 
	select @err = c from #count 
	return @err 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_cleanapplication]'
GO

create procedure [dbo].[SDK_cleanapplication] as

	set nocount on
	declare @err int
	declare @tablename sysname
	select @err = 0 

	create table #tables (tbl sysname not null primary key,
						  refcount int null)

	-- Add all tables to be cleansed here. Preferably in alphabetic order. 
	-- (We will sort them according to references later on.) 
	declare app_tables cursor for
	select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'BASE TABLE'

	open app_tables
	fetch next from app_tables into @tablename
	while @@FETCH_STATUS = 0
	begin
		insert #tables(tbl) values(@tablename) 
		fetch next from app_tables into @tablename
	end
	close app_tables
	deallocate app_tables

	-- Add temporary table for references. 
	create table #refs (ref_from sysname not null, 
                       ref_to sysname not null, 
                       primary key (ref_from, ref_to)) 

	-- Now we add all foreign key references. 
	insert #refs (ref_from, ref_to) 
	select distinct o1.name, o2.name 
	from sysobjects o1, sysobjects o2, sysreferences r, #tables t 
	where o1.id = r.fkeyid 
		and o2.id = r.rkeyid 
		and o2.name = t.tbl 
		and o1.name <> o2.name 
		and not exists (select * from #refs ref where ref.ref_from = o1.name and ref.ref_to = o2.name)

	-- Check that there are no tables referring the list above, but is not in 
	-- the list at all. 
	if exists (select * from #refs r 
			   where not exists (select * from #tables t where t.tbl = r.ref_from))
	begin
		select r.ref_from from #refs r 
		where not exists (select * from #tables t where t.tbl = r.ref_from) 
			print 'These tables appear to be missing in #tables'
	end

	declare @refcount int
	declare @rowc int 

	-- Now, we first mark all tables that are not referenced by any other table. 
	update #tables 
	set refcount = 0 
	from #tables t 
	where not exists (select * from #refs r where r.ref_to = t.tbl) 
	select @rowc = @@rowcount 

	-- Then loop as long as there unmarked tables. 
	select @refcount = 1 
	while @rowc <> 0 
	begin
		update #tables 
		set refcount = @refcount 
		from #tables t 
		where t.refcount is null
		and not exists (select * from #refs r, #tables t2 
						where r.ref_to = t.tbl and r.ref_from = t2.tbl and t2.refcount is null) 
		select @rowc = @@rowcount 
		select @refcount = @refcount + 1 
	end

	-- Did we mark them all? 
	if exists (select * from #tables where refcount is null) 
	begin
		select * from #tables where refcount is null
		raiserror ('Could not determine ref.count for all tables. Circular references?', 16, -1)
		return 1
	end

	-- Remove our SDK tables to ignore deletion
	delete #tables where tbl = 'SDKdetail'
	delete #tables where tbl = 'SDKitem'
	delete #tables where tbl = 'SDKLoginSDKitem'
	delete #tables where tbl = 'SDKpossiblevalues'
	delete #tables where tbl = 'SDKregistry'

	-- Eventually, we can do the cleansing job. 
	declare @tbl sysname 
	select @err = 0 
	while @err = 0 
	begin
		select @tbl = null
		set rowcount 1
		select @tbl = tbl from #tables order by refcount, tbl 
		set rowcount 0

		if @tbl is null
			break

		exec @err = SDK_cleantable @tbl 
	  
		select @err = coalesce(nullif(@err, 0), @@error) if @err <> 0 print @err 

		delete #tables where tbl = @tbl 
	end
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkStandardHeader]'
GO
SET QUOTED_IDENTIFIER ON
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkStandardHeaders.sql
-- 
--	Notes:		Creates tmpobjects and ctypes
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	24jul14		jonl	SDK-198		Schema split
--	08may12		mgf		SDK-135		Changed into resource file
--	09may2006	amr		ABT0831		Don't use global temp tables for check digit
--	17apr2006	amr		ABT0817		change hashcodes
--	Dec-Jan06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkStandardHeader] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	--------------------------------------- Create and populate ##c_types table -----------------------------------------------

	create table ##c_types 
	(
		id     int,
		resolve varchar(28),
		fieldtype varchar(50),
		c_macro varchar(50),
		length int,
	)

	truncate table ##c_types

--	!ALL CHANGES TO THIS STORED PROCEDURE *MUST* BE REPLICATED IN SDKCHECKDIGIT! --
--	!ALL CHANGES TO THIS STORED PROCEDURE *MUST* BE REPLICATED IN SDKCHECKDIGIT! --
--	!ALL CHANGES TO THIS STORED PROCEDURE *MUST* BE REPLICATED IN SDKCHECKDIGIT! --

	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(50,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(47,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(61,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(111,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(55,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(106,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(62,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(109,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(56,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(38,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(60,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(122,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(110,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(108,'SdkInt64','SdkInt64','SDK_INT64',8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(59,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(58,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(52,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(35,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(45,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(48,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(39,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(63, 'SdkInt64', 'SdkInt64', 'SDK_INT64', 8)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(37, 'SdkBaseVarbinary','SdkBaseVarbinary','SDK_VARBINARY',0)
	insert into ##c_types (id, resolve, fieldtype, c_macro, length) VALUES(34, 'SdkBaseVarbinary','Image','SDK_VARBINARY',0)

	create unique index ##IX_c_types on ##c_types ( id ) 

	--------------------------------------- Create and populate ##tmpobjects table -----------------------------------------------

	select IDENTITY(int, 1,1) id, name, intid into ##tmpobjects from 
	(select TOP 100 PERCENT o.name, o.id as intid from sysobjects o where o.type = 'U' and o.name != 'dtproperties' and o.name != 'sysdiagrams' and o.uid = (select schema_id from sys.schemas where name = 'dbo')) as so order by so.name
	
	create unique index ##IX_tmpobjects on ##tmpobjects ( id )	

	---------------------------------- Create and populate #primarykeys table ------------------------------------------------
	-- This section produces a table containing primary key information that is used later when generating PK lookup functions
	-- in a format that is much simpler for the later functions to upderstand than the format stored in sysindexes
	-------------------------------------------------------------------------------------------------------------------------- 

	create table ##primarykeys
	(
		tablename varchar(500),
		primaryrow varchar(500),
	)

	truncate table ##primarykeys
	create unique index ##IX_primarykeys on ##primarykeys (tablename)

	DECLARE @table_id		int
	DECLARE @full_table_name varchar(255)
	declare @primarykey varchar(500)
	declare @tablename varchar(500)
	declare @keycount int
	declare @objectcount int
	declare @maxobjects int

	select @maxobjects = (select max(id) from ##tmpobjects)

	alter table ##tmpobjects add hashcode int
	
	declare @hashcode int
	declare @hashcount int
	
	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		select @hashcode = BINARY_CHECKSUM(name) from ##tmpobjects where id = @objectcount
		
		set @hashcount = 1
		while @hashcount > 0
		begin
			select @hashcount = count(*) from ##tmpobjects where BINARY_CHECKSUM(name) = @hashcode and id != @objectcount
			if @hashcount > 0 set @hashcode = @hashcode + 1
		end
			
		update ##tmpobjects set hashcode = @hashcode where id = @objectcount
		
		set @objectcount = @objectcount + 1
	end
	
	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		select @tablename = null
		select @primarykey = null
		select @full_table_name = (select name from ##tmpobjects where id = @objectcount)
			select @table_id = 
			(
				select id from sysobjects where name = 
				(
					 select name from ##tmpobjects where id = @objectcount and uid = (select schema_id from sys.schemas where name = 'dbo')
				)
			)
			select @primarykey = convert(sysname, c.name), @tablename = convert(sysname, o.name)
		from sysindexes i, syscolumns c, sysobjects o --, syscolumns c1
		where
			o.id = @table_id
			and o.id = c.id
			and o.id = i.id
			and (i.status & 0x800) = 0x800
			--and c.name = index_col (@full_table_name, i.indid, c1.colid)
			and (c.name = index_col (@full_table_name, i.indid,  1) or
				 c.name = index_col (@full_table_name, i.indid,  2) or
				 c.name = index_col (@full_table_name, i.indid,  3) or
				 c.name = index_col (@full_table_name, i.indid,  4) or
				 c.name = index_col (@full_table_name, i.indid,  5) or
				 c.name = index_col (@full_table_name, i.indid,  6) or
				 c.name = index_col (@full_table_name, i.indid,  7) or
				 c.name = index_col (@full_table_name, i.indid,  8) or
				 c.name = index_col (@full_table_name, i.indid,  9) or
				 c.name = index_col (@full_table_name, i.indid, 10) or
				 c.name = index_col (@full_table_name, i.indid, 11) or
				 c.name = index_col (@full_table_name, i.indid, 12) or
				 c.name = index_col (@full_table_name, i.indid, 13) or
				 c.name = index_col (@full_table_name, i.indid, 14) or
				 c.name = index_col (@full_table_name, i.indid, 15) or
				 c.name = index_col (@full_table_name, i.indid, 16)
		)
			if @tablename is not null and @primarykey is not null
		begin
			insert into ##primarykeys (tablename, primaryrow) VALUES (@tablename, @primarykey)
		end

		select @objectcount = @objectcount + 1
	end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationBuffers]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationBuffers.sql
-- 
--	Notes:		Contains buffer definitions
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	24jul14		jonl	SDK-198		Schema split
--	17sep13		jonl	SDK-171		Ensure that blank dates get 01Jan1900 not the current date
--	31jul13		jonl	SDK-171		Generate Getters & Setters for WCF purposes
--	08may12		mgf		SDK-135		Changed into resource file
--	06jun2007	amr		SDK-78		Added WriteXml to SdkBaseBuffer
--	04jun2006	amr		ABT0851		Set canbeprepared field
--	14may2006	amr		ABT0834		Prevent change logging of certain fields
--	Dec-Jan06	amr		ABT0748		Convert to VS2005 - formerly schemad.sql
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--	10oct05		amr		ABT0705		Minimum rebuild
--	28jan05		amr		ABT0587		Fix opt problems with buf_cmp
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	01sep04		amr		ABT0485		Check items/details at compile time
--	29aug04		amr		ABT0485		Optimisation
--	21aug2004	amr		ABT0476		Case all macros to (string)
--	20aug2004	amr		ABT0476		Specify tablenames in fieldnames
--	19aug04		jonl	ABT0476		Don't create macros for views in the database
--	12aug2004	jonl	ABT0476		Make column macros unique in table
--	12aug2004	jonl	ABT0476		Create compile time checking macros
--	06jul2004	amr		ABT0455		Added SqlDecimal 4bytes bigger
--	17may04		amr		ABT0415		Updated size of decimal
--  18feb04		mgf		ABT0305		Modified to reduce file size
--	13feb2004	amr		ABT0306		Datatypes reorganisation
--	28dec03		amr		ABT0261		Move MAXSCRATCH to NPserver.h
--	16dec03		jonl	ABT0259		Make user datatypes compatible with varbinary
--	16dec03		jonl	ABT0259		Use long instead of int for user defined ints
--	15dec03		jonl	ABT0259		Support user datatype definition and 'like' functionality
--	15nov03		amr		ABT0239		Improve and fix varbinary generation
--  24sep03		jonl	ABT0171		support varbinaries up to 47K
--	23sep03		jonl	ABT0171		varbinary datatype changes
--	18sep03		jonl	ABT0171		varbinary datatype
--  02sep03		amr		ABT0122		Added row array
--	03aug03		amr		APB0049		Added MAXSCRATCH macro
--	02aug03		jonl	APB0045		Don't create global table in this one anymore
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--				jonl				Allow columns to be deleted in SQL
--	10oct02		jonl				Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationBuffers] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @tab varchar(1) = char(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

--------------------------------------- Build structs and unions for buffers -----------------------------------------------
	declare @c_macro varchar(20)
	declare @offsetcount int
	declare @increment int
	declare @syscolumnsid int
	declare @maxobjects int
	select @maxobjects = (select max(id) from ##tmpobjects)

	declare @TEMPVARc varchar(250);
	declare @colname varchar(250); 
	declare @objectcount int
	select @objectcount = 1

	declare @fieldcount int
	declare @maxfields int
	declare @fieldtype varchar(24)
	declare @fieldname varchar(100)
	declare @camelfieldname varchar(100)
	select @fieldcount = 1
	declare @nummatches int
	declare @colno int

	declare @output varchar(300)
	declare @outputcount int
	declare @biggestfield int

	declare @objectname varchar(255)
	declare @sysobjectsid int
	declare @nolog int
	declare @canbeprepared int

	while @objectcount <= @maxobjects
	begin
		set @canbeprepared = 1
		select @objectname = name from ##tmpobjects where id = @objectcount  
		select @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')
		
		SELECT @tab + 'namespace ' + @objectname + 'Namespace {'
		SELECT @tab + @tab + 'public ref class ' + @objectname + 'Buffer : SdkBaseBuffer {'
		SELECT @tab + @tab + 'private:'
		
		set @output = ''
		set @outputcount = 0
		set @offsetcount = 0
		set @biggestfield = 0
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)

		if @maxfields = 0
		begin
			SELECT @tab + @tab + @tab + 'static array<Int32, 2>^ InformationArray = nullptr;'
		end
		else
		begin
			SELECT @tab + @tab + @tab + 'static array<Int32, 2>^ InformationArray = gcnew array<Int32, 2>(' + convert(varchar, @maxfields) + ', 4) {'
		end
		
		set @syscolumnsid = 1
		set @fieldcount = 1
		while @fieldcount <= @maxfields 
		begin
			select @c_macro = (select c_macro from ##c_types where ##c_types.id = syscolumns.type), @fieldtype = (select fieldtype from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = (select id from sysobjects where name = (select name from ##tmpobjects where id = @objectcount) and uid = (select schema_id from sys.schemas where name = 'dbo')) and colid = @syscolumnsid

			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)

			if @nummatches > 0 
			begin

				if @fieldtype = 'SdkBaseString' and @fieldtype is not NULL
				begin
					select @increment = 
					2 * (select syscolumns.length from syscolumns 
						where syscolumns.id = @sysobjectsid	and syscolumns.colid = @syscolumnsid)
				end
					
				if @fieldtype = 'SdkBaseVarbinary' and @fieldtype is not NULL
				begin
					select @increment = 
					(select syscolumns.length + 4 from syscolumns 
						where syscolumns.id = @sysobjectsid	and syscolumns.colid = @syscolumnsid)
					set @canbeprepared = 0
				end
				
				if @fieldtype = 'Image' and @fieldtype is not NULL
				begin
					select @increment = 
						(select 4 + convert(int, sys.extended_properties.value)
						from sys.extended_properties where sys.extended_properties.major_id 
							= @sysobjectsid
								and sys.extended_properties.minor_id = @syscolumnsid 
								and sys.extended_properties.name = 'MS_Description')		
					set @canbeprepared = 0			
				end			
				
				if (@fieldtype != 'SdkBaseString' and @fieldtype != 'SdkBaseVarbinary' and @fieldtype != 'Image' and @fieldtype is not NULL)
				begin
					select @increment = (select length from ##c_types where ##c_types.id = (select syscolumns.type from syscolumns where syscolumns.id = @sysobjectsid and syscolumns.colid = @syscolumnsid))
				end
				
				select @nolog = (select count(*) from sys.extended_properties where 
						sys.extended_properties.major_id = @sysobjectsid
							and sys.extended_properties.minor_id = @syscolumnsid 
							and convert(varchar, sys.extended_properties.value) like '%NOLOG%'
							and sys.extended_properties.name = 'MS_Description')
				
				select @output = @output + '{' + @c_macro + ',' + convert(varchar, @increment) + ',' + convert(varchar, @offsetcount) + ',' + convert(varchar, @nolog) + '},'

				if @increment > @biggestfield 
				begin
					set @biggestfield = @increment
				end
				
				select @offsetcount = @offsetcount + @increment

				select @fieldcount = @fieldcount + 1
			end
		
			select @outputcount = @outputcount + 1

			if @outputcount >= 10 or @fieldcount > @maxfields 
			begin
				set @outputcount = 0
				select @output
				set @output = ''
			end
			
			select @syscolumnsid = @syscolumnsid + 1
		end
		select @tab + @tab + @tab + '};'
		select @tab + @tab + 'public:'
		
		select @fieldcount = 1
		select @syscolumnsid = 1
		while @fieldcount <= @maxfields
		begin
			select @fieldtype = (select resolve from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = @sysobjectsid and colid = @syscolumnsid

			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0 
			begin
				select @tab + @tab + @tab + @fieldtype + ' ' + @fieldname + ';'
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end
		
		-- Now do the equals operand
		SELECT ''
		SELECT @tab + @tab + @tab + 'virtual void Set(SdkBaseBuffer^ baseValue) override {'
		SELECT @tab + @tab + @tab + @tab + (select name from ##tmpobjects where id = @objectcount)+ 'Buffer^ value = (' + (select name from ##tmpobjects where id = @objectcount) + 'Buffer^) baseValue;'
		SELECT ''
		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		while @fieldcount <= @maxfields
		begin
			select @fieldtype = (select resolve from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = (select id from sysobjects where name = (select name from ##tmpobjects where id = @objectcount) and uid = (select schema_id from sys.schemas where name = 'dbo')) and colid = @syscolumnsid
			
			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
				
			if @nummatches > 0 
			begin	
				if @fieldtype = 'SdkBaseVarbinary'
				begin
					SELECT @tab + @tab + @tab + @tab + 'this->' + @fieldname + '.Set(value->' + @fieldname + ');'
				end
				else
				begin
					SELECT @tab + @tab + @tab + @tab + 'this->' + @fieldname + ' = value->' + @fieldname + ';'
				end
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end

		SELECT @tab + @tab + @tab + @tab + 'return;'
		SELECT @tab + @tab + @tab + '}'
		
		-- Now do the constructor
		
		SELECT ''
		SELECT @tab + @tab + @tab + @objectname + 'Buffer() {}'
		
		-- Now do the overloaded constructor
		
		SELECT ''
		SELECT @tab + @tab + @tab + @objectname + 'Buffer(SdkBaseThreadStorage^ thread) {'
		SELECT ''
		SELECT @tab + @tab + @tab + @tab + 'this->ThisThread = thread;'
		SELECT @tab + @tab + @tab + @tab + 'this->FieldCount = ' + convert(varchar, @maxfields) + ';'
		SELECT @tab + @tab + @tab + @tab + 'this->BufferNumber = ' + convert(varchar, @objectcount) + ';'
		SELECT @tab + @tab + @tab + @tab + 'this->BufferName = "' + @objectname + '";'
		SELECT @tab + @tab + @tab + @tab + 'this->BufferLength = ' + upper(@objectname) + 'BUFFERLENGTH;'
		SELECT @tab + @tab + @tab + @tab + 'this->MaximumFieldLength = ' + convert(varchar, @biggestfield) + ';'
		SELECT @tab + @tab + @tab + @tab + 'this->Fields = gcnew array<SdkDataType^>(this->FieldCount);'
		
		if @canbeprepared = 0 
		begin
			SELECT @tab + @tab + @tab + @tab + 'this->CanBePrepared = false;'
		end
		else
		begin
			SELECT @tab + @tab + @tab + @tab + 'this->CanBePrepared = true;'
		end
		
		select @TEMPVARc = primaryrow from ##primarykeys where tablename = @objectname
		
		select @colname = ''
		select @fieldcount = 1
		select @syscolumnsid = 1
		select @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		while @fieldcount <= @maxfields and @colname != @TEMPVARc
		begin
			select @colname = name, @colno = convert(varchar, @fieldcount) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0
			begin
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end					

		SELECT @tab + @tab + @tab + @tab + 'this->PrimaryKeyFieldNumber = ' + convert(varchar, @colno) + ';'
		
		set @syscolumnsid = 1
		set @fieldcount = 1
		while @fieldcount <= @maxfields 
		begin
			select @fieldtype = (select resolve from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = @sysobjectsid and colid = @syscolumnsid
		
			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id 
				= @sysobjectsid)

			if @nummatches > 0 
			begin
				SELECT @tab + @tab + @tab + @tab + 'this->Fields[' + convert(varchar, @fieldcount-1) + '] = (SdkDataType^) %this->' + @fieldname + ';'
				SELECT @fieldcount = @fieldcount + 1
			end
			SELECT @syscolumnsid = @syscolumnsid + 1
		end
		
		select @tab + @tab + @tab + @tab + 'this->' + syscolumns.name + '.Dimension(' + convert(varchar, (select count(*) from sys.extended_properties where sys.extended_properties.major_id = sysobjects.id and sys.extended_properties.minor_id = syscolumns.colid and sys.extended_properties.name = 'MS_Description' and sys.extended_properties.value = 'LEADINGZEROES')) + ', ' + convert(varchar,syscolumns.xprec) + ',' + convert(varchar,syscolumns.xscale) + ');' 
		   from sysobjects, syscolumns, ##tmpobjects, ##c_types 
		   where sysobjects.name = ##tmpobjects.name 
				and syscolumns.id = sysobjects.id
				and syscolumns.type = ##c_types.id
				and ##c_types.resolve = 'SdkBaseDecimal'
				and ##tmpobjects.id = @objectcount          
				and sysobjects.uid = (select schema_id from sys.schemas where name = 'dbo')
	            
		select @tab + @tab + @tab + @tab + 'this->' + syscolumns.name + '.Dimension(' + convert(varchar,syscolumns.length) + ');'
		   from sysobjects, syscolumns, ##tmpobjects, ##c_types 
		   where sysobjects.name = ##tmpobjects.name 
				and syscolumns.id = sysobjects.id
				and syscolumns.type = ##c_types.id
				and ##c_types.resolve = 'SdkBaseString'
				and ##tmpobjects.id = @objectcount
				and sysobjects.uid = (select schema_id from sys.schemas where name = 'dbo')

		select @tab + @tab + @tab + @tab + 'this->' + syscolumns.name + '.Dimension(' + convert(varchar,syscolumns.length) +  ');' 
		   from sysobjects, syscolumns, ##tmpobjects, ##c_types 
		   where sysobjects.name = ##tmpobjects.name 
				and syscolumns.id = sysobjects.id
				and syscolumns.type = ##c_types.id
				and ##c_types.resolve = 'SdkBaseVarbinary'
				and ##c_types.fieldtype != 'Image'
				and ##tmpobjects.id = @objectcount
				and sysobjects.uid = (select schema_id from sys.schemas where name = 'dbo')

		select @fieldcount = 1
		select @syscolumnsid = 1
		while @fieldcount <= @maxfields
		begin
			select @fieldtype = (select fieldtype from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = @sysobjectsid and colid = @syscolumnsid
			
			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)

			if @nummatches > 0 
			begin
				if (@fieldtype = 'Image' and @fieldtype is not NULL)
				begin
					select @tab + @tab + @tab + @tab + 'this->' + syscolumns.name + '.Dimension('
						+ (select convert(varchar, sys.extended_properties.value) + ');'
						from sys.extended_properties where sys.extended_properties.major_id 
							= @sysobjectsid
								and sys.extended_properties.minor_id = @syscolumnsid 
								and sys.extended_properties.name = 'MS_Description')		
						from syscolumns where syscolumns.colid = @syscolumnsid and syscolumns.id 
							= @sysobjectsid
							
				end
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end

		SELECT @tab + @tab + @tab + '}'
		SELECT ''
		SELECT @tab + @tab + @tab + 'virtual array<Int32, 2>^ LookupInformation() override {'
		SELECT @tab + @tab + @tab + @tab + 'return this->InformationArray;'
		SELECT @tab + @tab + @tab + '}'
		
		
		select @fieldcount = 1
		select @syscolumnsid = 1
		while @fieldcount <= @maxfields
		begin
			select @fieldtype = (select resolve from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = @sysobjectsid and colid = @syscolumnsid

			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0 
			begin
				if @fieldtype = 'SdkBaseString' and @fieldtype is not NULL
				begin
					select @camelfieldname = convert(varchar(100), upper(substring(@fieldname, 1, 1)) + substring(@fieldname, 2, len(@fieldname)))
					select @tab + @tab + @tab + 'void Set' + @camelfieldname + '(String^ value) {'
					select @tab + @tab + @tab + @tab + 'this->' + @fieldname + ' = value;'
					select @tab + @tab + @tab + '}'
					
					select @tab + @tab + @tab + 'String^ Get' + @camelfieldname + '() {'
					select @tab + @tab + @tab + @tab + 'return ' + 'this->' + @fieldname + ';'
					select @tab + @tab + @tab + '}'
				end
				
				if @fieldtype = 'SdkInt32' and @fieldtype is not NULL
				begin
					select @camelfieldname = convert(varchar(100), upper(substring(@fieldname, 1, 1)) + substring(@fieldname, 2, len(@fieldname)))
					select @tab + @tab + @tab + 'void Set' + @camelfieldname + '(Int32 value) {'
					select @tab + @tab + @tab + @tab + 'this->' + @fieldname + ' = value;'
					select @tab + @tab + @tab + '}'
					
					select @tab + @tab + @tab + 'Int32 Get' + @camelfieldname + '() {'
					select @tab + @tab + @tab + @tab + 'return ' + 'this->' + @fieldname + ';'
					select @tab + @tab + @tab + '}'
				end
				
				if @fieldtype = 'SdkInt64' and @fieldtype is not NULL
				begin
					select @camelfieldname = convert(varchar(100), upper(substring(@fieldname, 1, 1)) + substring(@fieldname, 2, len(@fieldname)))
					select @tab + @tab + @tab + 'void Set' + @camelfieldname + '(Int64 value) {'
					select @tab + @tab + @tab + @tab + 'this->' + @fieldname + ' = value;'
					select @tab + @tab + @tab + '}'
					
					select @tab + @tab + @tab + 'Int64 Get' + @camelfieldname + '() {'
					select @tab + @tab + @tab + @tab + 'return ' + 'this->' + @fieldname + ';'
					select @tab + @tab + @tab + '}'
				end
				
				if @fieldtype = 'SdkBaseDecimal' and @fieldtype is not NULL
				begin
					select @camelfieldname = convert(varchar(100), upper(substring(@fieldname, 1, 1)) + substring(@fieldname, 2, len(@fieldname)))
					select @tab + @tab + @tab + 'void Set' + @camelfieldname + '(Decimal value) {'
					select @tab + @tab + @tab + @tab + 'this->' + @fieldname + ' = value.ToString();'
					select @tab + @tab + @tab + '}'
					
					select @tab + @tab + @tab + 'Decimal Get' + @camelfieldname + '() {'
					select @tab + @tab + @tab + @tab + 'return ' + 'Decimal::Parse(this->' + @fieldname + '.AsString());'
					select @tab + @tab + @tab + '}'
				end
				
				if @fieldtype = 'SdkDateTime' and @fieldtype is not NULL
				begin					
					select @camelfieldname = convert(varchar(100), upper(substring(@fieldname, 1, 1)) + substring(@fieldname, 2, len(@fieldname)))
					select @tab + @tab + @tab + 'void Set' + @camelfieldname + '(DateTime value) {'
					select @tab + @tab + @tab + @tab + 'if (value.Day != 0) {'
					select @tab + @tab + @tab + @tab + @tab + 'this->' + @fieldname + '.MakeDate(value.Day, value.Month, value.Year);'
					select @tab + @tab + @tab + @tab + '} else {'
					select @tab + @tab + @tab + @tab + @tab + 'this->' + @fieldname + '.MakeTime(value.Hour, value.Minute, value.Second);'
					select @tab + @tab + @tab + @tab + '}'
					select @tab + @tab + @tab + '}'
					
					select @tab + @tab + @tab + 'DateTime Get' + @camelfieldname + '() {'
					select @tab + @tab + @tab + @tab + 'if (this->' + @fieldname + '.IsDate()) {'
					select @tab + @tab + @tab + @tab + @tab + 'return DateTime::Parse(this->' + @fieldname + '.DateAsString());'
					select @tab + @tab + @tab + @tab + '} else {'
					select @tab + @tab + @tab + @tab + @tab + 'return DateTime::Parse("01Jan1900 " + this->' + @fieldname + '.TimeAsStringSeconds());'
					select @tab + @tab + @tab + @tab + '}'
					
					
					
					select @tab + @tab + @tab + '}'
				end
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end
		
		
		
		SELECT @tab + @tab + '};'
		SELECT @tab + '}'
		SELECT ''
		
		

		SELECT @objectcount = @objectcount + 1
	END

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationThreadStorageConstructor]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationThreadStorageConstructor.sql
-- 
--	Notes:		Contains constructor for ApplicationThreadStorage classes.
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	06jun2007	amr		SDK-78		Added WriteXml to SdkBaseBuffer
--	Dec-Jan06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationThreadStorageConstructor] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

	declare @maxobjects int
	SELECT @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	SELECT @objectcount = 1

--------------------------------------- Build structs and unions for buffers -----------------------------------------------

	SELECT @tab + @tab + @tab + 'this->NewBuffers = gcnew array<SdkBaseBuffer^>(' + convert(varchar, @maxobjects) + ');'
	SELECT @tab + @tab + @tab + 'this->OldBuffers = gcnew array<SdkBaseBuffer^>(' + convert(varchar, @maxobjects) + ');'

	while @objectcount <= @maxobjects
	begin
		SELECT @tab + @tab + @tab + 'this->NewBuffers[' + convert(varchar, id - 1) + '] = gcnew ' + name + 'Namespace::' + name + 'Buffer(this);' from ##tmpobjects where id = @objectcount
		SELECT @tab + @tab + @tab + 'this->OldBuffers[' + convert(varchar, id - 1) + '] = gcnew ' + name + 'Namespace::' + name + 'Buffer(this);' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	end

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationHeader]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationHeader.sql
-- 
--	Notes:		Contains ##using statements and application header code generated 
--				code
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	17apr2006	amr		ABT0817		Change hash codes
--	Dec-Jan06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationHeader] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING on

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''
	
	EXEC SdkStandardHeader

	declare @maxobjects int
	select @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	select @objectcount = 1

--------------------------------------- Build structs and unions for buffers -----------------------------------------------

	while @objectcount <= @maxobjects
	begin
		SELECT '#if defined(SCHEMA_' + (select name from ##tmpobjects where id = @objectcount) + ') || defined(SCHEMA_ALL)'
		SELECT @tab + 'using namespace ApplicationSchema::' + (select name from ##tmpobjects where id = @objectcount) + 'Namespace;'
		SELECT '#endif'
		SELECT @objectcount = @objectcount + 1
	end

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKregistry]'
GO
CREATE TABLE [dbo].[SDKregistry]
(
[rowid] [bigint] NOT NULL,
[bookdate] [datetime] NULL,
[zzUnique] [int] NULL,
[applicationname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKregistry] on [dbo].[SDKregistry]'
GO
ALTER TABLE [dbo].[SDKregistry] ADD CONSTRAINT [PK_SDKregistry] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKregistry]'
GO
ALTER TABLE [dbo].[SDKregistry] ADD CONSTRAINT [SDKregistryix] UNIQUE NONCLUSTERED  ([zzUnique])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationSchemaLibrary]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationSchemaLibrary.sql
-- 
--	Notes:		Contains buffer definitions
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	02jun16		jonl/rc	SDK-248		Removed LookupBufferByHash method
--	24jul14		jonl	SDK-198		Schema split
--	16may14		jonl	SDK-198		Added LookupTopLevelSchemaTables
--	16may14		jonl	SDK-198		Multi-schema
--	08may12		mgf		SDK-135		Changed into resource file
--	13sep2007	mgf		SDK-84		Corrected LEADINGZEROES
--	02may2006	amr		ABT0825		Performance improvements
--	29apr2006	amr		ABT0825		Remove substring references
--	27apr2006	amr		ABT0825		Optimise LookupFieldNumberByName
--	17apr2006	amr		ABT0817		Change hashcodes
--	Dec-Jan06	amr		ABT0748		Convert to VS2005 - formerly 
--									.. schemaa_functions.sql
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--	12oct05		amr		ABT0705		Fix issue with global sql id changing
--	10oct05		amr		ABT0705		Minimum rebuild for tables
--	10oct05		amr		ABT0705		Minimum rebuild
--	29jun05		amr		ABT0639		Remove LookupSdkItem, detail functions
--	28jan05		amr		ABT0587		Fix opt problems with buf_cmp
--	26jan05		amr		ABT0587		Optimisation of lookup_buffer
--	21jan05		amr		ABT0587		Vtune changes to index lookup
--	18jan05		amr		ABT0581		Database schema check digit
--	17jan05		jonl	ABT0582		Filter indexes with indid of 255 (internal indexes)
--	15jan05		jonl	ABT0580		Optimisation of buf_clr
--	12jan05		jonl	ABT0578		Optimisation of lookup_bufferno
--	12jan05		jonl	ABT0578		Fix for lookup_bufferno
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	07sep04		amr		ABT0492		Use integer switch in lookup_bufferno
--	01sep04		amr		ABT0487		Fix prob with blank db
--	01sep04		amr		ABT0485		Check items/details at compile time
--	29aug04		amr		ABT0485		Optimisation
--	10aug04		jonl	ABT0475		'Don't show this screen again' tickboxes on wizards
--	06jul2004	amr		ABT0455		Added SqlDecimal 4bytes bigger
--	30jun04		amr		ABT0451		Use _fastcmp not _stricmp / optimisations
--	28jun2004	amr		ABT0449		Removed equals overload on varbinaries
--	02jun04		amr		ABT0439		Added lookup_isforeignkey
--	17may04		amr		ABT0415		Updated size of decimal
--	02apr04		amr		ABT0368		Fix leading zeroes problem
--  13feb2004	amr		ABT0306		Datatypes reorganisation
--  13feb04		mgf		ABT0305		Changed SQL syntax for reduced file sizesf
--	21nov03		jonl	ABT0252		Application Name
-- 	18nov03		amr		ABT0238QA 	Fix lack of  at end of lines
--	18nov03		amr		ABT0239		Remove varbinary list
--	17nov03		jonl	ABT0238QA	Added 'dummy' lookups and sets for shortcut etc.
--	14nov03     jonl    ABT0238     Shortcut Keys
--	17oct03		amr		ABT0198		Varbinary for password
--	29sep03		amr		ABT0184		Added leadingzeros
--  24sep03		jonl	ABT0171		support varbinaries up to 47K
--	23sep03		jonl	ABT0171		varbinary datatype changes
--	18sep03		jonl	ABT0171		varbinary datatype
--  05sep03		amr/jl	ABT0151		Fix indexname function
--  02sep03		amr		ABT0122		Added get_rowarray
--	23aug03		amr		APB0105		Upgrade to .NET2003
--	15aug03		amr		APB0039		Added extra in place of length
--	13aug03		amr		APB0088		Added ordering of treeview
--	09aug03		jonl	APB0084		Consistant look and feel for wizards
--	07aug03		amr		APB0071		Error stack
--	03aug03		amr		APB0049		Reserve memory for scratch pad for SQL parameters
--	02aug03		jonl	APB0064		Added lookup_SQLstringlengths function
--	02aug03		jonl	APB0045		Don't create global table in this one anymore
--	01aug03		jonl	APB0045	    Added set global routines (for sending date format to client)
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	24jul03		amr		APB0022		Fixed memory exception with threadreports
--	18jul03		amr					Creation of commonTK.h
--	18jul03		amr					Split out client from server
--	16jul03		amr		APB0022		Added delete of errbufarray on free_buffer
--	21jun03		amr					Improved memory error checking
--	11jun03		amr					Added lookup_secondindex
--	26may03		amr					Allow for variable number of threads
--	30apr03		jonl				Make it OK if we delete columns from SQL and create
-- 									non-sequention syscolumns.colid's
--	24apr03		jonl				Changed itemname into itemno
--	21apr03		jonl				Added rep_itemname functionality for items on profiles
--	15mar03		amr					Added report mallocs
--	25feb03		amr					Added lookup_fieldnumber
--	24feb03		jonl				Added 'break' to lookup_fieldname function
--	23feb03		jonl				Fixed lookup_indexname function for non sequential indid's
--	23feb03		jonl				Added lookup_indexname function
--	09feb03		amr					Added detection of SDKitem table and SDKdetail
--	04feb03		jonl				Ignore SQL statistics indexes (that start _WA_Sys_...)
--	04feb03		jonl				Added check_index, check_indexes
--	02feb03		jonl				Fixed lookup_parentbuffer - was returning
--                                  parents defined on unique indexes as well as
--                                  implicit primary keys
--	31jan03		jonl				Added string_sync function
--	30jan03		jonl				Added lookup_sizearray (for string handling)
--	27jan03		amr					Added malloc_buffers
--	23jan03		jonl				Added lookup_primaryindexname
--	22jan03		jonl				Added lookup_index
--	15jan03		jonl				Added lookup_foreignkey
--	14jan03		jonl				Added lookup_primarykey
--	05jan03		amr					No need for comma stripping now
--	31oct02		jonl				Added lookup_bufferlength
--	23oct02		amr					Split out from schemaa.sql
--	10oct02		jonl				Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationSchemaLibrary] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @TAB VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

	declare @TEMPVARa varchar(255)
	declare @TEMPVARb varchar(255)
	declare @TEMPVARc varchar(255)
	declare @colno int
	declare @colname varchar(50)
	declare @first int
	declare @caseheader bit
	declare @syscolumnsid int
	declare @nummatches int
	declare @fieldcount int
	declare @maxfields int
	declare @objectname varchar(255)
	declare @sysobjectsid int 

	declare @maxobjects int
	select @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	select @objectcount = 1


----------------------------- Build method for resolving buffer addresses from buffer SQL code ---------------------------
-- LookupBufferByNumber takes the buffer number and a structure of all the buffers as parameters and returns the address of the 
-- buffer requested.
-------------------------------------------------------------------------------------------------------------------------- 

	SELECT 'virtual SdkBaseBuffer^ LookupBufferByNumber(Int16 bufferNumber, array<SdkBaseBuffer^>^ bufferArray) override {'
	SELECT ''
	SELECT @TAB + 'if (bufferNumber < 1 || bufferNumber > ' + convert(varchar, MAX(id)) + ') return nullptr;' from ##tmpobjects
	SELECT @TAB + 'return bufferArray[bufferNumber - 1];'
	SELECT '}'
	SELECT ''

	
----------------------------- Build method for resolving buffer addresses from buffer name  ---------------------------
-- LookupBufferByName takes a array<wchar_t>^ and a structure of all the buffers as parameters and returns the address of the 
-- buffer requested.
-------------------------------------------------------------------------------------------------------------------------- 

	declare @chr as varchar(1)
	declare @chr2 as varchar(1)
	declare @lstchr as varchar(1)
	declare @lstchr2 as varchar(1)

	set @lstchr = ''

	SELECT 'virtual Int16 LookupBufferNumberByName(String^ bufferName) override {'
	SELECT ''
	SELECT @TAB + 'if (bufferName->Length < 2) {'
	SELECT @TAB + @TAB + 'return 0;'
	SELECT @TAB + '}'
	SELECT ''

	SELECT @objectcount = 1
	SELECT @TAB + 'switch (bufferName[0]) {'

	while @objectcount <= @maxobjects
	begin
		select @chr = convert(varchar(1), name), @TEMPVARa = name, @TEMPVARb = id from ##tmpobjects where id = @objectcount
		
		if @lstchr != @chr 
		begin
			set @lstchr2 = ''
			if @lstchr != ''
			begin
				SELECT @TAB + @TAB + '}'
				SELECT @TAB + @TAB + 'break;'

			end
			if ascii(@chr) >= 48 and ascii(@chr) <= 57
			begin
				SELECT @TAB + 'case L''' + LOWER(@chr) + ''': '
			end
			else
			begin
				SELECT @TAB + 'case L''' + LOWER(@chr) + ''': ' + 'case L''' + UPPER(@chr) + ''':'
			end
			SELECT @TAB + @TAB + 'switch (bufferName[1]) {'
		end

		select @chr2 = right(convert(varchar(2), name),1) from ##tmpobjects where id = @objectcount
			
		if @lstchr2 != @chr2 
		begin
			if @lstchr2 != ''
			begin
				SELECT @TAB + @TAB + @TAB + 'break;'
			end
			SELECT @TAB + @TAB + 'case L''' + LOWER(@chr2) + ''': ' + 'case L''' + UPPER(@chr2) + ''':'
		end
		
		SELECT @TAB + @TAB + @TAB + 'if (FastUtilities::FastStringCompare(bufferName, "'+ @TEMPVARa + '", true)) return ' + @TEMPVARb + ';'
		
		set @lstchr = @chr
		set @lstchr2 = @chr2
		select @objectcount = @objectcount + 1
	end
	SELECT @TAB + @TAB + '}'
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''

	----------------------------- Build method for resolving buffer addresses from buffer SQL code ---------------------------
	-- LookupBufferNameByNumber takes a buffer number and returns the corresponding buffer name.
	-------------------------------------------------------------------------------------------------------------------------- 

	SELECT 'virtual String^ LookupBufferNameByNumber(Int16 bufferNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @TEMPVARb = name from ##tmpobjects where id = @objectcount
		SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ': return "' + @TEMPVARb + '";'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return "";'
	SELECT '}'
	SELECT ''

	----------------------------- Build method for resolving buffer length from buffer number ---------------------------
	-------------------------------------------------------------------------------------------------------------------------- 

	SELECT 'virtual Int32 LookupBufferLength(Int16 bufferNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @TEMPVARb = name from ##tmpobjects where id = @objectcount
		SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ': return ' + upper(@TEMPVARb) + 'BUFFERLENGTH;'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''

	-------------- Build function to return foreign key information for FK's that are linked to the PK -----------------------
	-- lookup_foreignkey takes two buffer numbers, one as a parent and one as a child and returns the name of the child field 
	-- that is the foreign key to the parent table (or a null string if the tables are not related)
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @objectcount2 int
	select @colno = 0
	select @colname = ''
	select @first = 0

	declare @sysobjectsid1 int
	declare @sysobjectsid2 int
	declare @TEMPVARaName varchar(255)
	declare @TEMPVARbName varchar(255)

	SELECT 'virtual Int16 LookupForeignKey(Int16 parentBufferNumber, Int16 childBufferNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (parentBufferNumber) {'
	SELECT @objectcount = 1
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @caseheader = 0
		SELECT @TEMPVARa = id from ##tmpobjects where id = @objectcount
		SELECT @TEMPVARaName = name from ##tmpobjects where id = @objectcount
		SELECT @sysobjectsid1 = (select id from sysobjects where sysobjects.name = (select name from ##tmpobjects where ##tmpobjects.id = @objectcount) and uid = (select schema_id from sys.schemas where name = 'dbo'))
		SELECT @objectcount2 = 1
		WHILE @objectcount2 <= @maxobjects
   		BEGIN
			-- Dunno why these need to be cleared, otherwise below don't work....
			SELECT @TEMPVARc = NULL
			SELECT @TEMPVARb = id from ##tmpobjects where id = @objectcount2
			SELECT @TEMPVARbName = name from ##tmpobjects where id = @objectcount2
			SELECT @sysobjectsid2 = (select id from sysobjects where sysobjects.name = (select name from ##tmpobjects where ##tmpobjects.id = @objectcount2) and uid = (select schema_id from sys.schemas where name = 'dbo'))

			SELECT @TEMPVARc = name from syscolumns where id IN
			(
				select fkeyid from sysforeignkeys 
				where constid in 
				(
					 select a.id from sysobjects a, sysobjects b, sysindexes
					 where a.xtype = 'F' and b.xtype = 'PK' 
					 and b.parent_obj = a.parent_obj 
					 and sysindexes.name not like '_WA_Sys_%'
					 and b.parent_obj = @sysobjectsid2
					 and a.uid = (select schema_id from sys.schemas where name = 'dbo')
					 and b.uid = (select schema_id from sys.schemas where name = 'dbo')
				) 
				and rkeyid = @sysobjectsid1
			) 
			and colid = 
			(
				select fkey from sysforeignkeys where constid IN 
				(
					  select a.id from sysobjects a, sysobjects b, sysindexes
					  where a.xtype = 'F' and b.xtype = 'PK' 
					  and sysindexes.name not like '_WA_Sys_%'
					  and b.parent_obj = a.parent_obj 
					  and b.parent_obj = @sysobjectsid2
					  and a.uid = (select schema_id from sys.schemas where name = 'dbo')
					  and b.uid = (select schema_id from sys.schemas where name = 'dbo')
				) 
				and sysforeignkeys.rkeyid = @sysobjectsid1
				and sysforeignkeys.rkey =
				(    
					select colid from syscolumns where syscolumns.name =
					(
						 select primaryrow from ##primarykeys WITH (INDEX(##IX_primarykeys)) where ##primarykeys.tablename = @TEMPVARaName
					)
					and syscolumns.id = sysforeignkeys.rkeyid    
				 )
			)	

			if @TEMPVARc is not NULL
			begin
				if @caseheader = 0
				begin
					SELECT @first = 1
					SELECT @TAB + 'case ' + @TEMPVARa + ':'
					SELECT @TAB + @TAB + 'switch (childBufferNumber) {'
					SELECT @caseheader = 1
				end
				
				SELECT @colname = ''
				SELECT @fieldcount = 1
				SELECT @syscolumnsid = 1
				SELECT @maxfields = (select count(*) from syscolumns where id = (select id from sysobjects where name = (select name from ##tmpobjects where id = @TEMPVARb) and uid = (select schema_id from sys.schemas where name = 'dbo')))
				while @fieldcount <= @maxfields and @colname != @TEMPVARc
				begin
					SELECT @colname = name, @colno = convert(varchar, @fieldcount) from syscolumns where colid = @syscolumnsid and id = (select id from sysobjects where name = (select name from ##tmpobjects where id = @TEMPVARb)and uid = (select schema_id from sys.schemas where name = 'dbo'))
					SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = (select id from sysobjects where name = (select name from ##tmpobjects where id = @TEMPVARb)and uid = (select schema_id from sys.schemas where name = 'dbo')))
					if @nummatches > 0 
					begin
						SELECT @fieldcount = @fieldcount + 1
					end
					SELECT @syscolumnsid = @syscolumnsid + 1
				end					
				SELECT @TAB + @TAB + 'case ' + @TEMPVARb + ': return ' + convert(varchar, @colno) + ';'
			end
			SELECT @objectcount2 = @objectcount2 + 1;
		end
		IF @caseheader = 1
		BEGIN
			SELECT @TAB + @TAB + '}'
			SELECT @TAB + @TAB + 'break;'
		END
		SELECT @objectcount = @objectcount + 1
	END
	IF @first = 0
	BEGIN
		SELECT @TAB + 'case -1:'
		SELECT @TAB + @TAB + 'return 0;'
	END
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''

	-------------- Build function to return foreign key information for FK's that are linked to the PK -----------------------
	-- lookup_foreignkey takes two buffer numbers, one as a parent and one as a child and returns the name of the child field 
	-- that is the foreign key to the parent table (or a null string if the tables are not related)
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @TEMPVARd int
	declare @anymatches int
	SELECT 'virtual bool LookupIsForeignKey(Int16 bufferNumber, Int16 fieldNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1

	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		SELECT @first = 0
		SELECT @anymatches = (select count(*) from sysforeignkeys where fkeyid = @sysobjectsid)

		while @fieldcount <= @maxfields
		begin
			SELECT @TEMPVARa = convert(varchar, @fieldcount), @TEMPVARd = colid from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
			SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)

			if @anymatches > 0 and @first = 0
			begin
				SELECT @first = 1
				SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ':'
				SELECT @TAB + @TAB + 'switch (fieldNumber) {'
			end
					
			if @nummatches > 0 
			begin
				SELECT @nummatches = (select count(*) from sysforeignkeys where @TEMPVARd = fkey and fkeyid = @sysobjectsid)
			
				if @nummatches > 0
				begin
					SELECT @TAB + @TAB + 'case ' + @TEMPVARa + ': return true;'
				end
				SELECT @fieldcount = @fieldcount + 1
			end
			SELECT @syscolumnsid = @syscolumnsid + 1
		end	
		if @anymatches > 0
		begin
			SELECT @TAB + @TAB + '}'	
			SELECT @TAB + @TAB + 'break;'
		end
		SELECT @objectcount = @objectcount + 1
	end
	if @first = 0
	begin
		SELECT @TAB + 'case -1: return false;'
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return false;'
	SELECT '}'
	SELECT ''

	----------------------------------- Build function to lookup fieldname based on buffer no and field no--------------------
	-- lookup_fieldname takes a buffer number and a field number as parameters, and returns a string describing the name of
	-- that field. Fields are numbered as in a isqlw window - i.e. the first field returned in a select * query is field 1
	-------------------------------------------------------------------------------------------------------------------------- 

	SELECT @objectcount = 1
	SELECT @fieldcount = 1
	SELECT 'virtual String^ LookupFieldNameByNumber(Int16 bufferNumber, Int16 fieldNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		SELECT @TAB + 'case ' + (convert(varchar, @objectcount)) + ':'
		SELECT @TAB + @TAB + 'switch (fieldNumber) {'
		while @fieldcount <= @maxfields
		begin
			SELECT @TEMPVARa = convert(varchar, @fieldcount), @TEMPVARb = name from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
			SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0 
			begin
				SELECT @TAB + @TAB + 'case ' + @TEMPVARa + ': return "' + @TEMPVARb + '";'
				SELECT @fieldcount = @fieldcount + 1
			end
			SELECT @syscolumnsid = @syscolumnsid + 1
		end
		SELECT @TAB + @TAB + '}'
		SELECT @TAB + @TAB + 'break;'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return "";'
	SELECT '}'
	SELECT ''

	----------------------------------- Build function to lookup fieldnumber based on buffer no and field name!--------------------
	-- lookup_fieldname takes a buffer number and a field name as parameters, and returns a string describing the name of
	-- that field. Fields are numbered as in a isqlw window - i.e. the first field returned in a select * query is field 1
	-------------------------------------------------------------------------------------------------------------------------- 

	create table ##tmpsysobjects
	(
		id int,
		name varchar(255),
	)

	create index ##IX_tmpsysobjects on ##tmpsysobjects (name)

	SELECT 'virtual Int16 LookupFieldNumber(Int16 bufferNumber, String^ fieldName) override {'
	SELECT ''
	SELECT @TAB + 'if (fieldName->Length < 2) {'
	SELECT @TAB + @TAB + 'return -1;'
	SELECT @TAB + '}'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		set @lstchr = ''

		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		SELECT @TAB + 'case ' + (convert(varchar, @objectcount)) + ':'
		while @fieldcount <= @maxfields
		begin
			SELECT @TEMPVARa = name, @TEMPVARb = convert(varchar, @fieldcount) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
			SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0 
			begin
				insert into ##tmpsysobjects values (@fieldcount, upper(@TEMPVARa))
				SELECT @fieldcount = @fieldcount + 1
			end
			
			SELECT @syscolumnsid = @syscolumnsid + 1
		end

		declare cur cursor FAST_FORWARD for select id, name from ##tmpsysobjects order by name
		open cur
			
		SELECT @TAB + @TAB + 'switch (fieldName[0]) {'
			
		fetch next from cur into @TEMPVARb, @TEMPVARa
		while @@FETCH_STATUS = 0
		begin
			set @chr = convert(varchar(1), @TEMPVARa)
			
			if @lstchr != @chr 
			begin
				set @lstchr2 = ''
				if @lstchr != ''
				begin
					SELECT @TAB + @TAB + @TAB + '}'
					SELECT @TAB + @TAB + @TAB + 'break;'
				end
				
				if ascii(@chr) >= 48 and ascii(@chr) <= 57
				begin
					SELECT @TAB + @TAB + 'case L''' + LOWER(@chr) + ''': '
				end
				else
				begin
					SELECT @TAB + @TAB + 'case L''' + LOWER(@chr) + ''': ' + 'case L''' + UPPER(@chr) + ''':'
				end
				
				SELECT @TAB + @TAB + @TAB + 'switch (fieldName[1]) {'
			end

			set @chr2 = right(convert(varchar(2), @TEMPVARa),1)
				
			if @lstchr2 != @chr2 
			begin
				if @lstchr2 != ''
				begin
					SELECT @TAB + @TAB + @TAB + @TAB + 'break;'
				end

				if ascii(@chr2) >= 48 and ascii(@chr2) <= 57
				begin
					SELECT @TAB + @TAB + @TAB + 'case L''' + LOWER(@chr2) + ''':'
				end
				else
				begin
					SELECT @TAB + @TAB + @TAB + 'case L''' + LOWER(@chr2) + ''': ' + 'case L''' + UPPER(@chr2) + ''':'
				end
			end
			
			SELECT @TAB + @TAB + @TAB + @TAB + 'if (FastUtilities::FastStringCompare(fieldName, "' + @TEMPVARa + '", true)) return ' + @TEMPVARb + ';'
			
			set @lstchr = @chr
			set @lstchr2 = @chr2
		
			fetch next from cur into @TEMPVARb, @TEMPVARa
		end
		
		SELECT @TAB + @TAB + @TAB + '}'
		
		close cur
		deallocate cur

		delete ##tmpsysobjects

		SELECT @TAB + @TAB + @TAB + 'break;'
		SELECT @TAB + @TAB + '}'
		SELECT @TAB + @TAB + 'break;'
		
		SELECT @objectcount = @objectcount + 1 
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return -1;'
	SELECT '}'
	SELECT ''

	drop index ##tmpsysobjects.##IX_tmpsysobjects
	drop table ##tmpsysobjects

	-------------------------------------- Build function to return primary index name  --------------------------------------
	-- lookup_primaryindexname takes a buffer number as a parameter and returns a string describing the index that SQL has 
	-- built for the primary key on the corresponding table. Ie - the 'customer' table's primary index would be created as
	-- 'PK_customer' by SQL by default, but user changes to the index names are still handled by this function
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @objectid int
	SELECT 'virtual String^ LookupPrimaryIndexName(Int16 bufferNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectid = (select id from sysobjects where name = (select name from ##tmpobjects where id = @objectcount)and uid = (select schema_id from sys.schemas where name = 'dbo'))
		SELECT @TEMPVARa = id, @TEMPVARb = name from ##tmpobjects where id = @objectcount
		SELECT @TEMPVARc = name from sysindexes where name not like '_WA_Sys_%' and id = @objectid and status & 0x800 = 0x800
		SELECT @TAB + 'case ' + @TEMPVARa + ': return "' + @TEMPVARc + '";'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return "";'
	SELECT '}'
	SELECT ''

	--------- Build function to return columns of all indexes (not just implicit) based on tablename-------------------------
	-- lookup_index a buffer number, an indexname and a column no as parameters. Columnno represents the order of fields 
	-- within the index for supporting indexes with more than one field in them (order by date, time etc.) By calling 
	-- lookup_index with an ever increasing columnno, all the columns in an index may be returned one at a time until the 
	-- function returns a NULL string, at which point all available index columns have been returned
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @maxindid int
	declare @currindid int
	declare @colid int
	declare @columnname varchar(50)
	declare @check_rows_existI int

	SELECT 'virtual Int16 LookupIndex(Int16 bufferNumber, Int16 indexNumber, Int16 fieldNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @objectid = @sysobjectsid
		SELECT @TAB + 'case ' + (convert(varchar, @objectcount)) + ':'
		SELECT @maxindid = (select max(indid) from sysindexes where name not like '_WA_Sys_%' and id = @objectid)	
		if @maxindid > 1 
		begin
			SELECT @TAB + @TAB + 'switch (indexNumber) {'
		end
		
		SELECT @currindid = 1
		while  @currindid <= @maxindid
		begin
			SELECT @caseheader = 0
			SELECT @check_rows_existI = (select count(*) from sysindexes where name not like '_WA_Sys_%' and indid = @currindid and id = 
									@sysobjectsid)
			if @check_rows_existI <> 0 
			begin				
				if @maxindid > 1
				begin
					SELECT @TAB + @TAB + 'case ' + convert(varchar, @currindid) + ':'
				end
				select @colid = 1
				while @colid < 17
				begin
					select @columnname = (select index_col(@objectname, sysindexes.indid, @colid) from sysindexes where name not like '_WA_Sys_%' and id = @objectid and indid = @currindid)
					
					if @columnname is not NULL
					begin
						if @caseheader = 0
						begin
							SELECT @TAB + @TAB + @TAB + 'switch (fieldNumber) {'
							SELECT @caseheader = 1
						end
											
						SELECT @colname = ''
						SELECT @fieldcount = 1
						SELECT @syscolumnsid = 1
						SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
						while @fieldcount <= @maxfields and @colname != @columnname
						begin
							SELECT @colname = name, @colno = convert(varchar, @fieldcount) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
							SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
							if @nummatches > 0 
							begin
								SELECT @fieldcount = @fieldcount + 1
							end
							SELECT @syscolumnsid = @syscolumnsid + 1
						end					
						
						SELECT @TAB + @TAB + @TAB + 'case ' + (convert(varchar, @colid)) + ': return ' + convert(varchar, @colno) + ';'
					end
					else 
					begin
						break
					end
					SELECT @colid = @colid + 1
				end

				SELECT @TAB + @TAB + @TAB + 'case -1: return ' + convert(varchar, (@colid - 1)) + ';'

				if @caseheader = 1
				begin
					SELECT @TAB + @TAB + @TAB + '}'
					if @maxindid > 1
					begin
						SELECT @TAB + @TAB + @TAB + 'break;'
					end
				end
			end
			SELECT @currindid = @currindid + 1
		end
		if @maxindid > 1 
		begin
			SELECT @TAB + @TAB + '}'
		end
		SELECT @TAB + @TAB + 'break;'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''

	----------------------------------- Build LookupIndexName ----------------------------------------
	-- LookupIndexName is used by the toolkit to populate it's combo box of available indecxes for each buffer. It takes a 
	-- buffer number and an index number as parameters. It should be called with an ever increasing index number (starting
	-- starting from 1) until it returns a NULL string - at which point all available indexes on the buffer have been returned
	--	It is also used in Db.Find.
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @indexcount int
	declare @check_rows_exist int
	declare @indexoffset int
	declare @maxindexes int

	SELECT 'virtual String^ LookupIndexName(Int16 bufferNumber, Int16 indexNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @TAB + 'case ' + convert(varchar,@objectcount) + ':'
		SELECT @indexcount = 1
		SELECT @caseheader = 0
		SELECT @indexoffset = 0
		SELECT @maxindexes = (select max(indid) from sysindexes where id = @sysobjectsid)
		while @indexcount <= @maxindexes 
		begin
			SELECT @check_rows_exist = (select count(*) from sysindexes where name not like '_WA_Sys_%' and indid = @indexcount and indid != 255 and id = 
								@sysobjectsid)                    
			if @check_rows_exist <> 0
			begin
				if @caseheader = 0
				begin
					SELECT @TAB + @TAB + 'switch (indexNumber) {'
					SELECT @caseheader = 1
				end
		
				SELECT @TEMPVARa = name from sysindexes where name not like '_WA_Sys_%' and indid = @indexcount and id = @sysobjectsid
				SELECT @TAB + @TAB + 'case ' + convert(varchar, @indexoffset + 1) + ': return "' + @TEMPVARa + '";'
				SELECT @indexoffset = @indexoffset + 1
			end
			SELECT @indexcount = @indexcount + 1
		end
		if @caseheader = 1
		begin
			SELECT @TAB + @TAB + '}'
		end
		SELECT @TAB + @TAB + 'break;'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return "";'
	SELECT '}'
	SELECT ''

	--------- Lookup index number based on name-------------------------
	-------------------------------------------------------------------------------------------------------------------------- 

	SELECT 'virtual Int16 LookupIndexNumber(Int16 bufferNumber, String^ indexName) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @objectid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @TAB + 'case ' + (convert(varchar, @objectcount)) + ':'
		SELECT @maxindid = (select max(indid) from sysindexes where name not like '_WA_Sys_%' and id = @objectid)
		SELECT @currindid = 1
		while  @currindid <= @maxindid
		begin
			SELECT @caseheader = 0
			SELECT @check_rows_existI = (select count(*) from sysindexes where name not like '_WA_Sys_%' and indid = @currindid and id = @objectid)
			if @check_rows_existI <> 0 
			begin						
				SELECT @TEMPVARa = name from sysindexes where name not like '_WA_Sys_%' and id = @objectid and indid = @currindid

				SELECT @columnname = (select index_col((select name from ##tmpobjects where id = @objectcount), sysindexes.indid, @colid) from sysindexes where name not like '_WA_Sys_%' and id = @objectid and indid = @currindid)
					
				SELECT @TAB + @TAB + 'if (FastUtilities::FastStringCompare(indexName, "' + @TEMPVARa + '", true)) {'
				SELECT @TAB + @TAB + @TAB + 'return ' + convert(varchar, @currindid) + ';'
				SELECT @TAB + @TAB + '}'
			end
			SELECT @currindid = @currindid + 1
		end
		SELECT @TAB + @TAB + 'break;'
		SELECT @objectcount = @objectcount + 1
	end
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''

	SELECT @objectcount = (select count(*) from sysobjects where name = 'SDKregistry' and uid = (select schema_id from sys.schemas where name = 'dbo'))
	IF @objectcount > 0 
	BEGIN
		SELECT @TEMPVARa = applicationname from SDKregistry
		SELECT 'virtual String^ LookupApplicationName() override {'
		SELECT ''
		SELECT @TAB + 'return "' + @TEMPVARa + '";'
		SELECT '}'
	END
	ELSE
	BEGIN
		SELECT 'virtual String^ LookupApplicationName() override {'
		SELECT ''
		SELECT @TAB + 'return "SDK Application";'
		SELECT '}'
	END
	SELECT ''
	
	BEGIN
		SELECT 'virtual System::Collections::Generic::List<String^>^ LookupSchemaNames() override {'
		SELECT ''
		SELECT @TAB + 'System::Collections::Generic::List<String^>^ schemaList = gcnew System::Collections::Generic::List<String^>();'
		SELECT @TAB + 'schemaList->Add("' + name + '");' from sys.schemas where principal_id = (select principal_id from sys.schemas where name = 'dbo') and name != 'dbo' order by name
		SELECT @TAB + 'return schemaList;'
		SELECT '}'
	END
	
	SELECT ''
	
	BEGIN 
		SELECT 'virtual System::Collections::Generic::List<String^>^ LookupTopLevelSchemaNames() override {'
		SELECT ''
		SELECT @TAB + 'System::Collections::Generic::List<String^>^ topLevelSchemaNames = gcnew System::Collections::Generic::List<String^>();'
		SELECT @TAB + 'topLevelSchemaNames->Add("' + sys.objects.name + '");' from sys.objects where object_id in (select major_id from sys.extended_properties where name = 'TopLevelSchema') order by sys.objects.name
		SELECT @TAB + 'return topLevelSchemaNames;'
		SELECT '}'
	END
		
		

	----------------------------------- Build function to lookup leading zeros --------------------
	-------------------------------------------------------------------------------------------------------------------------- 

	declare @retval varchar(50)
	declare @retnum varchar(10) 
	declare @fieldaddr varchar(50)

	SELECT 'virtual Int16 LookupLeadingZeroes(Int16 bufferNumber, Int16 fieldNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @fieldaddr = (select name from ##tmpobjects where id = @objectcount)
		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		SELECT @caseheader = 0
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		
		while @fieldcount <= @maxfields
		begin
			SELECT @retval = (select convert(varchar, sys.extended_properties.value) from sys.extended_properties where sys.extended_properties.major_id = @sysobjectsid and sys.extended_properties.minor_id = @syscolumnsid and sys.extended_properties.name = 'MS_Description' and convert(varchar, sys.extended_properties.value) like 'LEADINGZEROES(%)')
			SELECT @retnum = SUBSTRING(@retval, 15, (LEN(@retval) - 15))
			
			if @retval like 'LEADINGZEROES(%)'
			begin
				if @caseheader = 0
				begin
					SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ':'
					SELECT @TAB + @TAB + 'switch (fieldNumber) {'
					SELECT @caseheader = 1
				end
				SELECT @TEMPVARa = convert(varchar, @fieldcount), @TEMPVARb = convert(varchar, @retnum) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
				SELECT @TAB + @TAB + 'case ' + @TEMPVARa + ': return ' + @TEMPVARb + ';'
			end
			
			SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
			if @nummatches > 0 
			begin
				SELECT @fieldcount = @fieldcount + 1
			end
			SELECT @syscolumnsid = @syscolumnsid + 1
		end
		if @caseheader = 1
		begin
			SELECT @TAB + @TAB + '}'
			SELECT @TAB + @TAB + 'break;'
		end
		SELECT @objectcount = @objectcount + 1 
	end
	SELECT @TAB + 'case -1:'
	SELECT @TAB + @TAB + 'return 0;'
	SELECT @TAB + '}'
	SELECT @TAB + 'return 0;'
	SELECT '}'
	SELECT ''



	----------------------------------- Build function to lookup SDKDEVELOPERMODEOFF --------------------
	-------------------------------------------------------------------------------------------------------------------------- 

	--declare @retval varchar(50)
	--declare @retnum varchar(10) 
	--declare @fieldaddr varchar(50)
	SELECT ''
	SELECT '/**'
	SELECT ' *	Overrides SdkBaseSchemaLibrary::LookupSdkDeveloperModeOff.'
	SELECT ' *'
	SELECT ' *	Implements a nested switch statement that maps to the database schema checking for the presense of "SDKDEVELOPERMODEOFF" in the MS_Description extended property.'
	SELECT ' *	The outer switch statement switches on bufferNumber (tables of database). The inner switch statements switch on fieldNumber (columns of the table).'
	SELECT ' *	If a table has "SDKDEVELOPERMODEOFF" set then the entire table is set, the fields themselves are not processed.'
	SELECT ' *'
	SELECT ' *	@param Int16 bufferNumber	:	The number that maps to the buffer being checked'
	SELECT ' *	@param Int16 fieldNumber	:	The number that maps to the field being checked, a fieldNumber of 0 refers to the table/buffer itself'
	SELECT ' *'
	SELECT ' *	@return bool	: true if "SDKDEVELOPERMODEOFF" is set in the MS_Description extended property,'
	SELECT ' *					  false if "SDKDEVELOPERMODEOFF" is not set in the MS_Description extended property'
	SELECT ' */'
	SELECT 'virtual bool LookupSdkDeveloperModeOff(Int16 bufferNumber, Int16 fieldNumber) override {'
	SELECT ''
	SELECT @TAB + 'switch (bufferNumber) {'
	SELECT @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @fieldaddr = (select name from ##tmpobjects where id = @objectcount)
		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 0
		SELECT @caseheader = 0
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		
		SELECT @retval = (select convert(varchar, sys.extended_properties.value) from sys.extended_properties where sys.extended_properties.major_id = @sysobjectsid and sys.extended_properties.minor_id = @syscolumnsid and sys.extended_properties.name = 'MS_Description' and convert(varchar, sys.extended_properties.value) like '%SDKDEVELOPERMODEOFF%')
		if @retval is null or @retval not like '%SDKDEVELOPERMODEOFF%'
		begin
			while @fieldcount <= @maxfields
			begin
				SELECT @retval = (select convert(varchar, sys.extended_properties.value) from sys.extended_properties where sys.extended_properties.major_id = @sysobjectsid and sys.extended_properties.minor_id = @syscolumnsid and sys.extended_properties.name = 'MS_Description' and convert(varchar, sys.extended_properties.value) like '%SDKDEVELOPERMODEOFF%')
				
				if @retval like '%SDKDEVELOPERMODEOFF%'
				begin
					if @caseheader = 0
					begin
						SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ':'
						SELECT @TAB + @TAB + 'switch (fieldNumber) {'
						SELECT @caseheader = 1
					end
					SELECT @TEMPVARa = convert(varchar, @fieldcount) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid
					SELECT @TAB + @TAB + 'case ' + @TEMPVARa + ': return true;'
				end
				
				SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)
				if @nummatches > 0 
				begin
					SELECT @fieldcount = @fieldcount + 1
				end
				SELECT @syscolumnsid = @syscolumnsid + 1
			end
		end
		ELSE
		BEGIN
			SELECT @TAB + 'case ' + convert(varchar, @objectcount) + ': return true;'
			SELECT @syscolumnsid = @syscolumnsid + 1
		END
		if @caseheader = 1
		begin
			SELECT @TAB + @TAB + '}'
			SELECT @TAB + @TAB + 'break;'
		end
		SELECT @objectcount = @objectcount + 1 
	end
	SELECT @TAB + 'case -1:'
	SELECT @TAB + @TAB + 'return false;'
	SELECT @TAB + '}'
	SELECT @TAB + 'return false;'
	SELECT '}'
	SELECT ''


	----------------------------Build Check digit lookup ------------------------------

	SELECT 'virtual array<Int32>^ LookupCheckDigit() override {'
	SELECT ''
	SELECT @TAB + '#include <SdkCheckDigit.h>'
	SELECT @TAB + 'return checkDigit;'
	SELECT '}'

	DROP INDEX ##primarykeys.##IX_primarykeys
	DROP TABLE ##primarykeys
	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkBuffers]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkBuffers.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	30aug17		rac		SDK-297		Reinstated schema defines
--	26jul17		rac		SDK-297		Removed schema defines aroud smart pointer declarations
--	02jun16		jonl/rc	SDK-248		Removed LookupBufferByHash method
--	14nov13		jonl	SDK-180		Stop using ThreadLocalStorage for ASP.NET threads
--	08may12		mgf		SDK-135		Changed into resource file
--	17apr06		amr		ABT0817		Change hashcodes
--	12oct05		amr		ABT0705		Fix issue with global sql id changing
--	11oct05		amr		ABT0709		Added auto imports of headers
--	10oct05		amr		ABT0705		Minimum rebuild for tables
--	10oct05		amr		ABT0705		Minimum rebuild
--	31mar05		amr		ABT0623		Allow output in serverprograms
--	28jan05		amr		ABT0587		Fix opt problems with buf_cmp
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	01sep04		amr		ABT0485		Check items/details at compile time
--	29aug04		amr		ABT0485		Optimisation
--	06jul04		amr		ABT0455		Added SqlDecimal 4bytes bigger
--	31mar05		amr		ABT0623		Allow output in serverprograms
--	28jan05		amr		ABT0587		Fix opt problems with buf_cmp
--	15jan04		amr		ABT0580		Optimisation (call InitBuffers less)
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	01sep04		amr		ABT0485		Check items/details at compile time
--	29aug04		amr		ABT0485		Optimisation
--	06jul04		amr		ABT0455		Added SqlDecimal 4bytes bigger
--	17may04		amr		ABT0415		Updated size of decimal
--  13feb04		mgf		ABT0305		Changed SQL syntax for reduced file sizes
--	28dec04		amr		ABT0261		Multithreaded client
--	13oct03		amr		ABT0000		Added offline reports
--  24sep03		jonl	ABT0171		support varbinaries up to 47K
--	23sep03		jonl	ABT0171		varbinary datatype changes
--	18sep03		jonl	ABT0171		varbinary datatype
--	15sep03		amr		ABT0160		Added userbuffer
--	03aug03		amr		APB0071		Error stack

--	02aug03		jonl	APB0045		Don't create global table in this one anymore
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	21jul03		amr		APB0022		Use managed thread local storage
--	21jul03		amr		APB0022		Simplify TLS
--	26may03		amr					Variable threads
--	15mar03		amr					Added tlsget for reports
--	15mar03		amr					Added output for reports/offine reports
--	27jan03		amr					Ensure we don't breach buffer boundaries for single threaded apps
--	25jan03		jonl				Added Dim functionality for decimals
--	20oct02		jonl				Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkBuffers] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING on

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

	declare @maxobjects int
	SELECT @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	SELECT @objectcount = 1

-------------------     Generic include file for code for all functions that reference buffers ------------------------------------

	SELECT 'bool _isAspDotNetThreadPoolHosted = false;'
	SELECT ''
	SELECT 'if (System::Threading::Thread::CurrentPrincipal != nullptr) {'
	SELECT '	if (System::Threading::Thread::CurrentPrincipal->GetType()->Equals(SdkDataPersistingPrincipal::typeid)) {'
	SELECT '		_isAspDotNetThreadPoolHosted = true;'
	SELECT '	}'
	SELECT '}'
	SELECT ''
	SELECT ''
	SELECT 'SdkBaseThreadStorage^ threadStorage;'
	SELECT ''
	SELECT 'if (!_isAspDotNetThreadPoolHosted) {'
	SELECT '	LocalDataStoreSlot^ threadLocalStorageSlot = '
	SELECT '		System::Threading::Thread::GetNamedDataSlot(TLSTHREADIDENTIFIER);'
	SELECT ''
	SELECT '	threadStorage = '
	SELECT '		(SdkBaseThreadStorage^) System::Threading::Thread::GetData(threadLocalStorageSlot);'
	SELECT '} else {'
	SELECT '	threadStorage = '
	SELECT '		((SdkDataPersistingPrincipal^) System::Threading::Thread::CurrentPrincipal)->threadStorage;'
	SELECT '}'	
	SELECT ''
	SELECT '#ifdef IS_SERVER'
	SELECT 'SdkServerUtilities Server((SdkServerThreadStorage^) threadStorage);'
	SELECT 'SdkDatabaseLibrary Db((SdkServerThreadStorage^) threadStorage);'
	SELECT '#endif'
	SELECT ''
	SELECT '#ifdef IS_CLIENT'
	SELECT 'SdkMessageHandler^ Message = (SdkMessageHandler^) ((SdkClientThreadStorage^) threadStorage)->MessageHandler;'
	SELECT 'SdkClientUtilities Client((SdkClientThreadStorage^) threadStorage);'
	SELECT '#endif'
	SELECT ''
	SELECT 'SdkCommonUtilities Common(threadStorage);'
	SELECT 'SdkReport^ output;'
	SELECT 'output = threadStorage->ReportHandle;'
	SELECT 'array<SdkBuffer^>^ userBuffer = gcnew array<SdkBuffer^>(MAXIMUMUSERBUFFERS);'
	SELECT ''

	declare @id int
	declare @tempvara varchar(255)
	declare SDK_CREATE cursor for select name, id from ##tmpobjects order by id
	open SDK_CREATE
	fetch next from SDK_CREATE into @tempvara, @id
	while @@FETCH_STATUS = 0
	begin
		SELECT '#if defined(SCHEMA_' + @tempvara + ') || defined(SCHEMA_ALL)'
		SELECT 'SdkSmartPointer<' + @tempvara + 'Namespace::' + @tempvara + 'Buffer> ' + @tempvara
		SELECT @tab + ' = (' + @tempvara + 'Namespace::' + @tempvara + 'Buffer^) threadStorage->NewBuffers[' + convert(varchar, @id-1) + '];'
		SELECT '#endif'
		SELECT '#if defined(SCHEMA_' + @tempvara + '_o)'
		SELECT 'SdkSmartPointer<' + @tempvara + 'Namespace::' + @tempvara + 'Buffer> ' + @tempvara + '_o '
		SELECT @tab + ' = (' + @tempvara + 'Namespace::' + @tempvara + 'Buffer^) threadStorage->OldBuffers[' + convert(varchar, @id-1) + '];'
		SELECT '#endif'
		fetch next from SDK_CREATE into @tempvara, @id
	end
	close SDK_CREATE
	deallocate SDK_CREATE

	SELECT ''
	SELECT 'for(int userBufferIndex = 0; userBufferIndex < MAXIMUMUSERBUFFERS; userBufferIndex++) {'
	SELECT @tab + 'userBuffer[userBufferIndex] = (SdkBuffer^) threadStorage->UserBufferArray[userBufferIndex];'
	SELECT '}'
	SELECT ''
	SELECT '#ifdef IS_SERVER'
	SELECT 'if (threadStorage->IsProcessLoggingDiagnostics) {'
	SELECT @tab + 'Common.InsertDiagnostic();'
	SELECT '}'
	SELECT '#endif'

-------------------------------------------------- Clean Up!--------------------------------------------------------------

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkServerBusinessRules]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkServerBusinessRules.sql
-- 
--	Notes:		Contains buffer definitions
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	02may2006	amr		ABT0825		Performance improvements
--	29jul2006   amr		ABT0827		Smaller working set
--	Dec-Jan06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkServerBusinessRules] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

	DECLARE @maxobjects int
	SELECT @maxobjects = (SELECT max(id) FROM ##tmpobjects)
	DECLARE @objectcount int

	SELECT @objectcount = 1

	SELECT '#using "ServerBusinessRulesLibrary.dll"'
	SELECT ''
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT 'using namespace ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Namespace;' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END

	SELECT ''
	SELECT 'namespace ServerBusinessRules {'
	SELECT @tab + 'public ref class BusinessRules : SdkBaseServerBusinessRules {'
	SELECT @tab + 'public:'
	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers^ ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ';' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END

	SELECT ''
	SELECT @tab + @tab + 'virtual void SetThisThread(SdkServerThreadStorage^ setThread) override {'
	SELECT ''
	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + '->SetThisThread(setThread);' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END
	SELECT @tab + @tab + @tab + 'return;'
	SELECT @tab + @tab + '}'
	SELECT ''
	SELECT @tab + @tab + 'BusinessRules() {'
	SELECT ''
	SELECT @tab + @tab + @tab + 'this->BeforeTriggerArray = gcnew array<ServerBeforeTriggerDelegate^>(' + convert(varchar, @maxobjects) + ');'
	SELECT @tab + @tab + @tab + 'this->AfterTriggerArray = gcnew array<ServerAfterTriggerDelegate^>(' + convert(varchar, @maxobjects) + ');'
	SELECT @tab + @tab + @tab + 'this->ServerFunctionArray = gcnew array<ServerFunctionDelegate^>(' + convert(varchar, @maxobjects) + ');'
	SELECT @tab + @tab + @tab + 'this->ServerReportArray = gcnew array<ServerReportDelegate^>(' + convert(varchar, @maxobjects) + ');'

	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ' = gcnew ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers(); ' from ##tmpobjects where id = @objectcount

		SELECT @tab + @tab + @tab + 'this->BeforeTriggerArray[' + convert(varchar, @objectcount - 1) +
			'] = gcnew ServerBeforeTriggerDelegate(' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ', &' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers::Before' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ');' from ##tmpobjects where id = @objectcount
		SELECT @tab + @tab + @tab + 'this->AfterTriggerArray[' + convert(varchar, @objectcount - 1) +
			'] = gcnew ServerAfterTriggerDelegate(' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ', &' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers::After' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ');' from ##tmpobjects where id = @objectcount
		SELECT @tab + @tab + @tab + 'this->ServerFunctionArray[' + convert(varchar, @objectcount - 1) +
			'] = gcnew ServerFunctionDelegate(' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ', &' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers::Lookup' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Functions);' from ##tmpobjects where id = @objectcount
		SELECT @tab + @tab + @tab + 'this->ServerReportArray[' + convert(varchar, @objectcount - 1) +
			'] = gcnew ServerReportDelegate(' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ', &' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers::Lookup' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Reports);' from ##tmpobjects where id = @objectcount

		SELECT @objectcount = @objectcount + 1
	END

	SELECT @tab + @tab + '}'
	SELECT ''
	SELECT @tab + @tab + 'virtual Int16 CheckServerBusinessRulesPresent() override {'
	SELECT ''
	SELECT @tab + @tab + @tab + 'return -2;'
	SELECT @tab + @tab + '}'
	SELECT @tab + '};'
	SELECT '}'

-------------------------------------------------- Clean Up!--------------------------------------------------------------

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkClientBusinessRules]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkClientBusinessRules.sql
-- 
--	Notes:		Contains buffer definitions
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	03dec07		jonl	SDK-88		Added distinct
--	02may2006	amr		ABT0825		Performance improvements
--	29jul2006   amr		ABT0827		Smaller working set
--	Dec-Mar06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkClientBusinessRules] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING on

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	DECLARE @tmpobjectcount int;

	SELECT @tmpobjectcount = count(*) from sdkitem

	SELECT DISTINCT IDENTITY(int, 1,1) id, name, no into ##tmpobjects from 
	(SELECT TOP 100 PERCENT o.name, o.no from sdkitem o order by o.name) as so

	if @tmpobjectcount = 0 
	begin
		insert into ##tmpobjects (name, no) values ('zzDummypro', 1)
	end

	DECLARE @maxobjects int
	SELECT @maxobjects = (select max(id) from ##tmpobjects)

	DECLARE @objectcount int

	SELECT @objectcount = 1

	SELECT '#using "ClientBusinessRulesLibrary.dll"'
	SELECT ''
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT 'using namespace ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Namespace;' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END

	SELECT ''
	SELECT 'namespace ClientBusinessRules {'
	SELECT @tab + 'public ref class BusinessRules : SdkBaseClientBusinessRules {'
	SELECT @tab + 'public:'

	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Events^ ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ';' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END

	SELECT ''
	SELECT @tab + @tab + 'virtual Int32 LookupItemIdFromNumber(Int32 itemNumber) override {'
	SELECT ''
	SELECT @tab + @tab + @tab + 'switch (itemNumber) {'
	SELECT @tab + @tab + @tab + 'case -1: return -2;'

	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + @tab + 'case ' + convert(varchar, no) + ': return ' + convert(varchar, @objectcount - 1) + ';' from ##tmpobjects where id = @objectcount

		SELECT @objectcount = @objectcount + 1
	END

	SELECT @tab + @tab + @tab + '}';
	SELECT @tab + @tab + @tab + 'return -1;'
	SELECT @tab + @tab + '}'
	SELECT ''
	SELECT @tab + @tab + 'virtual void SetThisThread(SdkClientThreadStorage^ setThread) override {'
	SELECT ''
	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + '->SetThisThread(setThread);' from ##tmpobjects where id = @objectcount
		SELECT @objectcount = @objectcount + 1
	END

	SELECT @tab + @tab + @tab + 'return;'
	SELECT @tab + @tab + '}'
	SELECT ''
	SELECT @tab + @tab + 'BusinessRules() {'
	SELECT ''
	SELECT @tab + @tab + @tab + 'this->LookupEventArray = gcnew array<ClientLookupEventDelegate^>(' + convert(varchar, @maxobjects) + ');'

	SELECT @objectcount = 1

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @tab + @tab + @tab + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ' = gcnew ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Events(); ' from ##tmpobjects where id = @objectcount

		SELECT @tab + @tab + @tab + 'this->LookupEventArray[' + convert(varchar, @objectcount - 1) +
			'] = gcnew ClientLookupEventDelegate(' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + ', &' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Events::Lookup' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Events);' from ##tmpobjects where id = @objectcount

		SELECT @objectcount = @objectcount + 1
	END

	SELECT @tab + @tab + '}'
	SELECT @tab + '};'
	SELECT '}'

-------------------------------------------------- Clean Up!--------------------------------------------------------------

	DROP TABLE ##tmpobjects
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkServerTriggerCompileScript]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkServerTriggerCompileScript.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	26jul17		rac		SDK-297		Removed reference to Generated Code Server Trigger Templates
--	08may12		mgf		SDK-135		Changed into resource file
--	24may2010	mgf		SDK-115		Changes for x64 support	
--	21dec09		jonl	SDK-106		Compiler Speed-up
--	25may06		jonl	ABT0845		Support Release mode
--	02may2006	amr		ABT0825		Performance improvements
--	29jul2006   amr		ABT0827		Smaller working set
--	Dec-Jan06	amr		ABT0748		Created for VS2005, formerly maketriggers.sql
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--	03nov05		jonl	ABT0734		Pass sdk.dll rather than dll to HasDirChanged
--	11oct05		amr		ABT0709		Added auto imports of headers
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	07jul04		jonl	ABA0452		Better include file changed checking
--	06jul04		jonl	ABA0452		Correction to remove LIB step
--	06jul04		jonl	ABA0452		Remove LIB step
--	08jan03		jonl	ABT0265		Syncfile variable
--	08jan03		jonl	ABT0265		Compiler Optimisation
--	07dec03		amr		ABT0257		Fix debranding bug
--	01dec03		amr		ABT0257		Debranding
--	06nov03		jonl	ABT0152		Check for missing DLLs
--  05nov03		jonl	ABT0204		Remove things in SDKitem.cpp
--  04nov03		jonl	ABT0204		Extra things in SDKitem.cpp
--  21oct03		jonl	ABT0204		Escape the & character in echo line
--	21oct03		jonl	ABT0204		Hook app defined privilege listing into SDKitem.cpp
-- 	28aug03		jonl	APB0120		Intelligent Include compilation
--	28aug03		jonl	APB0119		Faster compiler
--	23aug03		amr		APB0105		Upgrade to .NET2003
--	20aug03		amr					Removed windows.h
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	15mar03		amr					added reports
--	27jan03		amr					Changed includes
--	23oct02		amr					Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkServerTriggerCompileScript] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	SELECT 'REM '
	SELECT 'REM SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT 'REM '
	SELECT ''

	EXEC SdkStandardHeader

	DECLARE @maxobjects int
	SELECT @maxobjects = (SELECT max(id) FROM ##tmpobjects)
	DECLARE @objectcount int
	SELECT @objectcount = 1

	SELECT @objectcount = 1
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT 'SET OUT="%APP%\ServerSrc\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp"'
		SELECT 'if exist %OUT% goto ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT '%SDKDIR%\%SDKPLT%\Touch %APP%\ServerSrc\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp'

		-- extern the checkprivileges() server function if we're SDKitem
		IF (SELECT name FROM ##tmpobjects WHERE id = @objectcount) = 'SDKitem' 
		BEGIN
			SELECT 'echo extern int checkprivileges(); >> %OUT%'
			SELECT 'echo. >> %OUT%'
		END
	
		SELECT 'echo namespace ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Namespace { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo	public ref class ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Triggers : public SdkBaseServerTrigger { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo	public: >> %OUT%'
		SELECT 'echo		int Before' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + '(TRIGGER_T trigger) { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo. >> %OUT%'
		SELECT 'echo			return 0;  >> %OUT%'
		SELECT 'echo		} >> %OUT%'
		SELECT 'echo. >> %OUT%'
		SELECT 'echo		int After' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + '(TRIGGER_T trigger) { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo. >> %OUT%'
		SELECT 'echo			return 0; >> %OUT%'
		SELECT 'echo		} >> %OUT%'
		SELECT 'echo. >> %OUT%'
	
		-- Generate the SDKprivproperties listing if we're SDKitem
		IF (SELECT name FROM ##tmpobjects WHERE id = @objectcount) = 'SDKitem' 
		BEGIN
			SELECT 'echo		int SdkPrivilegePropertiesReport() { >> %OUT%'
			SELECT 'echo			#include ^<buffers.h^> >> %OUT%'
			SELECT 'echo. >> %OUT%'
			SELECT 'echo			long res; >> %OUT%'
			SELECT 'echo			res = checkprivileges(); >> %OUT%'
			SELECT 'echo			output-^>Memcpy(^&res, 4); >> %OUT%' -- ^ is echo's escape character
			SELECT 'echo			return 0; >> %OUT%'
			SELECT 'echo		} >> %OUT%'
			SELECT 'echo. >> %OUT%'
		END
	
		SELECT 'echo		int Lookup' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Functions(Int32 functionNumber) { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo. >> %OUT%'
		-- Generate a null login link if we're sdklogin
		IF (SELECT name FROM ##tmpobjects WHERE id = @objectcount) = 'SDKlogin' 
		BEGIN
			SELECT 'echo			if (functionNumber ^<= 3) { >> %OUT%'
			SELECT 'echo				return 0; >> %OUT%'
			SELECT 'echo			} >> %OUT%'
		END
	
		SELECT 'echo			return NOTDEFINED; >> %OUT%'
		SELECT 'echo		} >> %OUT%'
		SELECT 'echo. >> %OUT%'

		SELECT 'echo		int Lookup' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Reports(Int32 reportNumber) { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		-- Assign listing -1 to SDKprivproperties if we're SDKitem
		IF (SELECT name FROM ##tmpobjects WHERE id = @objectcount) = 'SDKitem'
		BEGIN
			SELECT 'echo. >> %OUT%'
			SELECT 'echo			switch (reportNumber) { >> %OUT%'
			SELECT 'echo				case -1: >> %OUT%'
			SELECT 'echo					return SdkPrivilegePropertiesReport(); >> %OUT%'
			SELECT 'echo			} >> %OUT%'
		END
		SELECT 'echo			return NOTDEFINED; >> %OUT%'
		SELECT 'echo		} >> %OUT%'
		SELECT 'echo	}; >> %OUT%'
		SELECT 'echo } >> %OUT%'
		SELECT ':' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT @objectcount = @objectcount + 1
	END

-------------------------------------------------- Clean Up!--------------------------------------------------------------

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkClientTriggerCompileScript]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkClientTriggerCompileScript.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	30jul17		rac		SDK-297		Write Header on dummy pro and dont display xcopy output
--	26jul17		rac		SDK-297		Further refinement
--	26jul17		rac		SDK-297		Reinstated reference to generated code client event template
--	26jul17		rac		SDK-297		Removed reference to generated code client event template
--	08may12		mgf		SDK-135		Changed into resource file
--	24may2010	mgf		SDK-115		Changes for x64 support
--	21dec09		jonl	SDK-106		Compiler Speed-up
--	25may06		jonl	ABT0845		Support Release mode
--	02may2006	amr		ABT0825		Performance improvements
--	29jul2006   amr		ABT0827		Smaller working set
--	Dec-Jan06	amr		ABT0748		Convert to VS2005
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--	03nov05		jonl	ABT0734		Pass sdk.dll rather than dll to HasDirChanged
--	11oct05		amr		ABT0709		Added auto imports of headers
--	10oct05		amr		ABT0705		Minimum rebuild
--	12oct04		amr		ABT0516		Fix order of ##tmpobjects
--	01sep04		amr		ABT0485		Check items/details at compile time
--	07jul04		jonl	ABA0452		Better include file changed checking
--	06jul04		jonl	ABA0452		Correction to remove LIB step
--	06jul04		jonl	ABA0452		Remove LIB step
--	08jan03		jonl	ABT0265		Syncfile variable
--	08jan03		jonl	ABT0265		Compiler Optimisation
--	01dec03		amr		ABT0257		Debranding
--	06nov03		jonl	ABT0152		Check for missing DLLs
--	28aug03		jonl	APB0120		Intelligent Include compilation
--	28aug03		jonl	APB0119		Faster compiler
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	05feb03		jonl				Create a zzDummypro dll if no profiles defined
--	27jan03		amr					Changed includes
--	23oct02		amr					Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkClientTriggerCompileScript] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	SELECT 'REM '
	SELECT 'REM SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT 'REM '
	SELECT ''

	SELECT IDENTITY(int, 1,1) id, name into ##tmpobjects from 
	(SELECT TOP 100 PERCENT o.name from sdkitem o order by o.name) as so

	DECLARE @tmpobjectcount int
	SELECT @tmpobjectcount = (SELECT count(*) FROM sdkitem)

	IF @tmpobjectcount = 0
	BEGIN
		INSERT INTO ##tmpobjects (name) values ('zzDummypro')
	END

	DECLARE @maxobjects int
	SELECT @maxobjects = (SELECT max(id) FROM ##tmpobjects)
	DECLARE @objectcount int
	SELECT @objectcount = 1

	SELECT 'if not EXIST %APP%\%syncfile% ('
	SELECT 'if EXIST %APP%\GeneratedCode\ClientEventTemplates\*.cpp del %APP%\GeneratedCode\ClientEventTemplates\*.cpp'
	SELECT ')'
	SELECT 'pushd %APP%\GeneratedCode\ClientEventTemplates'
	SELECT 'if EXIST *.x del /Q /F *.x'

	SELECT @objectcount = 1
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT 'if EXIST ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp rename ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.x'
		SELECT @objectcount = @objectcount + 1
	END

	SELECT 'if EXIST *.cpp del *.cpp'
	SELECT 'for %%I in (*.x) DO rename %%I %%~nI.cpp'
	SELECT 'popd'

	SELECT @objectcount = 1
	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT 'SET OUT="%APP%\GeneratedCode\ClientEventTemplates\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp"'
		SELECT 'if exist %OUT% goto :' + (select name from ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT '%SDKDIR%\%SDKPLT%\Touch %APP%\ClientSrc\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp'
		SELECT 'if zzDummypro == ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + ' echo #include ^<ClientEvent.h^> >> %OUT%'
		SELECT 'echo namespace ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Namespace { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo	public ref class ' + upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) + 'Events : public SdkBaseClientEvent { >> %OUT%' FROM ##tmpobjects WHERE id = @objectcount
		SELECT 'echo	public: >> %OUT%'
		SELECT 'echo		int Lookup' + (SELECT upper(substring(name, 1, 1)) + lower(right(name, len(name)-1)) FROM ##tmpobjects WHERE id = @objectcount) + 'Events(TRIGGER_T trigger, SdkString extra_info) { >> %OUT%'
		SELECT 'echo			return NOTDEFINED; >> %OUT%'
		SELECT 'echo		} >> %OUT%'
		SELECT 'echo     }; >> %OUT%'
		SELECT 'echo } >> %OUT%'
		SELECT 'SET OUT="%APP%\ClientSrc\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp"'
		SELECT 'if exist %OUT% goto :' + (select name from ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT 'if zzDummypro == ' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + ' goto :' + (select name from ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT 'xcopy /q "%APP%\GeneratedCode\ClientEventTemplates\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp" "%APP%\ClientSrc\' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '.cpp*" > nul'
		SELECT ':' + (SELECT name FROM ##tmpobjects WHERE id = @objectcount) + '_end'
		SELECT @objectcount = @objectcount + 1
	END

	DROP TABLE ##tmpobjects
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationBufferList]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2006 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationBufferList.sql
-- 
--	Notes:		Generates a list of buffer names
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	Dec-Jan06	amr		ABT0748		Created for VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationBufferList] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @tab varchar(1) = char(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

--------------------------------------- Create and populate ##tmpobjects table -----------------------------------------------

	declare @maxobjects int
	select @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	select @objectcount = 1

--------------------------------------- Build structs and unions for buffers -----------------------------------------------

	declare @a varchar(256)

	SELECT '<Start>'

	while @objectcount <= @maxobjects
	begin
		SELECT @a = name from ##tmpobjects where id = @objectcount
		SELECT @a
		SELECT @a + '_o';
		SELECT @objectcount = @objectcount + 1
	end

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkApplicationSymbols]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkApplicationSymbols.sql
-- 
--	Notes:		Contains symbols for use in application code
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	24jul14		jonl	SDK-198		Schema split
--	08may12		mgf		SDK-135		Changed into resource file
--	04jan10		jonl	SDK-106		More selective compile after schema changes
--	Dec-Jan06	amr		ABT0748		Convert to VS2005
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkApplicationSymbols] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	DECLARE @tab VARCHAR(1) = CHAR(9)

	SELECT '//'
	SELECT '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
	SELECT '//'
	SELECT ''

	EXEC SdkStandardHeader

	declare @maxobjects int
	SELECT @maxobjects = (select max(id) from ##tmpobjects)
	declare @objectcount int
	SELECT @objectcount = 1

	declare @objectname varchar(255)
	declare @sysobjectsid int

--------------------------------------- Build structs and unions for buffers -----------------------------------------------
	declare @offsetcount int
	declare @fieldcount int
	declare @maxfields int
	declare @fieldtype varchar(24)
	declare @fieldname varchar(100)

	declare @syscolumnsid int
	declare @nummatches int

	declare @largest int
	select @objectcount = 1
	select @offsetcount = 0
	select @fieldcount = 1

	set @largest = 0

	while @objectcount <= @maxobjects
	begin
		SELECT @objectname = name from ##tmpobjects where id = @objectcount  
		SELECT @sysobjectsid = id from sysobjects where name = @objectname and uid = (select schema_id from sys.schemas where name = 'dbo')

		SELECT @offsetcount = 0
		SELECT @maxfields = (select count(*) from syscolumns where id = @sysobjectsid)
		SELECT @offsetcount = 0
		SELECT @syscolumnsid = 1
		SELECT @fieldcount = 1
		while @fieldcount <= @maxfields
			begin
				SELECT @fieldtype = (select fieldtype from ##c_types where ##c_types.id = syscolumns.type), @fieldname = name from syscolumns where id = @sysobjectsid and colid = @syscolumnsid

				SELECT @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @sysobjectsid)

				if @nummatches > 0 
				begin
					if @fieldtype = 'SdkBaseString' and @fieldtype is not NULL
					begin
						SELECT @offsetcount = @offsetcount + 
						2 * (SELECT syscolumns.length from syscolumns 
							where syscolumns.id 
								= @sysobjectsid
									and (syscolumns.colid = @syscolumnsid))
					end
					
					if @fieldtype = 'SdkBaseVarbinary' and @fieldtype is not NULL
					begin
						SELECT @offsetcount = @offsetcount + 
						(SELECT syscolumns.length + 4 from syscolumns 
							where syscolumns.id 
								= @sysobjectsid
									and (syscolumns.colid = @syscolumnsid))
					end
					
					if (@fieldtype = 'Image' and @fieldtype is not NULL)
					begin
						SELECT @offsetcount = @offsetcount + 
							(SELECT 4 + convert(int, sys.extended_properties.value)
							from sys.extended_properties where sys.extended_properties.major_id 
								= @sysobjectsid
									and sys.extended_properties.minor_id = @syscolumnsid 
									and sys.extended_properties.name = 'MS_Description')		
					end
					
					if (@fieldtype != 'SdkBaseString' and @fieldtype != 'SdkBaseVarbinary' and @fieldtype != 'Image' and @fieldtype is not NULL)
					begin
						SELECT @offsetcount = @offsetcount + 
							(select length from ##c_types where ##c_types.id = syscolumns.type) from syscolumns where syscolumns.id 
							= @sysobjectsid
							and syscolumns.colid = @syscolumnsid
					end
				
					SELECT @fieldcount = @fieldcount + 1
				end
				SELECT @syscolumnsid = @syscolumnsid + 1				
			end
			
			SELECT '/* table ' + @objectname + '*/' + '#define ' + upper(@objectname) + 'BUFFERLENGTH ' + convert(varchar,@offsetcount)
			
			if @offsetcount > @largest
			begin
				set @largest = @offsetcount
			end
		SELECT @objectcount = @objectcount + 1
	end

	SELECT '/* table ApplicationSymbolsGlobals */ #define MAXIMUMBUFFERLENGTH '+ convert(varchar,@largest)

	SELECT '/* table ApplicationSymbolsGlobals */ #define TABLECOUNT ' + convert(varchar, (select count(*) from ##tmpobjects)) 

	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkString variable_name(' + convert(varchar(4), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.domains where DATA_TYPE = 'varchar'
	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkVarbinary variable_name(' + convert(varchar(5), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.domains where DATA_TYPE = 'varbinary'
	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkDecimal variable_name(' + convert(varchar(4), NUMERIC_PRECISION) + ',' + convert(varchar(4), NUMERIC_SCALE) + ')' from information_schema.domains where DATA_TYPE = 'decimal'
	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkInt64 variable_name' from information_schema.domains where DATA_TYPE = 'bigint'
	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkInt32 variable_name' from information_schema.domains where DATA_TYPE = 'int'
	SELECT '/* table ApplicationSymbolsDataTypes */#define ' + DOMAIN_NAME + '_t(variable_name) SdkDateTime variable_name' from information_schema.domains where DATA_TYPE = 'datetime'

	SELECT '/* table ApplicationSymbolsDataTypes */#define base_' + DOMAIN_NAME + '_t(variable_name) SdkString variable_name' from information_schema.domains where DATA_TYPE = 'varchar'
	SELECT '/* table ApplicationSymbolsDataTypes */#define base_' + DOMAIN_NAME + '_t(variable_name) SdkBaseVarbinary variable_name' from information_schema.domains where DATA_TYPE = 'varbinary'
	SELECT '/* table ApplicationSymbolsDataTypes */#define base_' + DOMAIN_NAME + '_t(variable_name) SdkBaseDecimal variable_name' from information_schema.domains where DATA_TYPE = 'decimal'

	SELECT '/* table ApplicationSymbolsDataTypes */#define dimension_' + DOMAIN_NAME + '_t(variable_name) variable_name.Dimension(' + convert(varchar(4), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.domains where DATA_TYPE = 'varchar'
	SELECT '/* table ApplicationSymbolsDataTypes */#define dimension_' + DOMAIN_NAME + '_t(variable_name) variable_name.Dimension(' + convert(varchar(5), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.domains where DATA_TYPE = 'varbinary'
	SELECT '/* table ApplicationSymbolsDataTypes */#define dimension_' + DOMAIN_NAME + '_t(variable_name) variable_name.Dimension(' + convert(varchar(4), NUMERIC_PRECISION) + ',' + convert(varchar(4), NUMERIC_SCALE) + ')' from information_schema.domains where DATA_TYPE = 'decimal'

	SELECT '/* table ' + TABLE_NAME + ' */' + ' #define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkString variable_name(' + convert(varchar(4), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.columns where DATA_TYPE = 'varchar'
	SELECT '/* table ' + TABLE_NAME + ' */' + ' #define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkVarbinary variable_name(' + convert(varchar(5), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.columns where DATA_TYPE = 'varbinary'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkDecimal variable_name(' + convert(varchar(4), NUMERIC_PRECISION) + ',' + convert(varchar(4), NUMERIC_SCALE) + ')' from information_schema.columns where DATA_TYPE = 'decimal'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkInt64 variable_name' from information_schema.columns where DATA_TYPE = 'bigint'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkInt32 variable_name' from information_schema.columns where DATA_TYPE = 'int'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkDateTime variable_name' from information_schema.columns where DATA_TYPE = 'datetime'

	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_base_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkString variable_name' from information_schema.columns where DATA_TYPE = 'varchar'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_base_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkBaseVarbinary variable_name' from information_schema.columns where DATA_TYPE = 'varbinary'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define like_base_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) SdkBaseDecimal variable_name' from information_schema.columns where DATA_TYPE = 'decimal'

	SELECT '/* table ' + TABLE_NAME + ' */' + '#define dimension_like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) variable_name.Dimension(' + convert(varchar(4), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.columns where DATA_TYPE = 'varchar'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define dimension_like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) variable_name.Dimension(' + convert(varchar(5), CHARACTER_MAXIMUM_LENGTH) + ')' from information_schema.columns where DATA_TYPE = 'varbinary'
	SELECT '/* table ' + TABLE_NAME + ' */' + '#define dimension_like_' + TABLE_NAME + '_' + COLUMN_NAME + '(variable_name) variable_name.Dimension(' + convert(varchar(4), NUMERIC_PRECISION) + ',' + convert(varchar(4), NUMERIC_SCALE) + ')' from information_schema.columns where DATA_TYPE = 'decimal'

	SELECT DISTINCT '/* table ' + TABLE_NAME + ' */' + '#define C_' + TABLE_NAME + '_' + COLUMN_NAME + ' (SdkString) "' + TABLE_NAME + '.' + COLUMN_NAME + '"' as NAME from information_schema.columns ORDER BY NAME
	SELECT DISTINCT '/* table ' + sysobjects.name + ' */' + '#define ' + sysindexes.name + ' "' + sysindexes.name + '"' as NAME from sysindexes, sysobjects where sysindexes.name not like '_WA_Sys_%' and (convert(varchar(3), sysindexes.name) = 'IX_' or convert(varchar(3), sysindexes.name) = 'FK_' or convert(varchar(3), sysindexes.name) = 'PK_') and sysobjects.id = sysindexes.id AND sysobjects.type = 'U' ORDER BY NAME
	SELECT DISTINCT '/* table ' + sysobjects.name + ' */' + '#define IX_' + sysindexes.name + ' "' + sysindexes.name + '"' as NAME from sysindexes, sysobjects where sysindexes.name not like '_WA_Sys_%' and (convert(varchar(3), sysindexes.name) <> 'IX_' and convert(varchar(3), sysindexes.name) <> 'FK_' and convert(varchar(3), sysindexes.name) <> 'PK_') and sysobjects.id = sysindexes.id AND sysobjects.type = 'U' ORDER BY NAME

	DROP INDEX ##c_types.##IX_c_types
	DROP INDEX ##tmpobjects.##IX_tmpobjects
	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkItemDefines]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	schemaa_functions.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	18sep12		jonl	SDK-143		Support up to 32 tab pages per tab control
--	08may12		mgf		SDK-135		Changed into resource file
--	Dec-Jan06	amr		ABT0748		Convert to VS2005
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--	05aug05		jonl	ABT0639		Support tab pages that no longer have individual
--									SDKdetails
--	01sep04		amr		ABT0485		Check items/details at compile time
--	23aug04		amr		ABT0496		Created
--	-----------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[SdkItemDefines] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	declare @TAB char(4)
	declare @last bigint
	declare @no int
	declare @rowid bigint
	declare @counter int
	declare @name varchar(200)
	declare @currentrow bigint
	declare @tabcontrolno int


	declare @wholeString as varchar(2048)

	declare @delimiter as varchar(1)
	declare @tabpageName1 as varchar(250)
	declare @tabpageName2 as varchar(250)
	declare @tabpageName3 as varchar(250)
	declare @tabpageName4 as varchar(250)
	declare @tabpageName5 as varchar(250)
	declare @tabpageName6 as varchar(250)
	declare @tabpageName7 as varchar(250)
	declare @tabpageName8 as varchar(250)
	declare @tabpageName9 as varchar(250)
	declare @tabpageName10 as varchar(250)
	declare @tabpageName11 as varchar(250)
	declare @tabpageName12 as varchar(250)
	declare @tabpageName13 as varchar(250)
	declare @tabpageName14 as varchar(250)
	declare @tabpageName15 as varchar(250)
	declare @tabpageName16 as varchar(250)
	declare @tabpageName17 as varchar(250)
	declare @tabpageName18 as varchar(250)
	declare @tabpageName19 as varchar(250)
	declare @tabpageName20 as varchar(250)
	declare @tabpageName21 as varchar(250)
	declare @tabpageName22 as varchar(250)
	declare @tabpageName23 as varchar(250)
	declare @tabpageName24 as varchar(250)
	declare @tabpageName25 as varchar(250)
	declare @tabpageName26 as varchar(250)
	declare @tabpageName27 as varchar(250)
	declare @tabpageName28 as varchar(250)
	declare @tabpageName29 as varchar(250)
	declare @tabpageName30 as varchar(250)
	declare @tabpageName31 as varchar(250)
	declare @tabpageName32 as varchar(250)

	declare @delimiterPosition1 as integer
	declare @delimiterPosition2 as integer
	declare @delimiterPosition3 as integer
	declare @delimiterPosition4 as integer
	declare @delimiterPosition5 as integer
	declare @delimiterPosition6 as integer
	declare @delimiterPosition7 as integer
	declare @delimiterPosition8 as integer
	declare @delimiterPosition9 as integer
	declare @delimiterPosition10 as integer
	declare @delimiterPosition11 as integer
	declare @delimiterPosition12 as integer
	declare @delimiterPosition13 as integer
	declare @delimiterPosition14 as integer
	declare @delimiterPosition15 as integer
	declare @delimiterPosition16 as integer
	declare @delimiterPosition17 as integer
	declare @delimiterPosition18 as integer
	declare @delimiterPosition19 as integer
	declare @delimiterPosition20 as integer
	declare @delimiterPosition21 as integer
	declare @delimiterPosition22 as integer
	declare @delimiterPosition23 as integer
	declare @delimiterPosition24 as integer
	declare @delimiterPosition25 as integer
	declare @delimiterPosition26 as integer
	declare @delimiterPosition27 as integer
	declare @delimiterPosition28 as integer
	declare @delimiterPosition29 as integer
	declare @delimiterPosition30 as integer
	declare @delimiterPosition31 as integer
	declare @delimiterPosition32 as integer


	--		IMPORTANT --- DON'T PUT A 'GENERATED ON...' BANNER HERE

	select @TAB = '    '
	select @counter = 0
	select @last = 0, @no = 0

	while @last is not null and @no is not null
	begin
		set @no = NULL
		select @no = (select top 1 no from sdkitem where no > @last order by no,layer)
		select @name = (select top 1 name from sdkitem where no > @last order by no,layer)
		select @rowid = (select top 1 rowid from sdkitem where no > @last order by no,layer)

		if @no is not null
		begin
			select '***' + @name + '.h'
			select '#define ' + name + @TAB + @TAB + @TAB + @TAB + convert(varchar, no) from sdkdetail where fk_rowid_sdkitem = @rowid and name != '' 
			
			set @currentrow = 0
			while @currentrow >= 0
			begin
				set @delimiter = char(7)
				set @wholeString = (select top 1 tabpagenames from sdkdetail where rowid > @currentRow and type = 6 and fk_rowid_sdkitem = @rowid and name != '' order by rowid) + @delimiter
				set @currentRow = (select top 1 rowid from sdkdetail where rowid > @currentRow and type = 6 and fk_rowid_sdkitem = @rowid and name != '' order by rowid)
				set @tabcontrolno = (select top 1 no from SDKdetail where rowid > @currentRow and type = 6 and fk_rowid_sdkitem = @rowid and name != '' order by rowid)
				
				set @delimiterPosition1 = 0
				set @delimiterPosition2 = 0
				set @delimiterPosition3 = 0
				set @delimiterPosition4 = 0
				set @delimiterPosition5 = 0
				set @delimiterPosition6 = 0
				set @delimiterPosition7 = 0
				set @delimiterPosition8 = 0
				set @delimiterPosition9 = 0
				set @delimiterPosition10 = 0
				set @delimiterPosition11 = 0
				set @delimiterPosition12 = 0
				set @delimiterPosition13 = 0
				set @delimiterPosition14 = 0
				set @delimiterPosition15 = 0
				set @delimiterPosition16 = 0
				set @delimiterPosition17 = 0
				set @delimiterPosition18 = 0
				set @delimiterPosition19 = 0
				set @delimiterPosition20 = 0
				set @delimiterPosition21 = 0
				set @delimiterPosition22 = 0
				set @delimiterPosition23 = 0
				set @delimiterPosition24 = 0
				set @delimiterPosition25 = 0
				set @delimiterPosition26 = 0
				set @delimiterPosition27 = 0
				set @delimiterPosition28 = 0
				set @delimiterPosition29 = 0
				set @delimiterPosition30 = 0
				set @delimiterPosition31 = 0
				set @delimiterPosition32 = 0
				
				set @tabPageName1 = ''
				set @tabPageName2 = ''
				set @tabPageName3 = ''
				set @tabPageName4 = ''
				set @tabPageName5 = ''
				set @tabPageName6 = ''
				set @tabPageName7 = ''
				set @tabPageName8 = ''
				set @tabPageName9 = ''
				set @tabPageName10 = ''
				set @tabPageName11 = ''
				set @tabPageName12 = ''
				set @tabPageName13 = ''
				set @tabPageName14 = ''
				set @tabPageName15 = ''
				set @tabPageName16 = ''
				set @tabPageName17 = ''
				set @tabPageName18 = ''
				set @tabPageName19 = ''
				set @tabPageName20 = ''
				set @tabPageName21 = ''
				set @tabPageName22 = ''
				set @tabPageName23 = ''
				set @tabPageName24 = ''
				set @tabPageName25 = ''
				set @tabPageName26 = ''
				set @tabPageName27 = ''
				set @tabPageName28 = ''
				set @tabPageName29 = ''
				set @tabPageName30 = ''
				set @tabPageName31 = ''
				set @tabPageName32 = ''

				set @delimiterPosition1 = charindex(@delimiter, @wholeString)
				if @delimiterPosition1 <> 0 set @delimiterPosition2 = charindex(@delimiter, @wholeString, @delimiterPosition1+1)
				if @delimiterPosition2 <> 0 set @delimiterPosition3 = charindex(@delimiter, @wholeString, @delimiterPosition2+1)
				if @delimiterPosition3 <> 0 set @delimiterPosition4 = charindex(@delimiter, @wholeString, @delimiterPosition3+1)
				if @delimiterPosition4 <> 0 set @delimiterPosition5 = charindex(@delimiter, @wholeString, @delimiterPosition4+1)
				if @delimiterPosition5 <> 0 set @delimiterPosition6 = charindex(@delimiter, @wholeString, @delimiterPosition5+1)
				if @delimiterPosition6 <> 0 set @delimiterPosition7 = charindex(@delimiter, @wholeString, @delimiterPosition6+1)
				if @delimiterPosition7 <> 0 set @delimiterPosition8 = charindex(@delimiter, @wholeString, @delimiterPosition7+1)
				if @delimiterPosition8 <> 0 set @delimiterPosition9 = charindex(@delimiter, @wholeString, @delimiterPosition8+1)
				if @delimiterPosition9 <> 0 set @delimiterPosition10 = charindex(@delimiter, @wholeString, @delimiterPosition9+1)
				if @delimiterPosition10 <> 0 set @delimiterPosition11 = charindex(@delimiter, @wholeString, @delimiterPosition10+1)
				if @delimiterPosition11 <> 0 set @delimiterPosition12 = charindex(@delimiter, @wholeString, @delimiterPosition11+1)
				if @delimiterPosition12 <> 0 set @delimiterPosition13 = charindex(@delimiter, @wholeString, @delimiterPosition12+1)
				if @delimiterPosition13 <> 0 set @delimiterPosition14 = charindex(@delimiter, @wholeString, @delimiterPosition13+1)
				if @delimiterPosition14 <> 0 set @delimiterPosition15 = charindex(@delimiter, @wholeString, @delimiterPosition14+1)
				if @delimiterPosition15 <> 0 set @delimiterPosition16 = charindex(@delimiter, @wholeString, @delimiterPosition15+1)
				if @delimiterPosition16 <> 0 set @delimiterPosition17 = charindex(@delimiter, @wholeString, @delimiterPosition16+1)
				if @delimiterPosition17 <> 0 set @delimiterPosition18 = charindex(@delimiter, @wholeString, @delimiterPosition17+1)
				if @delimiterPosition18 <> 0 set @delimiterPosition19 = charindex(@delimiter, @wholeString, @delimiterPosition18+1)
				if @delimiterPosition19 <> 0 set @delimiterPosition20 = charindex(@delimiter, @wholeString, @delimiterPosition19+1)
				if @delimiterPosition20 <> 0 set @delimiterPosition21 = charindex(@delimiter, @wholeString, @delimiterPosition20+1)
				if @delimiterPosition21 <> 0 set @delimiterPosition22 = charindex(@delimiter, @wholeString, @delimiterPosition21+1)
				if @delimiterPosition22 <> 0 set @delimiterPosition23 = charindex(@delimiter, @wholeString, @delimiterPosition22+1)
				if @delimiterPosition23 <> 0 set @delimiterPosition24 = charindex(@delimiter, @wholeString, @delimiterPosition23+1)
				if @delimiterPosition24 <> 0 set @delimiterPosition25 = charindex(@delimiter, @wholeString, @delimiterPosition24+1)
				if @delimiterPosition25 <> 0 set @delimiterPosition26 = charindex(@delimiter, @wholeString, @delimiterPosition25+1)
				if @delimiterPosition26 <> 0 set @delimiterPosition27 = charindex(@delimiter, @wholeString, @delimiterPosition26+1)
				if @delimiterPosition27 <> 0 set @delimiterPosition28 = charindex(@delimiter, @wholeString, @delimiterPosition27+1)
				if @delimiterPosition28 <> 0 set @delimiterPosition29 = charindex(@delimiter, @wholeString, @delimiterPosition28+1)
				if @delimiterPosition29 <> 0 set @delimiterPosition30 = charindex(@delimiter, @wholeString, @delimiterPosition29+1)
				if @delimiterPosition30 <> 0 set @delimiterPosition31 = charindex(@delimiter, @wholeString, @delimiterPosition30+1)
				if @delimiterPosition31 <> 0 set @delimiterPosition32 = charindex(@delimiter, @wholeString, @delimiterPosition31+1)

				if @delimiterPosition1 <> 0 set @tabpageName1 = substring(@wholeString, 0, @delimiterPosition1)
				if @delimiterPosition2 <> 0 set @tabpageName2 = substring(@wholeString, @delimiterPosition1+1, @delimiterPosition2-@delimiterPosition1-1)
				if @delimiterPosition3 <> 0 set @tabpageName3 = substring(@wholeString, @delimiterPosition2+1, @delimiterPosition3-@delimiterPosition2-1)
				if @delimiterPosition4 <> 0 set @tabpageName4 = substring(@wholeString, @delimiterPosition3+1, @delimiterPosition4-@delimiterPosition3-1)
				if @delimiterPosition5 <> 0 set @tabpageName5 = substring(@wholeString, @delimiterPosition4+1, @delimiterPosition5-@delimiterPosition4-1)
				if @delimiterPosition6 <> 0 set @tabpageName6 = substring(@wholeString, @delimiterPosition5+1, @delimiterPosition6-@delimiterPosition5-1)
				if @delimiterPosition7 <> 0 set @tabpageName7 = substring(@wholeString, @delimiterPosition6+1, @delimiterPosition7-@delimiterPosition6-1)
				if @delimiterPosition8 <> 0 set @tabpageName8 = substring(@wholeString, @delimiterPosition7+1, @delimiterPosition8-@delimiterPosition7-1)
				if @delimiterPosition9 <> 0 set @tabpageName9 = substring(@wholeString, @delimiterPosition8+1, @delimiterPosition9-@delimiterPosition8-1)
				if @delimiterPosition10 <> 0 set @tabpageName10 = substring(@wholeString, @delimiterPosition9+1, @delimiterPosition10-@delimiterPosition9-1)
				if @delimiterPosition11 <> 0 set @tabpageName11 = substring(@wholeString, @delimiterPosition10+1, @delimiterPosition11-@delimiterPosition10-1)
				if @delimiterPosition12 <> 0 set @tabpageName12 = substring(@wholeString, @delimiterPosition11+1, @delimiterPosition12-@delimiterPosition11-1)
				if @delimiterPosition13 <> 0 set @tabpageName13 = substring(@wholeString, @delimiterPosition12+1, @delimiterPosition13-@delimiterPosition12-1)
				if @delimiterPosition14 <> 0 set @tabpageName14 = substring(@wholeString, @delimiterPosition13+1, @delimiterPosition14-@delimiterPosition13-1)
				if @delimiterPosition15 <> 0 set @tabpageName15 = substring(@wholeString, @delimiterPosition14+1, @delimiterPosition15-@delimiterPosition14-1)
				if @delimiterPosition16 <> 0 set @tabpageName16 = substring(@wholeString, @delimiterPosition15+1, @delimiterPosition16-@delimiterPosition15-1)
				if @delimiterPosition17 <> 0 set @tabpageName17 = substring(@wholeString, @delimiterPosition16+1, @delimiterPosition17-@delimiterPosition16-1)
				if @delimiterPosition18 <> 0 set @tabpageName18 = substring(@wholeString, @delimiterPosition17+1, @delimiterPosition18-@delimiterPosition17-1)
				if @delimiterPosition19 <> 0 set @tabpageName19 = substring(@wholeString, @delimiterPosition18+1, @delimiterPosition19-@delimiterPosition18-1)
				if @delimiterPosition20 <> 0 set @tabpageName20 = substring(@wholeString, @delimiterPosition19+1, @delimiterPosition20-@delimiterPosition19-1)
				if @delimiterPosition21 <> 0 set @tabpageName21 = substring(@wholeString, @delimiterPosition20+1, @delimiterPosition21-@delimiterPosition20-1)
				if @delimiterPosition22 <> 0 set @tabpageName22 = substring(@wholeString, @delimiterPosition21+1, @delimiterPosition22-@delimiterPosition21-1)
				if @delimiterPosition23 <> 0 set @tabpageName23 = substring(@wholeString, @delimiterPosition22+1, @delimiterPosition23-@delimiterPosition22-1)
				if @delimiterPosition24 <> 0 set @tabpageName24 = substring(@wholeString, @delimiterPosition23+1, @delimiterPosition24-@delimiterPosition23-1)
				if @delimiterPosition25 <> 0 set @tabpageName25 = substring(@wholeString, @delimiterPosition24+1, @delimiterPosition25-@delimiterPosition24-1)
				if @delimiterPosition26 <> 0 set @tabpageName26 = substring(@wholeString, @delimiterPosition25+1, @delimiterPosition26-@delimiterPosition25-1)
				if @delimiterPosition27 <> 0 set @tabpageName27 = substring(@wholeString, @delimiterPosition26+1, @delimiterPosition27-@delimiterPosition26-1)
				if @delimiterPosition28 <> 0 set @tabpageName28 = substring(@wholeString, @delimiterPosition27+1, @delimiterPosition28-@delimiterPosition27-1)
				if @delimiterPosition29 <> 0 set @tabpageName29 = substring(@wholeString, @delimiterPosition28+1, @delimiterPosition29-@delimiterPosition28-1)
				if @delimiterPosition30 <> 0 set @tabpageName30 = substring(@wholeString, @delimiterPosition29+1, @delimiterPosition30-@delimiterPosition29-1)
				if @delimiterPosition31 <> 0 set @tabpageName31 = substring(@wholeString, @delimiterPosition30+1, @delimiterPosition31-@delimiterPosition30-1)
				if @delimiterPosition32 <> 0 set @tabpageName32 = substring(@wholeString, @delimiterPosition31+1, len(@wholeString)-@delimiterPosition31-1)

				if @tabpageName1 = '' set @tabpageName1 = NULL
				if @tabpageName2 = '' set @tabpageName2 = NULL
				if @tabpageName3 = '' set @tabpageName3 = NULL
				if @tabpageName4 = '' set @tabpageName4 = NULL
				if @tabpageName5 = '' set @tabpageName5 = NULL
				if @tabpageName6 = '' set @tabpageName6 = NULL
				if @tabpageName7 = '' set @tabpageName7 = NULL
				if @tabpageName8 = '' set @tabpageName8 = NULL
				if @tabpageName9 = '' set @tabpageName9 = NULL
				if @tabpageName10 = '' set @tabpageName10 = NULL
				if @tabpageName11 = '' set @tabpageName11 = NULL
				if @tabpageName12 = '' set @tabpageName12 = NULL
				if @tabpageName13 = '' set @tabpageName13 = NULL
				if @tabpageName14 = '' set @tabpageName14 = NULL
				if @tabpageName15 = '' set @tabpageName15 = NULL
				if @tabpageName16 = '' set @tabpageName16 = NULL
				if @tabpageName17 = '' set @tabpageName17 = NULL
				if @tabpageName18 = '' set @tabpageName18 = NULL
				if @tabpageName19 = '' set @tabpageName19 = NULL
				if @tabpageName20 = '' set @tabpageName20 = NULL
				if @tabpageName21 = '' set @tabpageName21 = NULL
				if @tabpageName22 = '' set @tabpageName22 = NULL
				if @tabpageName23 = '' set @tabpageName23 = NULL
				if @tabpageName24 = '' set @tabpageName24 = NULL
				if @tabpageName25 = '' set @tabpageName25 = NULL
				if @tabpageName26 = '' set @tabpageName26 = NULL
				if @tabpageName27 = '' set @tabpageName27 = NULL
				if @tabpageName28 = '' set @tabpageName28 = NULL
				if @tabpageName29 = '' set @tabpageName29 = NULL
				if @tabpageName30 = '' set @tabpageName30 = NULL
				if @tabpageName31 = '' set @tabpageName31 = NULL
				if @tabpageName32 = '' set @tabpageName32 = NULL
				
				

				if not @tabpageName1 is NULL select '#define ' + @tabpageName1 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName1 + '"'
				if not @tabpageName2 is NULL select '#define ' + @tabpageName2 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName2 + '"'
				if not @tabpageName3 is NULL select '#define ' + @tabpageName3 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName3 + '"'
				if not @tabpageName4 is NULL select '#define ' + @tabpageName4 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName4 + '"'
				if not @tabpageName5 is NULL select '#define ' + @tabpageName5 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName5 + '"'
				if not @tabpageName6 is NULL select '#define ' + @tabpageName6 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName6 + '"'
				if not @tabpageName7 is NULL select '#define ' + @tabpageName7 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName7 + '"'
				if not @tabpageName8 is NULL select '#define ' + @tabpageName8 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName8 + '"'
				if not @tabpageName9 is NULL select '#define ' + @tabpageName9 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName9 + '"'
				if not @tabpageName10 is NULL select '#define ' + @tabpageName10 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName10 + '"'
				if not @tabpageName11 is NULL select '#define ' + @tabpageName11 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName11 + '"'
				if not @tabpageName12 is NULL select '#define ' + @tabpageName12 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName12 + '"'
				if not @tabpageName13 is NULL select '#define ' + @tabpageName13 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName13 + '"'
				if not @tabpageName14 is NULL select '#define ' + @tabpageName14 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName14 + '"'
				if not @tabpageName15 is NULL select '#define ' + @tabpageName15 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName15 + '"'
				if not @tabpageName16 is NULL select '#define ' + @tabpageName16 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName16 + '"'
				if not @tabpageName17 is NULL select '#define ' + @tabpageName17 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName17 + '"'
				if not @tabpageName18 is NULL select '#define ' + @tabpageName18 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName18 + '"'
				if not @tabpageName19 is NULL select '#define ' + @tabpageName19 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName19 + '"'
				if not @tabpageName20 is NULL select '#define ' + @tabpageName20 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName20 + '"'
				if not @tabpageName21 is NULL select '#define ' + @tabpageName21 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName21 + '"'
				if not @tabpageName22 is NULL select '#define ' + @tabpageName22 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName22 + '"'
				if not @tabpageName23 is NULL select '#define ' + @tabpageName23 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName23 + '"'
				if not @tabpageName24 is NULL select '#define ' + @tabpageName24 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName24 + '"'
				if not @tabpageName25 is NULL select '#define ' + @tabpageName25 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName25 + '"'
				if not @tabpageName26 is NULL select '#define ' + @tabpageName26 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName26 + '"'
				if not @tabpageName27 is NULL select '#define ' + @tabpageName27 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName27 + '"'
				if not @tabpageName28 is NULL select '#define ' + @tabpageName28 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName28 + '"'
				if not @tabpageName29 is NULL select '#define ' + @tabpageName29 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName29 + '"'
				if not @tabpageName30 is NULL select '#define ' + @tabpageName30 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName30 + '"'
				if not @tabpageName31 is NULL select '#define ' + @tabpageName31 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName31 + '"'
				if not @tabpageName32 is NULL select '#define ' + @tabpageName32 + @TAB + @TAB + @TAB + @TAB + '"'+@tabpageName32 + '"'
			end
			select @last = @no		
		end
	end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkItemList]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--	Filename:	eventsI.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	12oct04		amr		ABT0516		Fix order of #tmpobjects
--	23aug03		amr		APB0105		Upgrade to .NET2003
--	22aug03		amr		APB0105		Created for .NET 2003 upgrade
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkItemList] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON
	
--------------------------------------- Create and populate #tmpobjects table -----------------------------------------------

	SELECT IDENTITY(INT, 1,1) id, name INTO #tmpobjects FROM
		(SELECT TOP 100 PERCENT o.name FROM sdkitem o ORDER BY o.name) AS so

--------------------------------------- Build structs and unions for buffers -----------------------------------------------

	SELECT name from #tmpobjects

	DROP TABLE #tmpobjects
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkSchemaCompile]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2005 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkSchemaCompile.sql
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	03jun06		amr		ABT0849		Include indexes
--	17apr06		amr		ABT0817		Change hashcodes
--	17oct05		amr		ABT0705		Added hash codes to compare
--	10oct05		amr		ABT0705		Minimum rebuild
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkSchemaCompile] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	EXEC SdkStandardHeader

	DECLARE @UNIONSIZE int
	DECLARE @chunk int
	DECLARE @chkdigit int
	DECLARE @big bigint
	DECLARE @c int
	DECLARE @objid int
	DECLARE @check_rows_exist int

	DECLARE @indexid int
	DECLARE @indexname varchar(255)
	DECLARE @maxindexid int
	DECLARE @indexloop int

	DECLARE @colid int
	DECLARE @colindexname varchar(255)

	SELECT @UNIONSIZE = 49152

	DECLARE @MAXVARBINARYSIZE int
	SELECT @MAXVARBINARYSIZE = @UNIONSIZE-1024

	DECLARE @objectcount int

	DECLARE @temp varchar(255)
	DECLARE @a varchar(8000)
	DECLARE @b varchar(8000)
	DECLARE @out varchar(8000)

	DECLARE @ilength int

	DECLARE @fieldcount int
	DECLARE @syscolumnsid int
	DECLARE @maxfields int
	DECLARE @nummatches int
	DECLARE @temptype int
	DECLARE @lz varchar(255)
	DECLARE @tempdim varchar(255)
	DECLARE @maxobjects int

	DECLARE @objectname varchar(255)
	DECLARE @sysobjectsid int
	
--------------------------------------- Create and populate ##c_types table -----------------------------------------------

	SET @objectcount = 1
	SELECT @maxobjects = (SELECT max(id) FROM ##tmpobjects)

	WHILE @objectcount <= @maxobjects
	BEGIN
		SELECT @objectname = name FROM ##tmpobjects WHERE id = @objectcount  
		SELECT @sysobjectsid = id FROM sysobjects WHERE name = @objectname

		SELECT @a = @objectname
		SELECT '~T' + @a + '/~T'

		SELECT @a = CONVERT(varchar, (SELECT hashcode FROM ##tmpobjects WHERE id = @objectcount))
		SELECT '~H' + @a + '/~H'
	
		SELECT '~C'
	
		SET @a = ''

		SELECT @objid = @sysobjectsid
	
		SELECT @fieldcount = 1
		SELECT @syscolumnsid = 1
		SELECT @maxfields = (SELECT count(*) FROM syscolumns WHERE id = @objid)
		WHILE @fieldcount <= @maxfields
		BEGIN
			SELECT @temptype = type, @temp = name FROM syscolumns WHERE colid = @syscolumnsid AND id = @objid

			SET @tempdim = ''
	
			SELECT @lz = LEFT(RIGHT(CONVERT(varchar, (SELECT value FROM sys.extended_properties
				WHERE sys.extended_properties.major_id = @objid AND
				sys.extended_properties.minor_id = @syscolumnsid AND
				sys.extended_properties.name = 'MS_Description' and
				CONVERT(varchar, sys.extended_properties.value) LIKE 'LEADINGZEROES(%)')), 2), 1)
	
			SET @ilength = 0
		
			SELECT @ilength = CONVERT(int, (SELECT value FROM sys.extended_properties
				WHERE sys.extended_properties.major_id = @objid AND
				sys.extended_properties.minor_id = @syscolumnsid AND
				sys.extended_properties.name = 'MS_Description' AND
				CONVERT(varchar, sys.extended_properties.value) LIKE '[0-9]%'))
	
			IF @lz IS NULL
			BEGIN
				SET @lz = ''	
			END
	
			SELECT @tempdim = CONVERT(varchar,syscolumns.xprec) + CONVERT(varchar,syscolumns.xscale)
	 			FROM sysobjects, syscolumns, ##tmpobjects, ##c_types
	       		WHERE sysobjects.name = ##tmpobjects.name AND
				syscolumns.id = sysobjects.id AND
				syscolumns.type = ##c_types.id AND
				##c_types.resolve = 'SdkBaseDecimal' AND
				##tmpobjects.id = @objectcount AND
				syscolumns.colid = @syscolumnsid         
	         
			IF @tempdim = '' 
			BEGIN
				SELECT @tempdim = CONVERT(varchar,syscolumns.length)
					FROM sysobjects, syscolumns, ##tmpobjects, ##c_types
					WHERE sysobjects.name = ##tmpobjects.name AND
					syscolumns.id = sysobjects.id AND
					syscolumns.type = ##c_types.id AND
					##c_types.resolve = 'SdkBaseString' AND
					##tmpobjects.id = @objectcount AND
					syscolumns.colid = @syscolumnsid
			END
	
			IF @tempdim = ''
			BEGIN
				SELECT @tempdim = CONVERT(varchar,syscolumns.length)
					FROM sysobjects, syscolumns, ##tmpobjects, ##c_types 
					WHERE sysobjects.name = ##tmpobjects.name AND
					syscolumns.id = sysobjects.id AND
					syscolumns.type = ##c_types.id AND
					##c_types.fieldtype = 'SdkBaseVarbinary' AND
					##tmpobjects.id = @objectcount AND
					syscolumns.colid = @syscolumnsid
			END
	
			IF @tempdim = ''
			BEGIN
				SELECT @tempdim = CONVERT(varchar,@ilength)
					FROM sysobjects, syscolumns, ##tmpobjects, ##c_types
					WHERE sysobjects.name = ##tmpobjects.name AND
					syscolumns.id = sysobjects.id AND
					syscolumns.type = ##c_types.id AND
					##c_types.fieldtype = 'Image' AND
					##tmpobjects.id = @objectcount AND
					syscolumns.colid = @syscolumnsid
			END
	
			SELECT @nummatches = (SELECT count(*) FROM Syscolumns WHERE colid = @syscolumnsid AND id = @objid)
			IF @nummatches > 0 
			BEGIN
				SET @a = @temp + '~' + CONVERT(varchar, @temptype) + @tempdim + @lz + '~'
				SELECT @a
			
				SELECT @fieldcount = @fieldcount + 1
			END
			
			SELECT @syscolumnsid = @syscolumnsid + 1
		END
	
		SELECT '/~C'
	
--------------------------------- INDEXES ---------------------------------------

		SELECT '~I'
		
		SELECT IDENTITY(int, 1,1) id, indid, name INTO #tmpindexes FROM
		(SELECT TOP 100 PERCENT o.indid, o.name FROM sysindexes o WHERE o.name NOT LIKE '_WA_Sys_%' AND o.id = @objid ORDER BY o.name) AS so
		SELECT @maxindexid = (SELECT count(*) FROM #tmpindexes)

		SET @indexname = ''
		SET @indexid = 1
		SET @indexloop = 1

		WHILE (@indexloop <= @maxindexid) 
		BEGIN
			SELECT @indexname = (SELECT name FROM #tmpindexes WHERE id = @indexloop)
	
			SET @colid = 1
			SET @colindexname = ''
			
			SELECT @a = @indexname
			SELECT '~' + @a + '~'
			
			SELECT @indexid = (SELECT indid FROM #tmpindexes WHERE id = @indexloop)

			WHILE (@colindexname IS NOT NULL AND @colid < 17)
			BEGIN
				SELECT @colindexname = (SELECT index_col(@objectname, @indexid, @colid) FROM sysindexes WHERE name NOT LIKE '_WA_Sys_%' AND id = @objid AND indid = @indexid)
				SELECT @colid = @colid + 1
				IF @colindexname IS NOT NULL 
				BEGIN
					SELECT @a = ':' + @colindexname
					SELECT @a
				END
			END

			SELECT @indexloop = @indexloop + 1
		END

		DROP TABLE #tmpindexes

--------------------------------- /INDEXES ---------------------------------------
	
		SELECT @a = '~' + name + '~' FROM sysobjects WHERE xtype = 'F' AND parent_obj = @objid ORDER BY name
		SELECT @a
		SELECT '/~I'

		SELECT @objectcount = @objectcount + 1
	END

	DROP TABLE ##tmpobjects
	DROP TABLE ##c_types
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkProfileValidation]'
GO
CREATE PROCEDURE [dbo].[SdkProfileValidation] AS
BEGIN
	SET NOCOUNT ON
	begin transaction
		declare @buffername sysname, @fieldname sysname, @item sysname, @detail sysname
		declare SDKusage cursor for
		select sdkitem.name as itemname, sdkdetail.name, sdkdetail.buffername, sdkdetail.fieldname as detailname from sdkdetail join sdkitem on (sdkdetail.FK_rowid_sdkitem = sdkitem.rowid)
		where
		(sdkdetail.fieldname != '[none]' and sdkdetail.fieldname != '') and
		(sdkdetail.buffername != 'global' and sdkdetail.buffername != '[none]')
		group by sdkitem.name, sdkdetail.name, sdkdetail.buffername, sdkdetail.fieldname

		create table #missing (problem sysname)

		open SDKusage
		fetch next from SDKusage into @item, @detail, @buffername, @fieldname
		while @@fetch_status=0
		begin
			if not exists (select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = @buffername and COLUMN_NAME = @fieldname)
			begin
				insert into #missing values ('Invalid ' + @detail + ' detail [' + @buffername + '/' + @fieldname + '] on ' + @item)
			end
			fetch next from SDKusage into @item, @detail, @buffername, @fieldname
		end
	close SDKusage

	select problem as 'SDK Item/Detail Problems' from #missing
	drop table #missing

	deallocate SDKusage
	commit
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkCleanTable]'
GO
--	-----------------------------------------------------------------------------
--	Copyright (c) 2015 Sword Apak
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkCleanTable.sql
--
--	Notes:
--
--	Changes:
--	Date	Author	Issue		Change 
--	-----------------------------------------------------------------------------
--	20apr15	mgf		SDK-219		Created
--	-----------------------------------------------------------------------------

CREATE procedure [dbo].[SdkCleanTable] @tableName sysname WITH ENCRYPTION AS
BEGIN
	set rowcount 5000
	set nocount on

	declare @count int
	declare @err int

	create table #count(c int) 

	insert #count exec ('select count(*) from ' + @tableName)
	select @err = @@error if @err <> 0 return @err 
	select @count = c from #count 
	raiserror('Cleaning %d records in table %s', 0, -1, @count, @tableName) 

	delete #count 

	insert #count 
		exec ('declare @err int select @err = 0 while @err = 0 and exists(select * from ' + @tableName + ') begin delete ' + @tableName + ' select @err = @@error end select @err') 
	select @err = c from #count 
	return @err 
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkCleanApplication]'
GO
--	-----------------------------------------------------------------------------
--	Copyright (c) 2015 Sword Apak
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkCleanApplication.sql
--
--	Notes:
--
--	Changes:
--	Date	Author	Issue		Change 
--	-----------------------------------------------------------------------------
--	04apr17	mgf		SDK-286		Fixed to allow different server to database collation
--	12may15	mgf		SDK-219		Removed exclusion of SDKLoginSDKitem
--	20apr15	mgf		SDK-219		Created
--	-----------------------------------------------------------------------------

CREATE procedure [dbo].[SdkCleanApplication] @schemaName varchar(50) WITH ENCRYPTION AS
BEGIN
	set nocount on
	declare @err int
	declare @tablename sysname
	select @err = 0 

	create table #tables (tbl sysname not null primary key,
						  refcount int null)

	-- Add all tables to be cleansed here. Preferably in alphabetic order. 
	-- (We will sort them according to references later on.) 
	declare app_tables cursor for
	select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_TYPE COLLATE Latin1_General_CI_AS = 'BASE TABLE' and TABLE_SCHEMA COLLATE Latin1_General_CI_AS = @schemaName

	open app_tables
	fetch next from app_tables into @tablename
	while @@FETCH_STATUS = 0
	begin
		insert #tables(tbl) values(@tablename) 
		fetch next from app_tables into @tablename
	end
	close app_tables
	deallocate app_tables

	-- Add temporary table for references. 
	create table #refs (ref_from sysname not null, 
					   ref_to sysname not null, 
					   primary key (ref_from, ref_to)) 

	-- Now we add all foreign key references. 
	insert #refs (ref_from, ref_to) 
	select distinct o1.name, o2.name 
	from sysobjects o1, sysobjects o2, sysreferences r, #tables t 
	where o1.id = r.fkeyid
		and o2.id = r.rkeyid
		and o2.name COLLATE Latin1_General_CI_AS = t.tbl COLLATE Latin1_General_CI_AS
		and o1.name COLLATE Latin1_General_CI_AS <> o2.name COLLATE Latin1_General_CI_AS
		and not exists (select * from #refs ref where ref.ref_from COLLATE Latin1_General_CI_AS = o1.name COLLATE Latin1_General_CI_AS and ref.ref_to COLLATE Latin1_General_CI_AS = o2.name COLLATE Latin1_General_CI_AS)

	-- Check that there are no tables referring the list above, but is not in 
	-- the list at all. 
	if exists (select * from #refs r 
			   where not exists (select * from #tables t where t.tbl COLLATE Latin1_General_CI_AS = r.ref_from COLLATE Latin1_General_CI_AS))
	begin
		select r.ref_from from #refs r 
		where not exists (select * from #tables t where t.tbl COLLATE Latin1_General_CI_AS = r.ref_from COLLATE Latin1_General_CI_AS) 
			print 'These tables appear to be missing in #tables'
	end

	declare @refcount int
	declare @rowc int 

	-- Now, we first mark all tables that are not referenced by any other table. 
	update #tables 
	set refcount = 0 
	from #tables t 
	where not exists (select * from #refs r where r.ref_to COLLATE Latin1_General_CI_AS = t.tbl COLLATE Latin1_General_CI_AS) 
	select @rowc = @@rowcount 

	-- Then loop as long as there unmarked tables. 
	select @refcount = 1 
	while @rowc <> 0 
	begin
		update #tables 
		set refcount = @refcount 
		from #tables t 
		where t.refcount is null
		and not exists (select * from #refs r, #tables t2 
						where r.ref_to COLLATE Latin1_General_CI_AS = t.tbl COLLATE Latin1_General_CI_AS and r.ref_from COLLATE Latin1_General_CI_AS = t2.tbl COLLATE Latin1_General_CI_AS and t2.refcount is null) 
		select @rowc = @@rowcount 
		select @refcount = @refcount + 1 
	end

	-- Did we mark them all? 
	if exists (select * from #tables where refcount is null) 
	begin
		select * from #tables where refcount is null
		raiserror ('Could not determine ref.count for all tables. Circular references?', 16, -1)
		return 1
	end

	-- Remove our SDK tables to ignore deletion
	delete #tables where tbl COLLATE Latin1_General_CI_AS = 'SDKdetail'
	delete #tables where tbl COLLATE Latin1_General_CI_AS = 'SDKitem'
	delete #tables where tbl COLLATE Latin1_General_CI_AS = 'SDKpossiblevalues'
	delete #tables where tbl COLLATE Latin1_General_CI_AS = 'SDKregistry'

	-- Eventually, we can do the cleansing job. 
	declare @tbl sysname 
	select @err = 0 
	while @err = 0 
	begin
		select @tbl = null
		set rowcount 1
		select @tbl = tbl from #tables order by refcount, tbl 
		set rowcount 0

		if @tbl is null
			break

		declare @schemaTable varchar(1000)
		set @schemaTable = @schemaName + '.' + @tbl

		exec @err = SDKCleanTable @schemaTable 
	 
		select @err = coalesce(nullif(@err, 0), @@error) if @err <> 0 print @err 

		delete #tables where tbl = @tbl 
	end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddiin]'
GO
CREATE TABLE [dbo].[ddiin]
(
[rowid] [bigint] NOT NULL,
[service_user_no] [int] NULL,
[service_username] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[coreref] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[allowed_collection_date] [datetime] NULL,
[first_collection_date] [datetime] NULL,
[first_collection_amount] [dbo].[balance] NULL,
[previous_collection_date] [datetime] NULL,
[previous_collection_time] [datetime] NULL,
[previous_collection_amount] [dbo].[balance] NULL,
[collection_no] [int] NULL,
[migration] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_extacct] [bigint] NOT NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddiin] on [dbo].[ddiin]'
GO
ALTER TABLE [dbo].[ddiin] ADD CONSTRAINT [PK_ddiin] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_FKacct] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_FKacct] ON [dbo].[ddiin] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_FKextacct] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_FKextacct] ON [dbo].[ddiin] ([FK_rowid_extacct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_FKnonpers] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_FKnonpers] ON [dbo].[ddiin] ([FK_rowid_nonpers])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_FKpeople] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_FKpeople] ON [dbo].[ddiin] ([FK_rowid_people])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_migration] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_migration] ON [dbo].[ddiin] ([migration])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiin_coreref] on [dbo].[ddiin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiin_coreref] ON [dbo].[ddiin] ([service_user_no], [coreref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acct]'
GO
CREATE TABLE [dbo].[acct]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[sub] [int] NULL,
[bookdate] [datetime] NULL,
[bookbal] [decimal] (19, 2) NULL,
[valuebal] [decimal] (19, 2) NULL,
[clearbal] [decimal] (19, 2) NULL,
[next_sequence] [bigint] NULL,
[next_txns] [datetime] NULL,
[product] [bigint] NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[iban] [varchar] (34) COLLATE Latin1_General_CI_AS NULL,
[altacctno] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[softpoint] [int] NULL,
[FK_rowid_ddiin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acct] on [dbo].[acct]'
GO
ALTER TABLE [dbo].[acct] ADD CONSTRAINT [PK_acct] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acct_altacctno] on [dbo].[acct]'
GO
CREATE NONCLUSTERED INDEX [IX_acct_altacctno] ON [dbo].[acct] ([altacctno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acct_iban] on [dbo].[acct]'
GO
CREATE NONCLUSTERED INDEX [IX_acct_iban] ON [dbo].[acct] ([iban])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[acct]'
GO
ALTER TABLE [dbo].[acct] ADD CONSTRAINT [IX_acct_accno] UNIQUE NONCLUSTERED  ([sortcode], [accno], [sub])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acct_product] on [dbo].[acct]'
GO
CREATE NONCLUSTERED INDEX [IX_acct_product] ON [dbo].[acct] ([sortcode], [type], [currency], [product])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctcontact]'
GO
CREATE TABLE [dbo].[acctcontact]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NOT NULL,
[category] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[autotype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[usemain] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctcontact] on [dbo].[acctcontact]'
GO
ALTER TABLE [dbo].[acctcontact] ADD CONSTRAINT [PK_acctcontact] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctcontact_identifier] on [dbo].[acctcontact]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_acctcontact_identifier] ON [dbo].[acctcontact] ([FK_rowid_acct], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctcontact_status] on [dbo].[acctcontact]'
GO
CREATE NONCLUSTERED INDEX [IX_acctcontact_status] ON [dbo].[acctcontact] ([rowid], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctcontact_c]'
GO
CREATE TABLE [dbo].[acctcontact_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_acctcontact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctcontact_c] on [dbo].[acctcontact_c]'
GO
ALTER TABLE [dbo].[acctcontact_c] ADD CONSTRAINT [PK_acctcontact_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctcontact_c] on [dbo].[acctcontact_c]'
GO
CREATE NONCLUSTERED INDEX [IX_acctcontact_c] ON [dbo].[acctcontact_c] ([FK_rowid_acctcontact], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[contact]'
GO
CREATE TABLE [dbo].[contact]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[usage] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[expirydate] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[preferred] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[addressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[salutation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[pafline1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pafline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pafline3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pafline4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pafline5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pafpostcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[pafvalid] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[teltype1] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telnumber1] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext1] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[teltype2] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telnumber2] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext2] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[teltype3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[telnumber3] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext3] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[teltype4] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telnumber4] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext4] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[teltype5] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telnumber5] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext5] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[teltype6] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telnumber6] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[telext6] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[telnote6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailnote1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailnote2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailnote3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailnote4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailnote5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[other1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[othernote1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[other2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[othernote2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[other3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[othernote3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[other4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[othernote4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[other5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[othernote5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[available] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[contact] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_model] [bigint] NULL,
[FK_rowid_property] [bigint] NULL,
[FK_rowid_appl] [bigint] NULL,
[FK_rowid_development] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_contact] on [dbo].[contact]'
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [PK_contact] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_email1] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_email1] ON [dbo].[contact] ([email1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_appl] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_appl] ON [dbo].[contact] ([FK_rowid_appl], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_model] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_model] ON [dbo].[contact] ([FK_rowid_model], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_nonpers] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_nonpers] ON [dbo].[contact] ([FK_rowid_nonpers], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_people] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_people] ON [dbo].[contact] ([FK_rowid_people], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_property] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_property] ON [dbo].[contact] ([FK_rowid_property], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_adhoc_identifier] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_adhoc_identifier] ON [dbo].[contact] ([identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_identifier_development] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_identifier_development] ON [dbo].[contact] ([identifier], [FK_rowid_development])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_postcode] on [dbo].[contact]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_postcode] ON [dbo].[contact] ([postcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctgroup]'
GO
CREATE TABLE [dbo].[acctgroup]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[bookdate] [datetime] NULL,
[debitlimit] [decimal] (18, 0) NULL,
[limit] [decimal] (18, 0) NULL,
[limit_fee_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[review] [datetime] NULL,
[pb] [int] NULL,
[so] [int] NULL,
[risk] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[admin_sortcode] [int] NULL,
[admin_accno] [bigint] NULL,
[crint_yn] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_month] [int] NULL,
[crint_next] [datetime] NULL,
[crint_cycle_fix] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_pcent] [decimal] (5, 2) NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_code] [int] NULL,
[crint_use_cr_bal] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[crint_use_net_bal] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[crint_accr_dr] [decimal] (14, 2) NULL,
[crint_accr] [decimal] (14, 2) NULL,
[drint_yn] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_month] [int] NULL,
[drint_next] [datetime] NULL,
[drint_cycle_fix] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[drint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[drint_pay_pcent] [decimal] (5, 2) NULL,
[drint_pay_accno] [bigint] NULL,
[drint_pay_code] [int] NULL,
[drint_use_pn_days] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_pn_every] [int] NULL,
[drint_pn_freq] [varchar] (8) NULL,
[drint_use_dr_bal] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[drint_use_net_bal] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[drint_accr_cr] [decimal] (14, 2) NULL,
[drint_accr] [decimal] (14, 2) NULL,
[charge_yn] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[charge_every] [int] NULL,
[charge_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_day] [int] NULL,
[charge_month] [int] NULL,
[charge_next] [datetime] NULL,
[charge_cycle_fix] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[charge_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[charge_pay_pcent] [decimal] (5, 2) NULL,
[charge_pay_accno] [bigint] NULL,
[charge_pay_code] [int] NULL,
[charge_use_pn_days] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_pn_every] [int] NULL,
[charge_pn_freq] [varchar] (8) NULL,
[charge_accr] [decimal] (14, 2) NULL,
[charge_pro_rata_fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[maint_charge] [decimal] (8, 2) NULL,
[tover_charge] [decimal] (8, 2) NULL,
[tover_per] [decimal] (11, 2) NULL,
[margin_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[margin_incr] [decimal] (8, 6) NULL,
[margin_start] [int] NULL,
[day_days] [int] NULL,
[day_rate] [decimal] (8, 6) NULL,
[day_cr_accts] [int] NULL,
[day_cr_bal] [decimal] (20, 2) NULL,
[day_crint] [dbo].[accrual] NULL,
[day_cr_margin] [decimal] (8, 6) NULL,
[day_dr_accts] [int] NULL,
[day_dr_bal] [decimal] (20, 2) NULL,
[day_drint] [dbo].[accrual] NULL,
[day_dr_margin] [decimal] (8, 6) NULL,
[day_margin] [decimal] (8, 6) NULL,
[mtd_days] [int] NULL,
[mtd_rate] [decimal] (8, 6) NULL,
[mtd_cr_bal] [decimal] (20, 2) NULL,
[mtd_crint] [dbo].[accrual] NULL,
[mtd_cr_margin] [decimal] (8, 6) NULL,
[mtd_dr_bal] [decimal] (20, 2) NULL,
[mtd_drint] [dbo].[accrual] NULL,
[mtd_dr_margin] [decimal] (8, 6) NULL,
[mtd_margin] [decimal] (8, 6) NULL,
[ytd_days] [int] NULL,
[ytd_rate] [decimal] (8, 6) NULL,
[ytd_cr_bal] [decimal] (20, 2) NULL,
[ytd_crint] [dbo].[accrual] NULL,
[ytd_cr_margin] [decimal] (8, 6) NULL,
[ytd_dr_bal] [decimal] (20, 2) NULL,
[ytd_drint] [dbo].[accrual] NULL,
[ytd_dr_margin] [decimal] (8, 6) NULL,
[ytd_margin] [decimal] (8, 6) NULL,
[m01_cr_margin] [decimal] (8, 6) NULL,
[m01_dr_margin] [decimal] (8, 6) NULL,
[m01_margin] [decimal] (8, 6) NULL,
[m02_cr_margin] [decimal] (8, 6) NULL,
[m02_dr_margin] [decimal] (8, 6) NULL,
[m02_margin] [decimal] (8, 6) NULL,
[m03_cr_margin] [decimal] (8, 6) NULL,
[m03_dr_margin] [decimal] (8, 6) NULL,
[m03_margin] [decimal] (8, 6) NULL,
[m04_cr_margin] [decimal] (8, 6) NULL,
[m04_dr_margin] [decimal] (8, 6) NULL,
[m04_margin] [decimal] (8, 6) NULL,
[m05_cr_margin] [decimal] (8, 6) NULL,
[m05_dr_margin] [decimal] (8, 6) NULL,
[m05_margin] [decimal] (8, 6) NULL,
[m06_cr_margin] [decimal] (8, 6) NULL,
[m06_dr_margin] [decimal] (8, 6) NULL,
[m06_margin] [decimal] (8, 6) NULL,
[m07_cr_margin] [decimal] (8, 6) NULL,
[m07_dr_margin] [decimal] (8, 6) NULL,
[m07_margin] [decimal] (8, 6) NULL,
[m08_cr_margin] [decimal] (8, 6) NULL,
[m08_dr_margin] [decimal] (8, 6) NULL,
[m08_margin] [decimal] (8, 6) NULL,
[m09_cr_margin] [decimal] (8, 6) NULL,
[m09_dr_margin] [decimal] (8, 6) NULL,
[m09_margin] [decimal] (8, 6) NULL,
[m10_cr_margin] [decimal] (8, 6) NULL,
[m10_dr_margin] [decimal] (8, 6) NULL,
[m10_margin] [decimal] (8, 6) NULL,
[m11_cr_margin] [decimal] (8, 6) NULL,
[m11_dr_margin] [decimal] (8, 6) NULL,
[m11_margin] [decimal] (8, 6) NULL,
[m12_cr_margin] [decimal] (8, 6) NULL,
[m12_dr_margin] [decimal] (8, 6) NULL,
[m12_margin] [decimal] (8, 6) NULL,
[m01_cr_bal] [decimal] (20, 2) NULL,
[m01_dr_bal] [decimal] (20, 2) NULL,
[m02_cr_bal] [decimal] (20, 2) NULL,
[m02_dr_bal] [decimal] (20, 2) NULL,
[m03_cr_bal] [decimal] (20, 2) NULL,
[m03_dr_bal] [decimal] (20, 2) NULL,
[m04_cr_bal] [decimal] (20, 2) NULL,
[m04_dr_bal] [decimal] (20, 2) NULL,
[m05_cr_bal] [decimal] (20, 2) NULL,
[m05_dr_bal] [decimal] (20, 2) NULL,
[m06_cr_bal] [decimal] (20, 2) NULL,
[m06_dr_bal] [decimal] (20, 2) NULL,
[m07_cr_bal] [decimal] (20, 2) NULL,
[m07_dr_bal] [decimal] (20, 2) NULL,
[m08_cr_bal] [decimal] (20, 2) NULL,
[m08_dr_bal] [decimal] (20, 2) NULL,
[m09_cr_bal] [decimal] (20, 2) NULL,
[m09_dr_bal] [decimal] (20, 2) NULL,
[m10_cr_bal] [decimal] (20, 2) NULL,
[m10_dr_bal] [decimal] (20, 2) NULL,
[m11_cr_bal] [decimal] (20, 2) NULL,
[m11_dr_bal] [decimal] (20, 2) NULL,
[m12_cr_bal] [decimal] (20, 2) NULL,
[m12_dr_bal] [decimal] (20, 2) NULL,
[pendingid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctgroup] on [dbo].[acctgroup]'
GO
ALTER TABLE [dbo].[acctgroup] ADD CONSTRAINT [PK_acctgroup] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctgroup_id] on [dbo].[acctgroup]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_acctgroup_id] ON [dbo].[acctgroup] ([type], [id], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctgroup_pendingid] on [dbo].[acctgroup]'
GO
CREATE NONCLUSTERED INDEX [IX_acctgroup_pendingid] ON [dbo].[acctgroup] ([type], [pendingid], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctgroup_c]'
GO
CREATE TABLE [dbo].[acctgroup_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_acctgroup] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctgroup_c] on [dbo].[acctgroup_c]'
GO
ALTER TABLE [dbo].[acctgroup_c] ADD CONSTRAINT [PK_acctgroup_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctgroup_c] on [dbo].[acctgroup_c]'
GO
CREATE NONCLUSTERED INDEX [IX_acctgroup_c] ON [dbo].[acctgroup_c] ([FK_rowid_acctgroup], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctsubst]'
GO
CREATE TABLE [dbo].[acctsubst]
(
[rowid] [bigint] NOT NULL,
[old_accno] [bigint] NULL,
[new_accno] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctsubst] on [dbo].[acctsubst]'
GO
ALTER TABLE [dbo].[acctsubst] ADD CONSTRAINT [PK_acctsubst] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctsubst_old_accno] on [dbo].[acctsubst]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_acctsubst_old_accno] ON [dbo].[acctsubst] ([old_accno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[acctsubst_c]'
GO
CREATE TABLE [dbo].[acctsubst_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_acctsubst] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_acctsubst_c] on [dbo].[acctsubst_c]'
GO
ALTER TABLE [dbo].[acctsubst_c] ADD CONSTRAINT [PK_acctsubst_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_acctsubst_c] on [dbo].[acctsubst_c]'
GO
CREATE NONCLUSTERED INDEX [IX_acctsubst_c] ON [dbo].[acctsubst_c] ([FK_rowid_acctsubst], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsinhdr]'
GO
CREATE TABLE [dbo].[addacsinhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[serviceuserno] [int] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacsprocess] [datetime] NOT NULL,
[bacsexpiry] [datetime] NULL,
[tottxns] [int] NULL,
[totposted] [int] NULL,
[totrejected] [int] NULL,
[toterrored] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[firstaosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[lastaosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processing_service] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsinhdr] on [dbo].[addacsinhdr]'
GO
ALTER TABLE [dbo].[addacsinhdr] ADD CONSTRAINT [PK_addacsinhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsinhdr_filename] on [dbo].[addacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsinhdr_filename] ON [dbo].[addacsinhdr] ([FK_rowid_model], [filename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsinhdr_submission] on [dbo].[addacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsinhdr_submission] ON [dbo].[addacsinhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsinhdr_c]'
GO
CREATE TABLE [dbo].[addacsinhdr_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_addacsinhdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsinhdr_c] on [dbo].[addacsinhdr_c]'
GO
ALTER TABLE [dbo].[addacsinhdr_c] ADD CONSTRAINT [PK_addacsinhdr_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsinhdr_c] on [dbo].[addacsinhdr_c]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsinhdr_c] ON [dbo].[addacsinhdr_c] ([FK_rowid_addacsinhdr], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[model]'
GO
CREATE TABLE [dbo].[model]
(
[rowid] [bigint] NOT NULL,
[levno] [int] NULL,
[code] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[owner] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[level9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[admin] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[glchart] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[gladmin] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_mon] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_tue] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_wed] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_thu] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_fri] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_sat] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[hol_sun] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bureaunum] [int] NULL,
[usernocredit] [int] NULL,
[usernodebit] [int] NULL,
[submissioncentre] [int] NULL,
[yearend_day] [int] NULL,
[yearend_month] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[taxreference] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[taxsubreturn] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[isareference] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[isasubreturn] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[fscsfrn] [int] NULL,
[fscsaccredited] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fscsaccrediteddate] [datetime] NULL,
[fscsdeposit] [dbo].[balance] NULL,
[fscsinvestment] [dbo].[balance] NULL,
[fscsturnover] [dbo].[balance] NULL,
[fscsbalancesheet] [dbo].[balance] NULL,
[fscsemployee] [int] NULL,
[brrd_flag] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ibancountry] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[ibanbankidentifier] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_model] on [dbo].[model]'
GO
ALTER TABLE [dbo].[model] ADD CONSTRAINT [PK_model] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_model_admin] on [dbo].[model]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_model_admin] ON [dbo].[model] ([admin], [level1], [level2], [level3], [level4], [level5], [level6], [level7], [level8], [level9])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_model_code] on [dbo].[model]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_model_code] ON [dbo].[model] ([code])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_model_levels] on [dbo].[model]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_model_levels] ON [dbo].[model] ([level1], [level2], [level3], [level4], [level5], [level6], [level7], [level8], [level9])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_model_sortcode] on [dbo].[model]'
GO
CREATE NONCLUSTERED INDEX [IX_model_sortcode] ON [dbo].[model] ([sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsintxn]'
GO
CREATE TABLE [dbo].[addacsintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[newpayersortcode] [int] NULL,
[newpayeracctno] [bigint] NULL,
[newpayertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[effectivedate] [datetime] NULL,
[lastpaymentdate] [datetime] NULL,
[aosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_addacsinhdr] [bigint] NOT NULL,
[FK_rowid_ddiin] [bigint] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsintxn] on [dbo].[addacsintxn]'
GO
ALTER TABLE [dbo].[addacsintxn] ADD CONSTRAINT [PK_addacsintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsintxn_identifier] on [dbo].[addacsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsintxn_identifier] ON [dbo].[addacsintxn] ([FK_rowid_addacsinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsintxn_c]'
GO
CREATE TABLE [dbo].[addacsintxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_addacsintxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsintxn_c] on [dbo].[addacsintxn_c]'
GO
ALTER TABLE [dbo].[addacsintxn_c] ADD CONSTRAINT [PK_addacsintxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsintxn_c] on [dbo].[addacsintxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsintxn_c] ON [dbo].[addacsintxn_c] ([FK_rowid_addacsintxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsouthdr]'
GO
CREATE TABLE [dbo].[addacsouthdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsouthdr] on [dbo].[addacsouthdr]'
GO
ALTER TABLE [dbo].[addacsouthdr] ADD CONSTRAINT [PK_addacsouthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsouthdr_submission] on [dbo].[addacsouthdr]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_addacsouthdr_submission] ON [dbo].[addacsouthdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsouttxn]'
GO
CREATE TABLE [dbo].[addacsouttxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[duedate] [datetime] NULL,
[frequency] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[lastpaymentdate] [datetime] NULL,
[newpayertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[newpayersortcode] [int] NULL,
[newpayeracctno] [bigint] NULL,
[newduedate] [datetime] NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[resubmitted] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_addacsouthdr] [bigint] NOT NULL,
[FK_rowid_ddiout] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsouttxn] on [dbo].[addacsouttxn]'
GO
ALTER TABLE [dbo].[addacsouttxn] ADD CONSTRAINT [PK_addacsouttxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsouttxn_identifier] on [dbo].[addacsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsouttxn_identifier] ON [dbo].[addacsouttxn] ([FK_rowid_addacsouthdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsouttxn_FKddiout] on [dbo].[addacsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsouttxn_FKddiout] ON [dbo].[addacsouttxn] ([FK_rowid_ddiout], [createdate], [createtime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[addacsouttxn_c]'
GO
CREATE TABLE [dbo].[addacsouttxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_addacsouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_addacsouttxn_c] on [dbo].[addacsouttxn_c]'
GO
ALTER TABLE [dbo].[addacsouttxn_c] ADD CONSTRAINT [PK_addacsouttxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_addacsouttxn_c] on [dbo].[addacsouttxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_addacsouttxn_c] ON [dbo].[addacsouttxn_c] ([FK_rowid_addacsouttxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddiout]'
GO
CREATE TABLE [dbo].[ddiout]
(
[rowid] [bigint] NOT NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (33) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[expirydate] [datetime] NULL,
[source] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[lastclaimdate] [datetime] NULL,
[lastclaimref] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[lastclaimamount] [dbo].[balance] NULL,
[lastclaimsortcode] [int] NULL,
[lastclaimacctno] [bigint] NULL,
[lastactivity] [datetime] NULL,
[suppressaddacs] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_ibnkuser_submitter] [bigint] NULL,
[ibnk_submit_date] [datetime] NULL,
[ibnk_submit_time] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser] [bigint] NULL,
[ibnk_authorise_date] [datetime] NULL,
[ibnk_authorise_time] [datetime] NULL,
[transferinsortcode] [int] NULL,
[transferinacctno] [bigint] NULL,
[transferoutsortcode] [int] NULL,
[transferoutacctno] [bigint] NULL,
[migration] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NOT NULL,
[FK_rowid_ddorigin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddiout] on [dbo].[ddiout]'
GO
ALTER TABLE [dbo].[ddiout] ADD CONSTRAINT [PK_ddiout] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiout] on [dbo].[ddiout]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiout] ON [dbo].[ddiout] ([FK_rowid_acct], [serviceusername])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiout_lookup] on [dbo].[ddiout]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiout_lookup] ON [dbo].[ddiout] ([FK_rowid_acct], [serviceuserno], [reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiout_migration] on [dbo].[ddiout]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiout_migration] ON [dbo].[ddiout] ([migration])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_coreref] on [dbo].[ddiout]'
GO
CREATE NONCLUSTERED INDEX [IX_coreref] ON [dbo].[ddiout] ([reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[additionalfields_field]'
GO
CREATE TABLE [dbo].[additionalfields_field]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prompt] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[decimalprecision] [int] NULL,
[stringformat] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_additionalfields_table] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_additionalfields_field] on [dbo].[additionalfields_field]'
GO
ALTER TABLE [dbo].[additionalfields_field] ADD CONSTRAINT [PK_additionalfields_field] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_additionalfields_field_name] on [dbo].[additionalfields_field]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_additionalfields_field_name] ON [dbo].[additionalfields_field] ([FK_rowid_additionalfields_table], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[additionalfields_enumerated]'
GO
CREATE TABLE [dbo].[additionalfields_enumerated]
(
[rowid] [bigint] NOT NULL,
[value] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_additionalfields_field] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_additionalfields_enumerated] on [dbo].[additionalfields_enumerated]'
GO
ALTER TABLE [dbo].[additionalfields_enumerated] ADD CONSTRAINT [PK_additionalfields_enumerated] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_additionalfields_enumerated_value] on [dbo].[additionalfields_enumerated]'
GO
CREATE NONCLUSTERED INDEX [IX_additionalfields_enumerated_value] ON [dbo].[additionalfields_enumerated] ([FK_rowid_additionalfields_field], [value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan]'
GO
CREATE TABLE [dbo].[loan]
(
[rowid] [bigint] NOT NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[propstatus] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[signers] [int] NULL,
[purpose] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[regulator_purpose] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mlar_code] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[approved] [dbo].[balance] NULL,
[drawndown] [dbo].[balance] NULL,
[theoretical_capital] [dbo].[balance] NULL,
[theoretical_interest] [dbo].[balance] NULL,
[theoretical_fees] [dbo].[balance] NULL,
[theoretical_insurance] [dbo].[balance] NULL,
[term] [int] NULL,
[termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amort_period] [int] NULL,
[amort_period_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amort_date] [datetime] NULL,
[notification_date] [datetime] NULL,
[repaytype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[drawdowndate] [datetime] NULL,
[maturitydate] [datetime] NULL,
[maturityday] [int] NULL,
[contractual_maturitydate] [datetime] NULL,
[reviewdate] [datetime] NULL,
[drint_type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[drint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_month] [int] NULL,
[drint_next] [datetime] NULL,
[drint_increment] [decimal] (8, 6) NULL,
[drint_floor] [decimal] (8, 6) NULL,
[drint_cap] [decimal] (8, 6) NULL,
[drint_apr] [decimal] (3, 1) NULL,
[drint_irr] [decimal] (8, 3) NULL,
[drint_apr_day1_adjust] [dbo].[balance] NULL,
[payment_every] [int] NULL,
[payment_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[payment_day] [int] NULL,
[payment_month] [int] NULL,
[first_payment] [datetime] NULL,
[next_payment] [datetime] NULL,
[next_lsched] [datetime] NULL,
[next_fee] [datetime] NULL,
[last_payment] [datetime] NULL,
[payment_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[internal_accno] [bigint] NULL,
[internal_sortcode] [int] NULL,
[internal_sub] [int] NULL,
[invoice] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[invoice_date] [datetime] NULL,
[invoice_due] [datetime] NULL,
[invoice_amount] [dbo].[balance] NULL,
[cap_paid_td] [dbo].[balance] NULL,
[int_paid_td] [dbo].[balance] NULL,
[ins_paid_td] [dbo].[balance] NULL,
[fee_paid_td] [dbo].[balance] NULL,
[drint_paid_td] [dbo].[balance] NULL,
[drint_paid_for_payment] [dbo].[balance] NULL,
[drint_paid_life] [dbo].[balance] NULL,
[drint_accr] [dbo].[accrual] NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_bookbal] [dbo].[balance] NULL,
[eod_valuebal] [dbo].[balance] NULL,
[arrs_cap] [dbo].[balance] NULL,
[arrs_int] [dbo].[balance] NULL,
[arrs_ins] [dbo].[balance] NULL,
[arrs_fee] [dbo].[balance] NULL,
[arrs_accr] [dbo].[accrual] NULL,
[product] [bigint] NULL,
[clearexceptions] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[def_disburse_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[last_savepoint] [datetime] NULL,
[restbal] [dbo].[balance] NULL,
[chg_1] [int] NULL,
[chg_2] [int] NULL,
[chg_3] [int] NULL,
[chg_4] [int] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[conversion] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[tcc] [dbo].[balance] NULL,
[total_drint_accr] [dbo].[accrual] NULL,
[bad_debt_provision] [dbo].[balance] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[min_interest_to_charge] [int] NULL,
[min_interest_to_chargefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[risk_weighting_figure] [decimal] (5, 2) NULL,
[contingent_value] [dbo].[balance] NULL,
[contingent_3rd_party] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[facility_limit] [dbo].[balance] NULL,
[original_facility_limit] [dbo].[balance] NULL,
[has_sub_account_flags] [int] NULL,
[is_sub_account_flags] [int] NULL,
[syndication_participant_nonpers] [bigint] NULL,
[syndication_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[syndication_pcent] [decimal] (5, 3) NULL,
[element1_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element1_amount] [dbo].[balance] NULL,
[element1_drawndown] [dbo].[balance] NULL,
[element2_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element2_amount] [dbo].[balance] NULL,
[element2_drawndown] [dbo].[balance] NULL,
[element3_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element3_amount] [dbo].[balance] NULL,
[element3_drawndown] [dbo].[balance] NULL,
[element4_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element4_amount] [dbo].[balance] NULL,
[element4_drawndown] [dbo].[balance] NULL,
[element5_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element5_amount] [dbo].[balance] NULL,
[element5_drawndown] [dbo].[balance] NULL,
[element6_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element6_amount] [dbo].[balance] NULL,
[element6_drawndown] [dbo].[balance] NULL,
[element7_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element7_amount] [dbo].[balance] NULL,
[element7_drawndown] [dbo].[balance] NULL,
[element8_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element8_amount] [dbo].[balance] NULL,
[element8_drawndown] [dbo].[balance] NULL,
[interest_rolled] [dbo].[balance] NULL,
[drint_suspense] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[suspense_drint] [dbo].[balance] NULL,
[fees_suspense] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[suspense_fees] [dbo].[balance] NULL,
[personal_banker] [int] NULL,
[sales_officer] [int] NULL,
[stage] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[region_code] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[activation_date] [datetime] NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan] on [dbo].[loan]'
GO
ALTER TABLE [dbo].[loan] ADD CONSTRAINT [PK_loan] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[loan]'
GO
ALTER TABLE [dbo].[loan] ADD CONSTRAINT [IX_loan_FKacct] UNIQUE NONCLUSTERED  ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanadv]'
GO
CREATE TABLE [dbo].[loanadv]
(
[rowid] [bigint] NOT NULL,
[advdate] [datetime] NULL,
[description] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[drawndown] [dbo].[balance] NULL,
[undrawn] [dbo].[balance] NULL,
[element1_amount] [dbo].[balance] NULL,
[element1_drawndown] [dbo].[balance] NULL,
[element1_undrawn] [dbo].[balance] NULL,
[element1_advamount] [dbo].[balance] NULL,
[element2_amount] [dbo].[balance] NULL,
[element2_drawndown] [dbo].[balance] NULL,
[element2_undrawn] [dbo].[balance] NULL,
[element2_advamount] [dbo].[balance] NULL,
[element3_amount] [dbo].[balance] NULL,
[element3_drawndown] [dbo].[balance] NULL,
[element3_undrawn] [dbo].[balance] NULL,
[element3_advamount] [dbo].[balance] NULL,
[element4_amount] [dbo].[balance] NULL,
[element4_drawndown] [dbo].[balance] NULL,
[element4_undrawn] [dbo].[balance] NULL,
[element4_advamount] [dbo].[balance] NULL,
[element5_amount] [dbo].[balance] NULL,
[element5_drawndown] [dbo].[balance] NULL,
[element5_undrawn] [dbo].[balance] NULL,
[element5_advamount] [dbo].[balance] NULL,
[element6_amount] [dbo].[balance] NULL,
[element6_drawndown] [dbo].[balance] NULL,
[element6_undrawn] [dbo].[balance] NULL,
[element6_advamount] [dbo].[balance] NULL,
[element7_amount] [dbo].[balance] NULL,
[element7_drawndown] [dbo].[balance] NULL,
[element7_undrawn] [dbo].[balance] NULL,
[element7_advamount] [dbo].[balance] NULL,
[element8_amount] [dbo].[balance] NULL,
[element8_drawndown] [dbo].[balance] NULL,
[element8_undrawn] [dbo].[balance] NULL,
[element8_advamount] [dbo].[balance] NULL,
[advamount] [dbo].[balance] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[disburse_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[acct_name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[beneficiary] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[sub] [int] NULL,
[third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cheque_no] [bigint] NULL,
[fee1] [decimal] (18, 0) NULL,
[fee2] [decimal] (18, 0) NULL,
[fee3] [decimal] (18, 0) NULL,
[fee4] [decimal] (18, 0) NULL,
[fee5] [decimal] (18, 0) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_loan] [bigint] NULL,
[FK_rowid_extacct] [bigint] NULL,
[FK_rowid_txns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanadv] on [dbo].[loanadv]'
GO
ALTER TABLE [dbo].[loanadv] ADD CONSTRAINT [PK_loanadv] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanadv_advdate] on [dbo].[loanadv]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_loanadv_advdate] ON [dbo].[loanadv] ([FK_rowid_loan], [advdate], [rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[agency_claim]'
GO
CREATE TABLE [dbo].[agency_claim]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[claimdate] [datetime] NULL,
[claimamount] [dbo].[balance] NULL,
[comment1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comment2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[charge_from_date] [datetime] NULL,
[charge_to_date] [datetime] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_encashment] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_agency_claim] on [dbo].[agency_claim]'
GO
ALTER TABLE [dbo].[agency_claim] ADD CONSTRAINT [PK_agency_claim] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_agency_claim_identifier] on [dbo].[agency_claim]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_agency_claim_identifier] ON [dbo].[agency_claim] ([FK_rowid_encashment], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[agency_claim_c]'
GO
CREATE TABLE [dbo].[agency_claim_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_agency_claim] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_agency_claim_c] on [dbo].[agency_claim_c]'
GO
ALTER TABLE [dbo].[agency_claim_c] ADD CONSTRAINT [PK_agency_claim_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_agency_claim_c] on [dbo].[agency_claim_c]'
GO
CREATE NONCLUSTERED INDEX [IX_agency_claim_c] ON [dbo].[agency_claim_c] ([FK_rowid_agency_claim], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[encashment]'
GO
CREATE TABLE [dbo].[encashment]
(
[rowid] [bigint] NOT NULL,
[IDnumber] [int] NULL,
[combinedsignatures] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[subbranch] [int] NULL,
[telephone] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[terms] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[arrangement1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[arrangement2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[arrangement3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[arrangement4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[expire] [datetime] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contact] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[preferred] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ownerbank] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[branchname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[claim_charge] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_call] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_encashment] on [dbo].[encashment]'
GO
ALTER TABLE [dbo].[encashment] ADD CONSTRAINT [PK_encashment] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_encashment_IDnumber] on [dbo].[encashment]'
GO
CREATE NONCLUSTERED INDEX [IX_encashment_IDnumber] ON [dbo].[encashment] ([FK_rowid_call], [IDnumber])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_ruleset]'
GO
CREATE TABLE [dbo].[aml_ruleset]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_ruleset] on [dbo].[aml_ruleset]'
GO
ALTER TABLE [dbo].[aml_ruleset] ADD CONSTRAINT [PK_aml_ruleset] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_ruleset_id] on [dbo].[aml_ruleset]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_ruleset_id] ON [dbo].[aml_ruleset] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_condition]'
GO
CREATE TABLE [dbo].[aml_condition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_aml_ruleset] [bigint] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_condition] on [dbo].[aml_condition]'
GO
ALTER TABLE [dbo].[aml_condition] ADD CONSTRAINT [PK_aml_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_condition_FK_rowid_condition] on [dbo].[aml_condition]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_condition_FK_rowid_condition] ON [dbo].[aml_condition] ([FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_condition_c]'
GO
CREATE TABLE [dbo].[aml_condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_aml_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_condition_c] on [dbo].[aml_condition_c]'
GO
ALTER TABLE [dbo].[aml_condition_c] ADD CONSTRAINT [PK_aml_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_condition_c] on [dbo].[aml_condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_condition_c] ON [dbo].[aml_condition_c] ([FK_rowid_aml_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[condition]'
GO
CREATE TABLE [dbo].[condition]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[openbrackets1] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[lefttable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula1] [int] NULL,
[operator1] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit1] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring1] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint1] [int] NULL,
[rightvaluebigint1] [bigint] NULL,
[rightvaluedecimal1] [decimal] (18, 5) NULL,
[rightvaluedatetime1] [datetime] NULL,
[rightvariable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula1] [int] NULL,
[closebrackets1] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[join1] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[openbrackets2] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[lefttable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula2] [int] NULL,
[operator2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit2] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring2] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint2] [int] NULL,
[rightvaluebigint2] [bigint] NULL,
[rightvaluedecimal2] [decimal] (18, 5) NULL,
[rightvaluedatetime2] [datetime] NULL,
[rightvariable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula2] [int] NULL,
[closebrackets2] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[join2] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[openbrackets3] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[lefttable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula3] [int] NULL,
[operator3] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit3] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring3] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint3] [int] NULL,
[rightvaluebigint3] [bigint] NULL,
[rightvaluedecimal3] [decimal] (18, 5) NULL,
[rightvaluedatetime3] [datetime] NULL,
[rightvariable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula3] [int] NULL,
[closebrackets3] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[join3] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[openbrackets4] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[lefttable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula4] [int] NULL,
[operator4] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit4] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring4] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint4] [int] NULL,
[rightvaluebigint4] [bigint] NULL,
[rightvaluedecimal4] [decimal] (18, 5) NULL,
[rightvaluedatetime4] [datetime] NULL,
[rightvariable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula4] [int] NULL,
[closebrackets4] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[join4] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[openbrackets5] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[lefttable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula5] [int] NULL,
[operator5] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit5] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring5] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint5] [int] NULL,
[rightvaluebigint5] [bigint] NULL,
[rightvaluedecimal5] [decimal] (18, 5) NULL,
[rightvaluedatetime5] [datetime] NULL,
[rightvariable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula5] [int] NULL,
[closebrackets5] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[join5] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[openbrackets6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leftdbexplicit6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[lefttable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftfield6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftvariable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[leftformula6] [int] NULL,
[operator6] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[rightdbexplicit6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[righttable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightfield6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightvaluestring6] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rightvalueint6] [int] NULL,
[rightvaluebigint6] [bigint] NULL,
[rightvaluedecimal6] [decimal] (18, 5) NULL,
[rightvaluedatetime6] [datetime] NULL,
[rightvariable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rightformula6] [int] NULL,
[closebrackets6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[function_no] [int] NULL,
[work_buffer] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[work_type1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[work_type1_or] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_type2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[work_template_period] [int] NULL,
[work_template_freq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[work_template_id1] [int] NULL,
[work_template_or1] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_template_id2] [int] NULL,
[work_template_or2] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_template_id3] [int] NULL,
[work_template_or3] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_template_id4] [int] NULL,
[work_template_or4] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_template_id5] [int] NULL,
[work_template_or5] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[work_template_id6] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_condition] on [dbo].[condition]'
GO
ALTER TABLE [dbo].[condition] ADD CONSTRAINT [PK_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[condition]'
GO
ALTER TABLE [dbo].[condition] ADD CONSTRAINT [IX_condition_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_rule]'
GO
CREATE TABLE [dbo].[aml_rule]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[txn_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[txn_sign] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[txn_type2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[txn_sign2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[value] [dbo].[balance] NULL,
[amount] [dbo].[balance] NULL,
[volume] [int] NULL,
[number] [int] NULL,
[days] [int] NULL,
[months] [int] NULL,
[volume_value] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[acct_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[acct_type2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[address_telephone] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[rule_mode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[report_workflow] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[percentage] [decimal] (4, 1) NULL,
[country] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[work_template1] [int] NULL,
[work_amount1] [dbo].[balance] NULL,
[work_days1] [int] NULL,
[work_currencies1] [int] NULL,
[work_percentage1] [decimal] (4, 1) NULL,
[work_accounts1] [int] NULL,
[work_changes1] [int] NULL,
[work_priority1] [int] NULL,
[work_difference1] [int] NULL,
[work_transactions1] [int] NULL,
[work_template2] [int] NULL,
[work_amount2] [dbo].[balance] NULL,
[work_days2] [int] NULL,
[work_currencies2] [int] NULL,
[work_percentage2] [decimal] (4, 1) NULL,
[work_accounts2] [int] NULL,
[work_changes2] [int] NULL,
[work_priority2] [int] NULL,
[work_difference2] [int] NULL,
[work_transactions2] [int] NULL,
[work_template3] [int] NULL,
[work_amount3] [dbo].[balance] NULL,
[work_days3] [int] NULL,
[work_currencies3] [int] NULL,
[work_percentage3] [decimal] (4, 1) NULL,
[work_accounts3] [int] NULL,
[work_changes3] [int] NULL,
[work_priority3] [int] NULL,
[work_difference3] [int] NULL,
[work_transactions3] [int] NULL,
[work_template4] [int] NULL,
[work_amount4] [dbo].[balance] NULL,
[work_days4] [int] NULL,
[work_currencies4] [int] NULL,
[work_percentage4] [decimal] (4, 1) NULL,
[work_accounts4] [int] NULL,
[work_changes4] [int] NULL,
[work_priority4] [int] NULL,
[work_difference4] [int] NULL,
[work_transactions4] [int] NULL,
[status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_aml_ruleset] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_rule] on [dbo].[aml_rule]'
GO
ALTER TABLE [dbo].[aml_rule] ADD CONSTRAINT [PK_aml_rule] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_rule_c]'
GO
CREATE TABLE [dbo].[aml_rule_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_aml_rule] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_rule_c] on [dbo].[aml_rule_c]'
GO
ALTER TABLE [dbo].[aml_rule_c] ADD CONSTRAINT [PK_aml_rule_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_rule_c] on [dbo].[aml_rule_c]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_rule_c] ON [dbo].[aml_rule_c] ([FK_rowid_aml_rule], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_rule_log]'
GO
CREATE TABLE [dbo].[aml_rule_log]
(
[rowid] [bigint] NOT NULL,
[txnrow1] [bigint] NULL,
[txnrow2] [bigint] NULL,
[txnamount1] [dbo].[balance] NULL,
[txnamount2] [dbo].[balance] NULL,
[txndate1] [datetime] NULL,
[txndate2] [datetime] NULL,
[rule_amount] [dbo].[balance] NULL,
[rule_percent] [decimal] (4, 1) NULL,
[rule_days] [int] NULL,
[acctrow1] [bigint] NULL,
[acctrow2] [bigint] NULL,
[peoplerow1] [bigint] NULL,
[peoplerow2] [bigint] NULL,
[nonpersrow1] [bigint] NULL,
[nonpersrow2] [bigint] NULL,
[work_item_row] [bigint] NULL,
[work_item_priority] [int] NULL,
[breach_date] [datetime] NULL,
[customer_description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[account_description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[actual_number] [bigint] NULL,
[actual_volume_value] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[actual_months] [int] NULL,
[actual_average_this_month] [dbo].[balance] NULL,
[actual_average_prev_months] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_aml_rule] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_rule_log] on [dbo].[aml_rule_log]'
GO
ALTER TABLE [dbo].[aml_rule_log] ADD CONSTRAINT [PK_aml_rule_log] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_rule_log_c]'
GO
CREATE TABLE [dbo].[aml_rule_log_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_aml_rule_log] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_rule_log_c] on [dbo].[aml_rule_log_c]'
GO
ALTER TABLE [dbo].[aml_rule_log_c] ADD CONSTRAINT [PK_aml_rule_log_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_rule_log_c] on [dbo].[aml_rule_log_c]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_rule_log_c] ON [dbo].[aml_rule_log_c] ([FK_rowid_aml_rule_log], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[aml_ruleset_c]'
GO
CREATE TABLE [dbo].[aml_ruleset_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_aml_ruleset] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_aml_ruleset_c] on [dbo].[aml_ruleset_c]'
GO
ALTER TABLE [dbo].[aml_ruleset_c] ADD CONSTRAINT [PK_aml_ruleset_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_aml_ruleset_c] on [dbo].[aml_ruleset_c]'
GO
CREATE NONCLUSTERED INDEX [IX_aml_ruleset_c] ON [dbo].[aml_ruleset_c] ([FK_rowid_aml_ruleset], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[appl]'
GO
CREATE TABLE [dbo].[appl]
(
[rowid] [bigint] NOT NULL,
[application_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[applicant_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[personal_banker] [int] NULL,
[sales_officer] [int] NULL,
[crint_gross] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[tax_free_product] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createbookdate] [datetime] NULL,
[reasonopened] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[product_id] [dbo].[product_id] NULL,
[amount] [dbo].[balance] NULL,
[purpose_code] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[regulator_purpose] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[funds_received] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[kyc_checked] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[application_forms_requested] [int] NULL,
[R85_forms_requested] [int] NULL,
[R105_forms_requested] [int] NULL,
[multiple_drawdowns] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[multiple_repayments] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regulator_regulated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cca_regulated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[interest_retained] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[syndicated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[syndicated_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[syndicated_pcent] [decimal] (5, 3) NULL,
[participant_id] [bigint] NULL,
[proceeding] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[not_proceeding_reason] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[min_term] [int] NULL,
[min_termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[estimated_advance_date] [datetime] NULL,
[estimated_final_payment_date] [datetime] NULL,
[net_loan_advance] [dbo].[balance] NULL,
[term] [int] NULL,
[termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[payment_day] [int] NULL,
[final_payment_day] [int] NULL,
[rate] [decimal] (8, 6) NULL,
[rate_basis] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[institution_solicitor_fee] [dbo].[balance] NULL,
[arrangement_fee_pcent] [decimal] (5, 3) NULL,
[arrangement_fee_explicit] [dbo].[balance] NULL,
[redemption_fee_pcent] [decimal] (5, 3) NULL,
[redemption_fee_explicit] [dbo].[balance] NULL,
[redemption_fee] [dbo].[balance] NULL,
[deeds_release_fee] [dbo].[balance] NULL,
[redemption_solicitor_fee] [dbo].[balance] NULL,
[broker_commission_pcent] [decimal] (5, 3) NULL,
[broker_commission_explicit] [dbo].[balance] NULL,
[broker_fee_pcent] [decimal] (5, 3) NULL,
[broker_fee_explicit] [dbo].[balance] NULL,
[broker_fee_funded] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[surveyor_fees] [dbo].[balance] NULL,
[admin_fee] [dbo].[balance] NULL,
[other_fees] [dbo].[balance] NULL,
[valuation_fee] [dbo].[balance] NULL,
[other_costs] [dbo].[balance] NULL,
[title_insurance] [dbo].[balance] NULL,
[broker_commission] [dbo].[balance] NULL,
[gross_loan_day1] [dbo].[balance] NULL,
[rounded_gross_loan_day1] [dbo].[balance] NULL,
[arrangement_fee] [dbo].[balance] NULL,
[broker_fee] [dbo].[balance] NULL,
[adjusted_net_loan] [dbo].[balance] NULL,
[interest_over_term] [dbo].[balance] NULL,
[minimum_interest_chargeable] [dbo].[balance] NULL,
[first_period_interest] [dbo].[balance] NULL,
[interest_final_min_term_period] [dbo].[balance] NULL,
[gross_facility] [dbo].[balance] NULL,
[gross_facility_increment] [dbo].[balance] NULL,
[interest_per_month] [dbo].[balance] NULL,
[gross_institution_income] [dbo].[balance] NULL,
[institution_profit_percentage] [dbo].[balance] NULL,
[site_cost] [dbo].[balance] NULL,
[construction_cost] [dbo].[balance] NULL,
[professional_fees] [dbo].[balance] NULL,
[interest] [dbo].[balance] NULL,
[expected_sales_proceeds] [dbo].[balance] NULL,
[expected_site_value] [dbo].[balance] NULL,
[initial_commitment_to_value] [dbo].[balance] NULL,
[end_commitment_to_value] [dbo].[balance] NULL,
[rate_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[rate_floor] [decimal] (8, 6) NULL,
[rate_cap] [decimal] (8, 6) NULL,
[drint_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_day] [int] NULL,
[cost_of_funds] [decimal] (5, 3) NULL,
[margin_over_cost_of_funds] [dbo].[balance] NULL,
[apr] [decimal] (7, 1) NULL,
[irr] [decimal] (8, 2) NULL,
[arr] [decimal] (8, 2) NULL,
[mlar_code] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[risk_weighting_figure] [decimal] (5, 2) NULL,
[loanelement1_amount] [dbo].[balance] NULL,
[loanelement2_amount] [dbo].[balance] NULL,
[loanelement3_amount] [dbo].[balance] NULL,
[loanelement4_amount] [dbo].[balance] NULL,
[loanelement5_amount] [dbo].[balance] NULL,
[loanelement6_amount] [dbo].[balance] NULL,
[loanelement7_amount] [dbo].[balance] NULL,
[loanelement8_amount] [dbo].[balance] NULL,
[loan_to_value] [decimal] (9, 2) NULL,
[owner1_id] [bigint] NULL,
[owner1_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[owner2_id] [bigint] NULL,
[owner2_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[owner3_id] [bigint] NULL,
[owner3_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[owner4_id] [bigint] NULL,
[owner4_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor1_id] [bigint] NULL,
[guarantor1_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor1_amount] [dbo].[balance] NULL,
[guarantor2_id] [bigint] NULL,
[guarantor2_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor2_amount] [dbo].[balance] NULL,
[guarantor3_id] [bigint] NULL,
[guarantor3_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor3_amount] [dbo].[balance] NULL,
[guarantor4_id] [bigint] NULL,
[guarantor4_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor4_amount] [dbo].[balance] NULL,
[guarantor5_id] [bigint] NULL,
[guarantor5_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor5_amount] [dbo].[balance] NULL,
[guarantor6_id] [bigint] NULL,
[guarantor6_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor6_amount] [dbo].[balance] NULL,
[guarantor7_id] [bigint] NULL,
[guarantor7_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor7_amount] [dbo].[balance] NULL,
[guarantor8_id] [bigint] NULL,
[guarantor8_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[guarantor8_amount] [dbo].[balance] NULL,
[signer1_id] [bigint] NULL,
[signer2_id] [bigint] NULL,
[signer3_id] [bigint] NULL,
[signer4_id] [bigint] NULL,
[signer5_id] [bigint] NULL,
[signer6_id] [bigint] NULL,
[signer7_id] [bigint] NULL,
[signer8_id] [bigint] NULL,
[valuer_id] [bigint] NULL,
[valuerfirm_id] [bigint] NULL,
[masterbroker_id] [bigint] NULL,
[masterbrokerfirm_id] [bigint] NULL,
[subbroker_id] [bigint] NULL,
[subbrokerfirm_id] [bigint] NULL,
[inhousesolicitor_id] [bigint] NULL,
[inhousesolicitorfirm_id] [bigint] NULL,
[solicitor_id] [bigint] NULL,
[solicitorfirm_id] [bigint] NULL,
[surveyor_id] [bigint] NULL,
[surveyorfirm_id] [bigint] NULL,
[security1_id] [bigint] NULL,
[security1_value] [dbo].[balance] NULL,
[security1_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security1_outstanding] [dbo].[balance] NULL,
[security1_loantovalue] [decimal] (9, 2) NULL,
[security1_gross_facility] [dbo].[balance] NULL,
[security1_rate_to_apply] [decimal] (8, 6) NULL,
[security1_net_loan] [dbo].[balance] NULL,
[security1_valuation_cost] [dbo].[balance] NULL,
[security2_id] [bigint] NULL,
[security2_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security2_value] [dbo].[balance] NULL,
[security2_outstanding] [dbo].[balance] NULL,
[security2_loantovalue] [decimal] (9, 2) NULL,
[security2_gross_facility] [dbo].[balance] NULL,
[security2_rate_to_apply] [decimal] (8, 6) NULL,
[security2_net_loan] [dbo].[balance] NULL,
[security2_valuation_cost] [dbo].[balance] NULL,
[security3_id] [bigint] NULL,
[security3_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security3_value] [dbo].[balance] NULL,
[security3_outstanding] [dbo].[balance] NULL,
[security3_loantovalue] [decimal] (9, 2) NULL,
[security3_gross_facility] [dbo].[balance] NULL,
[security3_rate_to_apply] [decimal] (8, 6) NULL,
[security3_net_loan] [dbo].[balance] NULL,
[security3_valuation_cost] [dbo].[balance] NULL,
[security4_id] [bigint] NULL,
[security4_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security4_value] [dbo].[balance] NULL,
[security4_outstanding] [dbo].[balance] NULL,
[security4_loantovalue] [decimal] (9, 2) NULL,
[security4_gross_facility] [dbo].[balance] NULL,
[security4_rate_to_apply] [decimal] (8, 6) NULL,
[security4_net_loan] [dbo].[balance] NULL,
[security4_valuation_cost] [dbo].[balance] NULL,
[security5_id] [bigint] NULL,
[security5_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security5_value] [dbo].[balance] NULL,
[security5_outstanding] [dbo].[balance] NULL,
[security5_loantovalue] [decimal] (9, 2) NULL,
[security5_gross_facility] [dbo].[balance] NULL,
[security5_rate_to_apply] [decimal] (8, 6) NULL,
[security5_net_loan] [dbo].[balance] NULL,
[security5_valuation_cost] [dbo].[balance] NULL,
[security6_id] [bigint] NULL,
[security6_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security6_value] [dbo].[balance] NULL,
[security6_outstanding] [dbo].[balance] NULL,
[security6_loantovalue] [decimal] (9, 2) NULL,
[security6_gross_facility] [dbo].[balance] NULL,
[security6_rate_to_apply] [decimal] (8, 6) NULL,
[security6_net_loan] [dbo].[balance] NULL,
[security6_valuation_cost] [dbo].[balance] NULL,
[security7_id] [bigint] NULL,
[security7_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security7_value] [dbo].[balance] NULL,
[security7_outstanding] [dbo].[balance] NULL,
[security7_loantovalue] [decimal] (9, 2) NULL,
[security7_gross_facility] [dbo].[balance] NULL,
[security7_rate_to_apply] [decimal] (8, 6) NULL,
[security7_net_loan] [dbo].[balance] NULL,
[security7_valuation_cost] [dbo].[balance] NULL,
[security8_id] [bigint] NULL,
[security8_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[security8_value] [dbo].[balance] NULL,
[security8_outstanding] [dbo].[balance] NULL,
[security8_loantovalue] [decimal] (9, 2) NULL,
[security8_gross_facility] [dbo].[balance] NULL,
[security8_rate_to_apply] [decimal] (8, 6) NULL,
[security8_net_loan] [dbo].[balance] NULL,
[security8_valuation_cost] [dbo].[balance] NULL,
[securitytotal_value] [dbo].[balance] NULL,
[securitytotal_outstanding] [dbo].[balance] NULL,
[securitytotal_loantovalue] [decimal] (9, 2) NULL,
[securitytotal_gross_facility] [dbo].[balance] NULL,
[securitytotal_rate_to_apply] [decimal] (8, 6) NULL,
[securitytotal_net_loan] [dbo].[balance] NULL,
[securitytotal_valuation_cost] [dbo].[balance] NULL,
[rental_per_month] [dbo].[balance] NULL,
[mortgage_rate] [decimal] (8, 6) NULL,
[cover] [decimal] (9, 3) NULL,
[mortgage_of] [dbo].[balance] NULL,
[title] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[gender] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[surname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[midname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[business_name] [varchar] (75) COLLATE Latin1_General_CI_AS NULL,
[dobday] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[dobmonth] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dobyear] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[dob] [datetime] NULL,
[forename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[homephone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[mobilephone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[workphone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[fax] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[emailaddress] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[emailaddressconfirm] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[ni_number] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[driving_license_number] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[driving_license_postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[driving_license_valid_from] [datetime] NULL,
[passport_number1] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[passport_number2] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[passport_expiry] [datetime] NULL,
[occupation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[birth_country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[nationality] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[joint_title] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[joint_gender] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[joint_surname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_midname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_dobday] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_dobmonth] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[joint_dobyear] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[joint_dob] [datetime] NULL,
[joint_forename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_homephone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_mobilephone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_workphone] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_fax] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_emailaddress] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[joint_emailaddressconfirm] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[joint_ni_number] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_driving_license_number] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_driving_license_postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[joint_driving_license_valid_from] [datetime] NULL,
[joint_passport_number1] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[joint_passport_number2] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[joint_passport_expiry] [datetime] NULL,
[joint_occupation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_birth_country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_nationality] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[houseno] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[contactaddressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactsalutation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactline1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactline3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactline4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactcountry] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contactpostcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[yearsataddress] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[monthsataddress] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_houseno] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[joint_contactaddressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactsalutation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactline1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactline3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactline4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactcountry] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_contactpostcode] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_yearsataddress] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[joint_monthsataddress] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[prev_houseno] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[prev_contactline1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_contactline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_contactline3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_contactline4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_contactcountry] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prev_contactpostcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[prev_date_moved_from] [datetime] NULL,
[prev_yearsataddress] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[prev_monthsataddress] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_houseno] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_postcode] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactline1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactline3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactline4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactcountry] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_contactpostcode] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_yearsataddress] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_monthsataddress] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_prev_date_moved_from] [datetime] NULL,
[contact_details_checked] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[sortcode1] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[sortcode2] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[sortcode3] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[sortcodeint] [int] NULL,
[accno] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[accnoint] [bigint] NULL,
[bank_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_ownerbank] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_line6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bank_postcode] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[joint_sortcode1] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_sortcode2] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_sortcode3] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[joint_sortcodeint] [int] NULL,
[joint_accno] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[joint_accnoint] [bigint] NULL,
[joint_bank_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_ownerbank] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_line6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_bank_postcode] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[online_kyc_result] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[joint_online_kyc_result] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[interest_pay_away] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[signing_arrangements] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[duplicate_statements] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[marketing_info] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[opening_balance] [dbo].[balance] NULL,
[status] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[password] [varbinary] (256) NULL,
[reference] [bigint] NULL,
[adverse_credit_history] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[region_code] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[internet_originated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_appl] on [dbo].[appl]'
GO
ALTER TABLE [dbo].[appl] ADD CONSTRAINT [PK_appl] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_emailaddress] on [dbo].[appl]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_emailaddress] ON [dbo].[appl] ([emailaddress], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_FK_rowid_acct] on [dbo].[appl]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_FK_rowid_acct] ON [dbo].[appl] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_reference] on [dbo].[appl]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_reference] ON [dbo].[appl] ([reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[appl_c]'
GO
CREATE TABLE [dbo].[appl_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_appl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_appl_c] on [dbo].[appl_c]'
GO
ALTER TABLE [dbo].[appl_c] ADD CONSTRAINT [PK_appl_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_c] on [dbo].[appl_c]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_c] ON [dbo].[appl_c] ([FK_rowid_appl], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[appl_default]'
GO
CREATE TABLE [dbo].[appl_default]
(
[rowid] [bigint] NOT NULL,
[application_type] [varchar] (50) COLLATE Latin1_General_CI_AS NOT NULL,
[status] [varchar] (30) COLLATE Latin1_General_CI_AS NOT NULL,
[multiple_drawdowns] [varchar] (3) COLLATE Latin1_General_CI_AS NOT NULL,
[multiple_repayments] [varchar] (3) COLLATE Latin1_General_CI_AS NOT NULL,
[regulator_regulated] [varchar] (3) COLLATE Latin1_General_CI_AS NOT NULL,
[cca_regulated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[interest_retained] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[syndicated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payment_day] [int] NULL,
[final_payment_day] [int] NULL,
[redemption_solicitor_fee] [dbo].[balance] NULL,
[deeds_release_fee] [dbo].[balance] NULL,
[admin_fee] [dbo].[balance] NULL,
[min_term] [int] NULL,
[min_termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[broker_commission_pcent] [decimal] (5, 3) NULL,
[broker_commission_explicit] [dbo].[balance] NULL,
[broker_fee_pcent] [decimal] (5, 3) NULL,
[broker_fee_explicit] [dbo].[balance] NULL,
[rate_basis] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rate] [decimal] (8, 6) NULL,
[institution_solicitor_fee] [dbo].[balance] NULL,
[title_insurance] [dbo].[balance] NULL,
[other_fees] [dbo].[balance] NULL,
[other_costs] [dbo].[balance] NULL,
[term] [int] NULL,
[termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[arrangement_fee_pcent] [decimal] (5, 3) NULL,
[arrangement_fee_explicit] [dbo].[balance] NULL,
[redemption_fee_pcent] [decimal] (5, 3) NULL,
[redemption_fee_explicit] [dbo].[balance] NULL,
[valuation_fee] [dbo].[balance] NULL,
[surveyor_fees] [dbo].[balance] NULL,
[rate_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[rate_floor] [decimal] (8, 6) NULL,
[rate_cap] [decimal] (8, 6) NULL,
[drint_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_appl_default] on [dbo].[appl_default]'
GO
ALTER TABLE [dbo].[appl_default] ADD CONSTRAINT [PK_appl_default] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_default_application_type] on [dbo].[appl_default]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_default_application_type] ON [dbo].[appl_default] ([application_type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[appl_default_c]'
GO
CREATE TABLE [dbo].[appl_default_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_appl_default] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_appl_default_c] on [dbo].[appl_default_c]'
GO
ALTER TABLE [dbo].[appl_default_c] ADD CONSTRAINT [PK_appl_default_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_appl_default_c] on [dbo].[appl_default_c]'
GO
CREATE NONCLUSTERED INDEX [IX_appl_default_c] ON [dbo].[appl_default_c] ([FK_rowid_appl_default], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[arucsouthdr]'
GO
CREATE TABLE [dbo].[arucsouthdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[totamount] [dbo].[balance] NULL,
[tottxns] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_arucsouthdr] on [dbo].[arucsouthdr]'
GO
ALTER TABLE [dbo].[arucsouthdr] ADD CONSTRAINT [PK_arucsouthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_arucsouthdr_submission] on [dbo].[arucsouthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_arucsouthdr_submission] ON [dbo].[arucsouthdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[arucsouttxn]'
GO
CREATE TABLE [dbo].[arucsouttxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[remittersortcode] [int] NULL,
[remitteracctno] [bigint] NULL,
[remitterbic] [dbo].[bic] NULL,
[remitteriban] [dbo].[iban] NULL,
[payeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[amount] [dbo].[balance] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[returncode] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[letter] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[overdrawn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_arucsouthdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_arucsouttxn] on [dbo].[arucsouttxn]'
GO
ALTER TABLE [dbo].[arucsouttxn] ADD CONSTRAINT [PK_arucsouttxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_arucsouttxn_identifier] on [dbo].[arucsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_arucsouttxn_identifier] ON [dbo].[arucsouttxn] ([FK_rowid_arucsouthdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_arucsouttxn_FK_rowid_txns] on [dbo].[arucsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_arucsouttxn_FK_rowid_txns] ON [dbo].[arucsouttxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[arucsouttxn_c]'
GO
CREATE TABLE [dbo].[arucsouttxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_arucsouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_arucsouttxn_c] on [dbo].[arucsouttxn_c]'
GO
ALTER TABLE [dbo].[arucsouttxn_c] ADD CONSTRAINT [PK_arucsouttxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_arucsouttxn_c] on [dbo].[arucsouttxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_arucsouttxn_c] ON [dbo].[arucsouttxn_c] ([FK_rowid_arucsouttxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txns]'
GO
CREATE TABLE [dbo].[txns]
(
[rowid] [bigint] NOT NULL,
[trandate] [datetime] NULL,
[postdate] [datetime] NULL,
[posttime] [datetime] NULL,
[voiddate] [datetime] NULL,
[voidtime] [datetime] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[txnconv] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[bookamt] [dbo].[balance] NULL,
[valamt] [dbo].[balance] NULL,
[clramt] [dbo].[balance] NULL,
[desc1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc3] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc4] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc5] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[serialno] [bigint] NULL,
[book] [bigint] NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[tfrsortcode] [int] NULL,
[tfraccno] [bigint] NULL,
[tfrsub] [int] NULL,
[tfrbic] [dbo].[bic] NULL,
[tfriban] [dbo].[iban] NULL,
[tfracctitle] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[tfracctbeneficiary] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[tfrpayeetype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[txnccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bookccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[exchrate] [decimal] (12, 6) NULL,
[txnamt] [dbo].[balance] NULL,
[txnamt_previoustaxyear] [dbo].[balance] NULL,
[txnamt_currenttaxyear] [dbo].[balance] NULL,
[vat_rate] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[post_sortcode] [int] NULL,
[txflags] [bigint] NULL,
[sequence] [bigint] NOT NULL,
[empl] [int] NULL,
[emplvoid] [int] NULL,
[emplauth] [int] NULL,
[authdate] [datetime] NULL,
[authtime] [datetime] NULL,
[emplauth2] [int] NULL,
[authdate2] [datetime] NULL,
[authtime2] [datetime] NULL,
[emplret] [int] NULL,
[origtrandate] [datetime] NULL,
[FK_rowid_acct] [bigint] NOT NULL,
[FK_rowid_loanred] [bigint] NULL,
[migration] [varchar] (20) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txns] on [dbo].[txns]'
GO
ALTER TABLE [dbo].[txns] ADD CONSTRAINT [PK_txns] PRIMARY KEY NONCLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txns_trandate] on [dbo].[txns]'
GO
CREATE NONCLUSTERED INDEX [IX_txns_trandate] ON [dbo].[txns] ([FK_rowid_acct], [trandate], [sequence]) INCLUDE ([bookamt], [bookccy], [clramt], [empl], [postdate], [posttime], [reference], [serialno], [source], [txflags], [txnccy], [txnclrcode], [txncode], [valamt], [voiddate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txns_migration] on [dbo].[txns]'
GO
CREATE NONCLUSTERED INDEX [IX_txns_migration] ON [dbo].[txns] ([migration])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisinhdr]'
GO
CREATE TABLE [dbo].[auddisinhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[serviceuserno] [int] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[tottxns] [int] NULL,
[totposted] [int] NULL,
[totrejected] [int] NULL,
[toterrored] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[firstaosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[lastaosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processing_service] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisinhdr] on [dbo].[auddisinhdr]'
GO
ALTER TABLE [dbo].[auddisinhdr] ADD CONSTRAINT [PK_auddisinhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisinhdr_filename] on [dbo].[auddisinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisinhdr_filename] ON [dbo].[auddisinhdr] ([FK_rowid_model], [filename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisinhdr_submission] on [dbo].[auddisinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisinhdr_submission] ON [dbo].[auddisinhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisintxn]'
GO
CREATE TABLE [dbo].[auddisintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[newpayersortcode] [int] NULL,
[newpayeracctno] [bigint] NULL,
[newpayertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[originatorsortcode] [int] NULL,
[originatoracctno] [bigint] NULL,
[originatortitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[advicenote] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (24) COLLATE Latin1_General_CI_AS NULL,
[effectivedate] [datetime] NULL,
[aosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[rejectreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_auddisinhdr] [bigint] NOT NULL,
[FK_rowid_ddiout] [bigint] NULL,
[FK_rowid_addacsouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisintxn] on [dbo].[auddisintxn]'
GO
ALTER TABLE [dbo].[auddisintxn] ADD CONSTRAINT [PK_auddisintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisintxn_identifier] on [dbo].[auddisintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisintxn_identifier] ON [dbo].[auddisintxn] ([FK_rowid_auddisinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisouthdr]'
GO
CREATE TABLE [dbo].[auddisouthdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[serviceuserno] [int] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisouthdr] on [dbo].[auddisouthdr]'
GO
ALTER TABLE [dbo].[auddisouthdr] ADD CONSTRAINT [PK_auddisouthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisouthdr_status] on [dbo].[auddisouthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisouthdr_status] ON [dbo].[auddisouthdr] ([FK_rowid_model], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisouthdr_submission] on [dbo].[auddisouthdr]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_auddisouthdr_submission] ON [dbo].[auddisouthdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisouttxn]'
GO
CREATE TABLE [dbo].[auddisouttxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[payeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_auddisouthdr] [bigint] NOT NULL,
[FK_rowid_ddiin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisouttxn] on [dbo].[auddisouttxn]'
GO
ALTER TABLE [dbo].[auddisouttxn] ADD CONSTRAINT [PK_auddisouttxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisouttxn_identifier] on [dbo].[auddisouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisouttxn_identifier] ON [dbo].[auddisouttxn] ([FK_rowid_auddisouthdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisouttxn_c]'
GO
CREATE TABLE [dbo].[auddisouttxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_auddisouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisouttxn_c] on [dbo].[auddisouttxn_c]'
GO
ALTER TABLE [dbo].[auddisouttxn_c] ADD CONSTRAINT [PK_auddisouttxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisouttxn_c] on [dbo].[auddisouttxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisouttxn_c] ON [dbo].[auddisouttxn_c] ([FK_rowid_auddisouttxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisrethdr]'
GO
CREATE TABLE [dbo].[auddisrethdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisrethdr] on [dbo].[auddisrethdr]'
GO
ALTER TABLE [dbo].[auddisrethdr] ADD CONSTRAINT [PK_auddisrethdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisrethdr_submission] on [dbo].[auddisrethdr]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisrethdr_submission] ON [dbo].[auddisrethdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisretintxn]'
GO
CREATE TABLE [dbo].[auddisretintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[originatorsortcode] [int] NULL,
[originatoracctno] [bigint] NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[newpayersortcode] [int] NULL,
[newpayeracctno] [bigint] NULL,
[advicenote] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[processdate] [datetime] NULL,
[effectivedate] [datetime] NULL,
[aosn] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_auddisretinhdr] [bigint] NOT NULL,
[FK_rowid_ddiin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisretintxn] on [dbo].[auddisretintxn]'
GO
ALTER TABLE [dbo].[auddisretintxn] ADD CONSTRAINT [PK_auddisretintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisretintxn_identifier] on [dbo].[auddisretintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisretintxn_identifier] ON [dbo].[auddisretintxn] ([FK_rowid_auddisretinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisretintxn_c]'
GO
CREATE TABLE [dbo].[auddisretintxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_auddisretintxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisretintxn_c] on [dbo].[auddisretintxn_c]'
GO
ALTER TABLE [dbo].[auddisretintxn_c] ADD CONSTRAINT [PK_auddisretintxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisretintxn_c] on [dbo].[auddisretintxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisretintxn_c] ON [dbo].[auddisretintxn_c] ([FK_rowid_auddisretintxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisrettxn]'
GO
CREATE TABLE [dbo].[auddisrettxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[newpayersortcode] [int] NULL,
[newpayeracctno] [bigint] NULL,
[bacsprocess] [datetime] NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[payeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[advicenote] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_auddisrethdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisrettxn] on [dbo].[auddisrettxn]'
GO
ALTER TABLE [dbo].[auddisrettxn] ADD CONSTRAINT [PK_auddisrettxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisrettxn_identifier] on [dbo].[auddisrettxn]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisrettxn_identifier] ON [dbo].[auddisrettxn] ([FK_rowid_auddisrethdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[auddisrettxn_c]'
GO
CREATE TABLE [dbo].[auddisrettxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_auddisrettxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_auddisrettxn_c] on [dbo].[auddisrettxn_c]'
GO
ALTER TABLE [dbo].[auddisrettxn_c] ADD CONSTRAINT [PK_auddisrettxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_auddisrettxn_c] on [dbo].[auddisrettxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_auddisrettxn_c] ON [dbo].[auddisrettxn_c] ([FK_rowid_auddisrettxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[audit]'
GO
CREATE TABLE [dbo].[audit]
(
[rowid] [bigint] NOT NULL,
[yearend_day] [int] NULL,
[yearend_month] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[authority_date] [datetime] NULL,
[authority_allow] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[audit_cycle] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[audit_every] [int] NULL,
[audit_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[audit_day] [int] NULL,
[audit_next] [datetime] NULL,
[audit_prev] [datetime] NULL,
[adhoc_date] [datetime] NULL,
[allow_charge] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_sortcode] [int] NULL,
[charge_accno] [bigint] NULL,
[charge_accsub] [int] NULL,
[invoice] [int] NULL,
[auditor_name] [varchar] (70) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_audit] on [dbo].[audit]'
GO
ALTER TABLE [dbo].[audit] ADD CONSTRAINT [PK_audit] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_audit_FKcontact] on [dbo].[audit]'
GO
CREATE NONCLUSTERED INDEX [IX_audit_FKcontact] ON [dbo].[audit] ([FK_rowid_contact])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_audit_FKnonpers] on [dbo].[audit]'
GO
CREATE NONCLUSTERED INDEX [IX_audit_FKnonpers] ON [dbo].[audit] ([FK_rowid_nonpers])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[audit_c]'
GO
CREATE TABLE [dbo].[audit_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_audit] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_audit_c] on [dbo].[audit_c]'
GO
ALTER TABLE [dbo].[audit_c] ADD CONSTRAINT [PK_audit_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_audit_c] on [dbo].[audit_c]'
GO
CREATE NONCLUSTERED INDEX [IX_audit_c] ON [dbo].[audit_c] ([FK_rowid_audit], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[nonpers]'
GO
CREATE TABLE [dbo].[nonpers]
(
[rowid] [bigint] NOT NULL,
[IDno] [bigint] NULL,
[name] [varchar] (75) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[boesector] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[boeindustry] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[siccode] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[vatno] [varchar] (11) COLLATE Latin1_General_CI_AS NULL,
[registered] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regno] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[founded] [datetime] NULL,
[incorporated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mediumrisk_docs_date] [datetime] NULL,
[directors] [int] NULL,
[constitution_date] [datetime] NULL,
[rules_date] [datetime] NULL,
[memo_articles_date] [datetime] NULL,
[cert_incorp_date] [datetime] NULL,
[cert_incorp_country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[country_ultimate_risk] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[master_agreement_date] [datetime] NULL,
[search_complete_date] [datetime] NULL,
[kyc_complete_date] [datetime] NULL,
[telephone_application_received] [datetime] NULL,
[internet_application_requested] [datetime] NULL,
[level1] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[level2] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[level3] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[level4] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[bustype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[legal_status] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[marketmail] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[marketphone] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[law_society_id_no] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[indemnity_insurance_company_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[indemnity_policy_no] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[indemnity_expiry_date] [datetime] NULL,
[indemnity_level_of_cover] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[indemnity_comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[stopfeeoverride] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stopfeeoverrideamount] [dbo].[balance] NULL,
[personal_banker] [int] NULL,
[sales_officer] [int] NULL,
[generalreview] [datetime] NULL,
[creditreview] [datetime] NULL,
[costingreview] [datetime] NULL,
[reasonopened] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[reasonclosed] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[internet_txn_limit] [dbo].[balance] NULL,
[internet_daily_txn_limit] [dbo].[balance] NULL,
[internet_daily_txn_limit_used] [dbo].[balance] NULL,
[internet_daily_txn_limit_used_date] [datetime] NULL,
[internet_custom_download] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[fsmatchdate] [datetime] NULL,
[fsexcludedate] [datetime] NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[fscs_exclusiontype] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[fscsturnover] [dbo].[balance] NULL,
[fscsbalancesheet] [dbo].[balance] NULL,
[fscsemployee] [int] NULL,
[fscs_status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[regulator_category] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[website] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[watchlist_match_date] [datetime] NULL,
[watchlist_match] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mergeddate] [datetime] NULL,
[mergedto] [bigint] NULL,
[mergedfrom] [bigint] NULL,
[alert_message] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[bulk_uploads] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bulk_payment_files_processed] [int] NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[adhoc_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[application_received] [datetime] NULL,
[acknowledgement_received_date] [datetime] NULL,
[internet_application_received] [datetime] NULL,
[internet_application_status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[lendingsector] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[activity1] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[activity2] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[activity3] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[activity4] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[activity5] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[closedtransfer] [int] NULL,
[bacslimit] [decimal] (10, 0) NULL,
[bacsfreq] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[visalimit] [decimal] (10, 0) NULL,
[vip] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[foreign_acc] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[kyc_verified_date] [datetime] NULL,
[kyc_risk] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[borrow] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[aggregable_contingent] [dbo].[balance] NULL,
[non_aggregable_contingent] [dbo].[balance] NULL,
[covenant_type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[documented_covenant_pcent] [decimal] (5, 2) NULL,
[actual_covenant_pcent] [decimal] (5, 2) NULL,
[covenant_met] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[last_covenant_test_date] [datetime] NULL,
[next_covenant_test_date] [datetime] NULL,
[latest_mi_received_date] [datetime] NULL,
[next_mi_date] [datetime] NULL,
[latest_acc_audit_date] [datetime] NULL,
[next_acc_audit_date] [datetime] NULL,
[latest_projections_received_date] [datetime] NULL,
[next_projections_date] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_nonpers] on [dbo].[nonpers]'
GO
ALTER TABLE [dbo].[nonpers] ADD CONSTRAINT [PK_nonpers] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_nonpers_IDno] on [dbo].[nonpers]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_nonpers_IDno] ON [dbo].[nonpers] ([IDno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_nonpers_levels] on [dbo].[nonpers]'
GO
CREATE NONCLUSTERED INDEX [IX_nonpers_levels] ON [dbo].[nonpers] ([level1], [level2], [level3], [level4], [IDno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_nonpers_name] on [dbo].[nonpers]'
GO
CREATE NONCLUSTERED INDEX [IX_nonpers_name] ON [dbo].[nonpers] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[audititem]'
GO
CREATE TABLE [dbo].[audititem]
(
[rowid] [bigint] NOT NULL,
[itemtype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_audit] [bigint] NOT NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_audititem] on [dbo].[audititem]'
GO
ALTER TABLE [dbo].[audititem] ADD CONSTRAINT [PK_audititem] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_audititem_FKaudit] on [dbo].[audititem]'
GO
CREATE NONCLUSTERED INDEX [IX_audititem_FKaudit] ON [dbo].[audititem] ([FK_rowid_audit])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[audititem_c]'
GO
CREATE TABLE [dbo].[audititem_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_audititem] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_audititem_c] on [dbo].[audititem_c]'
GO
ALTER TABLE [dbo].[audititem_c] ADD CONSTRAINT [PK_audititem_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_audititem_c] on [dbo].[audititem_c]'
GO
CREATE NONCLUSTERED INDEX [IX_audititem_c] ON [dbo].[audititem_c] ([FK_rowid_audititem], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[securities]'
GO
CREATE TABLE [dbo].[securities]
(
[rowid] [bigint] NOT NULL,
[IDno] [bigint] NOT NULL,
[description] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuation] [dbo].[balance] NULL,
[valuation_date] [datetime] NULL,
[valuation_source] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[date_of_charge] [datetime] NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[third_party_debt] [dbo].[balance] NULL,
[third_party_debt_date] [datetime] NULL,
[status] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[othertype] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[dateofcharge] [datetime] NULL,
[givenby] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[basis] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[wdvalue] [dbo].[balance] NULL,
[margin] [decimal] (4, 1) NULL,
[linkcustomer1] [bigint] NULL,
[linkcustomer2] [bigint] NULL,
[linkcustomer3] [bigint] NULL,
[linkcustomer4] [bigint] NULL,
[linkcustomer5] [bigint] NULL,
[linkcustomer6] [bigint] NULL,
[heldsecurity1] [bigint] NULL,
[heldsecurity2] [bigint] NULL,
[heldsecurity3] [bigint] NULL,
[heldsecurity4] [bigint] NULL,
[heldsecurity5] [bigint] NULL,
[heldsecurity6] [bigint] NULL,
[completedby] [int] NULL,
[datecompleted] [datetime] NULL,
[completedcheckedby] [int] NULL,
[completeddatechecked] [datetime] NULL,
[dischargedby] [int] NULL,
[datedischarged] [datetime] NULL,
[dischargedcheckedby] [int] NULL,
[dischargeddatechecked] [datetime] NULL,
[region] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[marketvalue1] [dbo].[balance] NULL,
[marketvalue2] [dbo].[balance] NULL,
[marketvalue3] [dbo].[balance] NULL,
[securityindex] [decimal] (6, 2) NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_securities] on [dbo].[securities]'
GO
ALTER TABLE [dbo].[securities] ADD CONSTRAINT [PK_securities] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_securities_IDno] on [dbo].[securities]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_securities_IDno] ON [dbo].[securities] ([IDno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[autopyin]'
GO
CREATE TABLE [dbo].[autopyin]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[id] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[accname] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[comments1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[lastpostdate] [datetime] NULL,
[lastpostamount] [dbo].[balance] NULL,
[FK_rowid_ibnkuser_submitter] [bigint] NULL,
[ibnksubmitteddate] [datetime] NULL,
[ibnksubmittedtime] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser] [bigint] NULL,
[ibnkauthoriseddate] [datetime] NULL,
[ibnkauthorisedtime] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser2] [bigint] NULL,
[ibnkauthoriseddate2] [datetime] NULL,
[ibnkauthorisedtime2] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[fpsamlexempt] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_autopyin] on [dbo].[autopyin]'
GO
ALTER TABLE [dbo].[autopyin] ADD CONSTRAINT [PK_autopyin] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopyin_id] on [dbo].[autopyin]'
GO
CREATE NONCLUSTERED INDEX [IX_autopyin_id] ON [dbo].[autopyin] ([FK_rowid_people], [FK_rowid_nonpers], [id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopyin_identifier] on [dbo].[autopyin]'
GO
CREATE NONCLUSTERED INDEX [IX_autopyin_identifier] ON [dbo].[autopyin] ([FK_rowid_people], [FK_rowid_nonpers], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopyin_accno_sortcode_FKnonpers] on [dbo].[autopyin]'
GO
CREATE NONCLUSTERED INDEX [IX_autopyin_accno_sortcode_FKnonpers] ON [dbo].[autopyin] ([FK_rowid_nonpers], [status], [accno], [sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopyin_accno_sortcode_FKpeople] on [dbo].[autopyin]'
GO
CREATE NONCLUSTERED INDEX [IX_autopyin_accno_sortcode_FKpeople] ON [dbo].[autopyin] ([FK_rowid_people], [status], [accno], [sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[autopyin_c]'
GO
CREATE TABLE [dbo].[autopyin_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_autopyin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_autopyin_c] on [dbo].[autopyin_c]'
GO
ALTER TABLE [dbo].[autopyin_c] ADD CONSTRAINT [PK_autopyin_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopyin_c] on [dbo].[autopyin_c]'
GO
CREATE NONCLUSTERED INDEX [IX_autopyin_c] ON [dbo].[autopyin_c] ([FK_rowid_autopyin], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[people]'
GO
CREATE TABLE [dbo].[people]
(
[rowid] [bigint] NOT NULL,
[IDno] [bigint] NULL,
[type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[surname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[usualname] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[midnames] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[initials] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[formername] [varchar] (75) COLLATE Latin1_General_CI_AS NULL,
[suffix] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[birthdate] [datetime] NULL,
[deathdate] [datetime] NULL,
[gender] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[married] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[noofdeps] [int] NULL,
[NInumber] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[nationality] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[domicile] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[countryofbirth] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[placeofbirth] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[hometype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[legal_status] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[boesector] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[boeindustry] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[allow_contact_mail] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_contact_phone] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_contact_email] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[marketmail] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[marketphone] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[marketemail] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[country_ultimate_risk] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[kyc_complete_date] [datetime] NULL,
[risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[vip] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[personal_banker] [int] NULL,
[sales_officer] [int] NULL,
[generalreview] [datetime] NULL,
[creditreview] [datetime] NULL,
[costingreview] [datetime] NULL,
[reasonopened] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[reasonclosed] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[stopfeeoverride] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stopfeeoverrideamount] [dbo].[balance] NULL,
[cardpintype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[fscs_status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[fscs_exclusiontype] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_exemption] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[broker_regulator_registration_no] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[broker_status] [varchar] (14) COLLATE Latin1_General_CI_AS NULL,
[broker_basis_for_authorisation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[law_society_id_no] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[fsmatchdate] [datetime] NULL,
[fsexcludedate] [datetime] NULL,
[watchlist_match_date] [datetime] NULL,
[watchlist_match] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mergeddate] [datetime] NULL,
[mergedto] [bigint] NULL,
[mergedfrom] [bigint] NULL,
[alert_message] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[adhoc_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[twofa_method] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[application_received] [datetime] NULL,
[acknowledgement_received] [datetime] NULL,
[lendingsector] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[activity] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closedtransfer] [int] NULL,
[kyc_verified_date] [datetime] NULL,
[kyc_risk] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pep] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[latest_mi_received_date] [datetime] NULL,
[next_mi_date] [datetime] NULL,
[latest_acc_audit_date] [datetime] NULL,
[next_acc_audit_date] [datetime] NULL,
[latest_projections_received_date] [datetime] NULL,
[next_projections_date] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_people] on [dbo].[people]'
GO
ALTER TABLE [dbo].[people] ADD CONSTRAINT [PK_people] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_people_IDno] on [dbo].[people]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_people_IDno] ON [dbo].[people] ([IDno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_people_NInumber] on [dbo].[people]'
GO
CREATE NONCLUSTERED INDEX [IX_people_NInumber] ON [dbo].[people] ([NInumber])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_people_surname] on [dbo].[people]'
GO
CREATE NONCLUSTERED INDEX [IX_people_surname] ON [dbo].[people] ([surname])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[autopymt]'
GO
CREATE TABLE [dbo].[autopymt]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[autotype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[onhold] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allowod] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[scheduled_startdate] [datetime] NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[accsub] [int] NULL,
[acctitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[immamount] [decimal] (18, 2) NULL,
[immdate] [datetime] NULL,
[numpymts] [int] NULL,
[every] [int] NULL,
[freq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[day] [int] NULL,
[nextdate] [datetime] NULL,
[scheduled_nextdate] [datetime] NULL,
[amount] [decimal] (18, 2) NULL,
[finalamount] [decimal] (18, 2) NULL,
[lastpaymentdate] [datetime] NULL,
[lastpaymenttime] [datetime] NULL,
[expirydate] [datetime] NULL,
[comments1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments3] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments4] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[sweepusing] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[sweeptrig] [decimal] (18, 2) NULL,
[sweepmul] [decimal] (18, 2) NULL,
[sweepmin] [decimal] (18, 2) NULL,
[sweepmax] [decimal] (18, 2) NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_ibnkuser_submitter] [bigint] NULL,
[ibnk_submit_date] [datetime] NULL,
[ibnk_submit_time] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser] [bigint] NULL,
[ibnk_authorise_date] [datetime] NULL,
[ibnk_authorise_time] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser2] [bigint] NULL,
[ibnk_authorise_date2] [datetime] NULL,
[ibnk_authorise_time2] [datetime] NULL,
[FK_rowid_ibnkuser_canceller] [bigint] NULL,
[ibnk_cancelled_date] [datetime] NULL,
[ibnk_cancelled_time] [datetime] NULL,
[autopyinrowid] [bigint] NULL,
[billpaymentibnktxnsrow] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[fpsamlexempt] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[flags] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_autopymt] on [dbo].[autopymt]'
GO
ALTER TABLE [dbo].[autopymt] ADD CONSTRAINT [PK_autopymt] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopymt_autotype] on [dbo].[autopymt]'
GO
CREATE NONCLUSTERED INDEX [IX_autopymt_autotype] ON [dbo].[autopymt] ([FK_rowid_acct], [autotype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopymt_identifier] on [dbo].[autopymt]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_autopymt_identifier] ON [dbo].[autopymt] ([FK_rowid_acct], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopymt_destination] on [dbo].[autopymt]'
GO
CREATE NONCLUSTERED INDEX [IX_autopymt_destination] ON [dbo].[autopymt] ([FK_rowid_acct], [sortcode], [accno], [reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopymt_lastpaymentdate] on [dbo].[autopymt]'
GO
CREATE NONCLUSTERED INDEX [IX_autopymt_lastpaymentdate] ON [dbo].[autopymt] ([lastpaymentdate], [lastpaymenttime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[autopymt_c]'
GO
CREATE TABLE [dbo].[autopymt_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_autopymt] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_autopymt_c] on [dbo].[autopymt_c]'
GO
ALTER TABLE [dbo].[autopymt_c] ADD CONSTRAINT [PK_autopymt_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_autopymt_c] on [dbo].[autopymt_c]'
GO
CREATE NONCLUSTERED INDEX [IX_autopymt_c] ON [dbo].[autopymt_c] ([FK_rowid_autopymt], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[awacsouthdr]'
GO
CREATE TABLE [dbo].[awacsouthdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_awacsouthdr] on [dbo].[awacsouthdr]'
GO
ALTER TABLE [dbo].[awacsouthdr] ADD CONSTRAINT [PK_awacsouthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_awacsouthdr_submission] on [dbo].[awacsouthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_awacsouthdr_submission] ON [dbo].[awacsouthdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[awacsouttxn]'
GO
CREATE TABLE [dbo].[awacsouttxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[newpayeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[newpayeesortcode] [int] NULL,
[newpayeeacctno] [bigint] NULL,
[newrollno] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[postdate] [datetime] NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[remittersortcode] [int] NULL,
[remitteracctno] [bigint] NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[resubmitted] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_awacsouthdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_awacsouttxn] on [dbo].[awacsouttxn]'
GO
ALTER TABLE [dbo].[awacsouttxn] ADD CONSTRAINT [PK_awacsouttxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_awacsouttxn_identifier] on [dbo].[awacsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_awacsouttxn_identifier] ON [dbo].[awacsouttxn] ([FK_rowid_awacsouthdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_awacsouttxn_FK_rowid_txns] on [dbo].[awacsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_awacsouttxn_FK_rowid_txns] ON [dbo].[awacsouttxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[awacsouttxn_c]'
GO
CREATE TABLE [dbo].[awacsouttxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_awacsouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_awacsouttxn_c] on [dbo].[awacsouttxn_c]'
GO
ALTER TABLE [dbo].[awacsouttxn_c] ADD CONSTRAINT [PK_awacsouttxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_awacsouttxn_c] on [dbo].[awacsouttxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_awacsouttxn_c] ON [dbo].[awacsouttxn_c] ([FK_rowid_awacsouttxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsacct]'
GO
CREATE TABLE [dbo].[bacsacct]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[sortcodeto] [int] NULL,
[sequence] [int] NULL,
[algorithm] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[weightu] [int] NULL,
[weightv] [int] NULL,
[weightw] [int] NULL,
[weightx] [int] NULL,
[weighty] [int] NULL,
[weightz] [int] NULL,
[weighta] [int] NULL,
[weightb] [int] NULL,
[weightc] [int] NULL,
[weightd] [int] NULL,
[weighte] [int] NULL,
[weightf] [int] NULL,
[weightg] [int] NULL,
[weighth] [int] NULL,
[exception] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsacct] on [dbo].[bacsacct]'
GO
ALTER TABLE [dbo].[bacsacct] ADD CONSTRAINT [PK_bacsacct] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsacct_sortcode] on [dbo].[bacsacct]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsacct_sortcode] ON [dbo].[bacsacct] ([sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsacct_lookup] on [dbo].[bacsacct]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsacct_lookup] ON [dbo].[bacsacct] ([sortcode], [sortcodeto], [sequence], [algorithm])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsacct_c]'
GO
CREATE TABLE [dbo].[bacsacct_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bacsacct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsacct_c] on [dbo].[bacsacct_c]'
GO
ALTER TABLE [dbo].[bacsacct_c] ADD CONSTRAINT [PK_bacsacct_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsacct_c] on [dbo].[bacsacct_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsacct_c] ON [dbo].[bacsacct_c] ([FK_rowid_bacsacct], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsconfig]'
GO
CREATE TABLE [dbo].[bacsconfig]
(
[rowid] [bigint] NOT NULL,
[service] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[direction] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[bureauno] [int] NULL,
[submissioncentre] [int] NULL,
[multiday] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[header] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[trailer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[tottxns] [bigint] NULL,
[maxamount] [dbo].[balance] NULL,
[serialno] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[invalid_character] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[contra] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[payertitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payeetitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[cutofftime] [datetime] NULL,
[emailsender] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[emailsupport] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[emailreport] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[inbound_folder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[inbound_filter] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[outbound_folder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[monitor_folder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[monitor_filter] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[monitor_starttime] [datetime] NULL,
[monitor_endtime] [datetime] NULL,
[email_process] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[email_error] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[email_include_report] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[email_include_extract] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[copy_folder_report] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[copy_folder_extract] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[processtype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[processstarttime] [datetime] NULL,
[processfinishtime] [datetime] NULL,
[processevery] [int] NULL,
[processcutoffevery] [int] NULL,
[processtime1] [datetime] NULL,
[processcutofftime1] [datetime] NULL,
[processtime2] [datetime] NULL,
[processcutofftime2] [datetime] NULL,
[processtime3] [datetime] NULL,
[processcutofftime3] [datetime] NULL,
[processtime4] [datetime] NULL,
[processcutofftime4] [datetime] NULL,
[processnextcutofftime] [datetime] NULL,
[processnextcutoffdate] [datetime] NULL,
[processnexttime] [datetime] NULL,
[processnextdate] [datetime] NULL,
[processlastdate] [datetime] NULL,
[processlasttime] [datetime] NULL,
[inboundfile] [int] NULL,
[inboundtime] [datetime] NULL,
[inbounddate] [datetime] NULL,
[inbound_posting_period] [int] NULL,
[inbound_duplicate_file_period] [int] NULL,
[swift_service_identifier] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[swift_receiver_address] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[posting_source] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NOT NULL,
[outboundamlreportnextdate1] [datetime] NULL,
[outboundamlreportnextdate2] [datetime] NULL,
[inboundhourdate] [datetime] NULL,
[inboundhourtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsconfig] on [dbo].[bacsconfig]'
GO
ALTER TABLE [dbo].[bacsconfig] ADD CONSTRAINT [PK_bacsconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsconfig_serviceuserno] on [dbo].[bacsconfig]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsconfig_serviceuserno] ON [dbo].[bacsconfig] ([FK_rowid_model], [direction], [service], [serviceuserno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsconfig_service] on [dbo].[bacsconfig]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsconfig_service] ON [dbo].[bacsconfig] ([FK_rowid_model], [service], [direction])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsconfig_c]'
GO
CREATE TABLE [dbo].[bacsconfig_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bacsconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsconfig_c] on [dbo].[bacsconfig_c]'
GO
ALTER TABLE [dbo].[bacsconfig_c] ADD CONSTRAINT [PK_bacsconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsinhdr]'
GO
CREATE TABLE [dbo].[bacsinhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacscreate] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[bacssequence] [int] NULL,
[tottxnscr] [int] NULL,
[totamountcr] [dbo].[balance] NULL,
[tottxnsdr] [int] NULL,
[totamountdr] [dbo].[balance] NULL,
[tottxns] [int] NULL,
[totposted] [int] NULL,
[toterrored] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processing_service] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsinhdr] on [dbo].[bacsinhdr]'
GO
ALTER TABLE [dbo].[bacsinhdr] ADD CONSTRAINT [PK_bacsinhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsinhdr_filename] on [dbo].[bacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsinhdr_filename] ON [dbo].[bacsinhdr] ([FK_rowid_model], [filename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsinhdr_bacssequence] on [dbo].[bacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsinhdr_bacssequence] ON [dbo].[bacsinhdr] ([FK_rowid_model], [submissiondate], [bacssequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsinhdr_currency] on [dbo].[bacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsinhdr_currency] ON [dbo].[bacsinhdr] ([FK_rowid_model], [submissiondate], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsinhdr_submission] on [dbo].[bacsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsinhdr_submission] ON [dbo].[bacsinhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsinhdr_c]'
GO
CREATE TABLE [dbo].[bacsinhdr_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bacsinhdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsinhdr_c] on [dbo].[bacsinhdr_c]'
GO
ALTER TABLE [dbo].[bacsinhdr_c] ADD CONSTRAINT [PK_bacsinhdr_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsinhdr_c] on [dbo].[bacsinhdr_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsinhdr_c] ON [dbo].[bacsinhdr_c] ([FK_rowid_bacsinhdr], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsintxn]'
GO
CREATE TABLE [dbo].[bacsintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[destinationsortcode] [int] NULL,
[destinationacctno] [bigint] NULL,
[destinationtitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[originatorsortcode] [int] NULL,
[originatoracctno] [bigint] NULL,
[originatortitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[amount] [dbo].[balance] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[bacserror] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[bacsserialno] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[bacsreference] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[trandate] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[referredsortcode] [int] NULL,
[referredacctno] [bigint] NULL,
[postreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[postreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtimed] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_bacsinhdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_ddiout] [bigint] NULL,
[substsortcode] [int] NULL,
[substacctno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsintxn] on [dbo].[bacsintxn]'
GO
ALTER TABLE [dbo].[bacsintxn] ADD CONSTRAINT [PK_bacsintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsintxn_identifier] on [dbo].[bacsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsintxn_identifier] ON [dbo].[bacsintxn] ([FK_rowid_bacsinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsintxn_FKddiout] on [dbo].[bacsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsintxn_FKddiout] ON [dbo].[bacsintxn] ([FK_rowid_ddiout])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsintxn_FKtxns] on [dbo].[bacsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsintxn_FKtxns] ON [dbo].[bacsintxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacsintxn_c]'
GO
CREATE TABLE [dbo].[bacsintxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bacsintxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacsintxn_c] on [dbo].[bacsintxn_c]'
GO
ALTER TABLE [dbo].[bacsintxn_c] ADD CONSTRAINT [PK_bacsintxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacsintxn_c] on [dbo].[bacsintxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bacsintxn_c] ON [dbo].[bacsintxn_c] ([FK_rowid_bacsintxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacssort]'
GO
CREATE TABLE [dbo].[bacssort]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[substsortcode] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacssort] on [dbo].[bacssort]'
GO
ALTER TABLE [dbo].[bacssort] ADD CONSTRAINT [PK_bacssort] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacssort_sortcode] on [dbo].[bacssort]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_bacssort_sortcode] ON [dbo].[bacssort] ([sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacssort_c]'
GO
CREATE TABLE [dbo].[bacssort_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bacssort] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacssort_c] on [dbo].[bacssort_c]'
GO
ALTER TABLE [dbo].[bacssort_c] ADD CONSTRAINT [PK_bacssort_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacssort_c] on [dbo].[bacssort_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bacssort_c] ON [dbo].[bacssort_c] ([FK_rowid_bacssort], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bacstxnhdr]'
GO
CREATE TABLE [dbo].[bacstxnhdr]
(
[rowid] [bigint] NOT NULL,
[bureaunum] [int] NULL,
[usernum] [int] NULL,
[expirydate] [datetime] NULL,
[bacsprocdate] [datetime] NULL,
[nooftxns] [int] NULL,
[totcreditamount] [decimal] (21, 0) NULL,
[totnumcredits] [int] NULL,
[totdebitamount] [decimal] (21, 0) NULL,
[totnumdebits] [int] NULL,
[datefileproduced] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bacstxnhdr] on [dbo].[bacstxnhdr]'
GO
ALTER TABLE [dbo].[bacstxnhdr] ADD CONSTRAINT [PK_bacstxnhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bacstxnhdr_status] on [dbo].[bacstxnhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_bacstxnhdr_status] ON [dbo].[bacstxnhdr] ([FK_rowid_model], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bank]'
GO
CREATE TABLE [dbo].[bank]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[bicbank] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[bicbranch] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[subbranch] [int] NULL,
[title] [varchar] (27) COLLATE Latin1_General_CI_AS NULL,
[ownershort] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ownerbank] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[ownercode] [int] NULL,
[countrycode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[superbody] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[secondentry] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[secondname] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[title1] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[title2] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[title3] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline1] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline2] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline3] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline4] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline5] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[addrline6] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[zipcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[phone] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[fax] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ddiflag] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[drdisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[crdisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[cudisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[prdisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[bsdisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[dvdisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[audisallow] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[chapsreturn] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[chapsstatus] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[chapschanged] [datetime] NULL,
[chapsclosed] [datetime] NULL,
[chapssettle] [int] NULL,
[chapsroute1] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[chapsroute2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chapsestatus] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[chapsechanged] [datetime] NULL,
[chapseclosed] [datetime] NULL,
[chapseroute1] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[chapseroute2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chapsesettle] [int] NULL,
[chapsereturn] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[chapseswift] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[cheqstatus] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[cheqchanged] [datetime] NULL,
[cheqclosed] [datetime] NULL,
[cheqsettle] [int] NULL,
[cheqagency] [int] NULL,
[cheqreturn] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[printind] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[bacsstatus] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[bacschanged] [datetime] NULL,
[bacsclosed] [datetime] NULL,
[redirectflag] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[redirectcode] [int] NULL,
[bacssettle] [int] NULL,
[bacssection] [int] NULL,
[bacssub] [int] NULL,
[bacshandle] [int] NULL,
[bacsstream] [int] NULL,
[accnumbered] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[brtype] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[mainbrsortcode] [int] NULL,
[major] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[minor] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[deleted] [datetime] NULL,
[changed] [datetime] NULL,
[created] [datetime] NULL,
[fpstatus] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[fpaccountnumbersflag] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[fpchanged] [datetime] NULL,
[fpclosed] [datetime] NULL,
[fpredirectflag] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[fpredirectcode] [int] NULL,
[fpsettlecode] [int] NULL,
[fpsettleconn] [int] NULL,
[fphandlecode] [int] NULL,
[fphandleconn] [int] NULL,
[fpagencytype] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bank] on [dbo].[bank]'
GO
ALTER TABLE [dbo].[bank] ADD CONSTRAINT [PK_bank] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bank_bic] on [dbo].[bank]'
GO
CREATE NONCLUSTERED INDEX [IX_bank_bic] ON [dbo].[bank] ([bicbank], [bicbranch])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bank_ownershort_name] on [dbo].[bank]'
GO
CREATE NONCLUSTERED INDEX [IX_bank_ownershort_name] ON [dbo].[bank] ([ownershort], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bank_ownershort_title1] on [dbo].[bank]'
GO
CREATE NONCLUSTERED INDEX [IX_bank_ownershort_title1] ON [dbo].[bank] ([ownershort], [title1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bank_sortcode] on [dbo].[bank]'
GO
CREATE NONCLUSTERED INDEX [IX_bank_sortcode] ON [dbo].[bank] ([sortcode], [subbranch])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bank_c]'
GO
CREATE TABLE [dbo].[bank_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bank] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bank_c] on [dbo].[bank_c]'
GO
ALTER TABLE [dbo].[bank_c] ADD CONSTRAINT [PK_bank_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bank_c] on [dbo].[bank_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bank_c] ON [dbo].[bank_c] ([FK_rowid_bank], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[base]'
GO
CREATE TABLE [dbo].[base]
(
[rowid] [bigint] NOT NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[allow_zero] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_base] on [dbo].[base]'
GO
ALTER TABLE [dbo].[base] ADD CONSTRAINT [PK_base] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[base]'
GO
ALTER TABLE [dbo].[base] ADD CONSTRAINT [IX_base_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[base_c]'
GO
CREATE TABLE [dbo].[base_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_base] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_base_c] on [dbo].[base_c]'
GO
ALTER TABLE [dbo].[base_c] ADD CONSTRAINT [PK_base_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_base_c] on [dbo].[base_c]'
GO
CREATE NONCLUSTERED INDEX [IX_base_c] ON [dbo].[base_c] ([FK_rowid_base], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[baserate]'
GO
CREATE TABLE [dbo].[baserate]
(
[rowid] [bigint] NOT NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[rate] [decimal] (8, 6) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowno_base] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_baserate] on [dbo].[baserate]'
GO
ALTER TABLE [dbo].[baserate] ADD CONSTRAINT [PK_baserate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[baserate]'
GO
ALTER TABLE [dbo].[baserate] ADD CONSTRAINT [IX_baserate_id] UNIQUE NONCLUSTERED  ([id], [startdate], [nextdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[baserate_c]'
GO
CREATE TABLE [dbo].[baserate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_baserate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_baserate_c] on [dbo].[baserate_c]'
GO
ALTER TABLE [dbo].[baserate_c] ADD CONSTRAINT [PK_baserate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_baserate_c] on [dbo].[baserate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_baserate_c] ON [dbo].[baserate_c] ([FK_rowid_baserate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[batch]'
GO
CREATE TABLE [dbo].[batch]
(
[rowid] [bigint] NOT NULL,
[id] [datetime] NULL,
[num] [int] NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[bookdate] [datetime] NULL,
[desc1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[cramt] [decimal] (12, 2) NULL,
[crnum] [int] NULL,
[dramt] [decimal] (12, 2) NULL,
[drnum] [int] NULL,
[totamt] [decimal] (12, 2) NULL,
[totnum] [int] NULL,
[dual] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dualtype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[dualid] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[prev_status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[posted] [int] NULL,
[errored] [int] NULL,
[voided] [int] NULL,
[filename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_batch] on [dbo].[batch]'
GO
ALTER TABLE [dbo].[batch] ADD CONSTRAINT [PK_batch] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[batch]'
GO
ALTER TABLE [dbo].[batch] ADD CONSTRAINT [IX_batch_id] UNIQUE NONCLUSTERED  ([id] DESC, [type], [num])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[batch_c]'
GO
CREATE TABLE [dbo].[batch_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_batch] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_batch_c] on [dbo].[batch_c]'
GO
ALTER TABLE [dbo].[batch_c] ADD CONSTRAINT [PK_batch_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_batch_c] on [dbo].[batch_c]'
GO
CREATE NONCLUSTERED INDEX [IX_batch_c] ON [dbo].[batch_c] ([FK_rowid_batch], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[batchtxns]'
GO
CREATE TABLE [dbo].[batchtxns]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[bookamt] [decimal] (12, 2) NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serialno] [bigint] NULL,
[desc1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[desc3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[desc4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[desc5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (127) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[sub] [int] NULL,
[rejreason] [varchar] (127) COLLATE Latin1_General_CI_AS NULL,
[rejcode] [int] NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[product] [bigint] NULL,
[allow_excess] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ddioutrowid] [bigint] NULL,
[acctrowid] [bigint] NULL,
[txnrowid] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_batch] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_batchtxns] on [dbo].[batchtxns]'
GO
ALTER TABLE [dbo].[batchtxns] ADD CONSTRAINT [PK_batchtxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_batchtxns_id] on [dbo].[batchtxns]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_batchtxns_id] ON [dbo].[batchtxns] ([FK_rowid_batch], [id]) INCLUDE ([accno], [bookamt], [rowid], [sortcode], [status], [txncode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_batchtxns_acct] on [dbo].[batchtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_batchtxns_acct] ON [dbo].[batchtxns] ([FK_rowid_batch], [sortcode], [accno], [sub], [id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_batchtxns_txnrowid] on [dbo].[batchtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_batchtxns_txnrowid] ON [dbo].[batchtxns] ([txnrowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[batchtxns_c]'
GO
CREATE TABLE [dbo].[batchtxns_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_batchtxns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_batchtxns_c] on [dbo].[batchtxns_c]'
GO
ALTER TABLE [dbo].[batchtxns_c] ADD CONSTRAINT [PK_batchtxns_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_batchtxns_c] on [dbo].[batchtxns_c]'
GO
CREATE NONCLUSTERED INDEX [IX_batchtxns_c] ON [dbo].[batchtxns_c] ([FK_rowid_batchtxns], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[book]'
GO
CREATE TABLE [dbo].[book]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[useaccname] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[name1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[name2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[style] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[pages] [int] NULL,
[quantity] [int] NULL,
[used] [int] NULL,
[usedchart] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[serialmethod] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[serialno] [bigint] NULL,
[serialnoto] [bigint] NULL,
[automated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[reorder_completed] [int] NULL,
[reorder_afterposition] [int] NULL,
[reorder_pos1] [int] NULL,
[reorder_pos2] [int] NULL,
[reorder_pos3] [int] NULL,
[reorder_pos4] [int] NULL,
[reordered] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[senddirect] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[comments1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments3] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments4] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[statusdate] [datetime] NULL,
[orderdate] [datetime] NULL,
[ordertime] [datetime] NULL,
[sentdate] [datetime] NULL,
[crossed] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ibnk_submitted] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ibnk_submit_date] [datetime] NULL,
[ibnk_submit_time] [datetime] NULL,
[ibnk_authorised] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ibnk_authorise_date] [datetime] NULL,
[ibnk_authorise_time] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NOT NULL,
[FK_rowid_contact] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_book] on [dbo].[book]'
GO
ALTER TABLE [dbo].[book] ADD CONSTRAINT [PK_book] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_book_type] on [dbo].[book]'
GO
CREATE NONCLUSTERED INDEX [IX_book_type] ON [dbo].[book] ([FK_rowid_acct], [type], [serialmethod], [serialnoto], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_book_FKcontact] on [dbo].[book]'
GO
CREATE NONCLUSTERED INDEX [IX_book_FKcontact] ON [dbo].[book] ([FK_rowid_contact])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[book_c]'
GO
CREATE TABLE [dbo].[book_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_book] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_book_c] on [dbo].[book_c]'
GO
ALTER TABLE [dbo].[book_c] ADD CONSTRAINT [PK_book_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_book_c] on [dbo].[book_c]'
GO
CREATE NONCLUSTERED INDEX [IX_book_c] ON [dbo].[book_c] ([FK_rowid_book], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bookdef]'
GO
CREATE TABLE [dbo].[bookdef]
(
[rowid] [bigint] NOT NULL,
[style] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pages] [int] NULL,
[completed] [int] NULL,
[afterposition] [int] NULL,
[pos1] [int] NULL,
[pos2] [int] NULL,
[pos3] [int] NULL,
[pos4] [int] NULL,
[third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crossed] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bookdef] on [dbo].[bookdef]'
GO
ALTER TABLE [dbo].[bookdef] ADD CONSTRAINT [PK_bookdef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookdef_style] on [dbo].[bookdef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_bookdef_style] ON [dbo].[bookdef] ([style])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookdef_sequence] on [dbo].[bookdef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_bookdef_sequence] ON [dbo].[bookdef] ([type], [style])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[bookdef_c]'
GO
CREATE TABLE [dbo].[bookdef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_bookdef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_bookdef_c] on [dbo].[bookdef_c]'
GO
ALTER TABLE [dbo].[bookdef_c] ADD CONSTRAINT [PK_bookdef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookdef_c] on [dbo].[bookdef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_bookdef_c] ON [dbo].[bookdef_c] ([FK_rowid_bookdef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[brokerfirm]'
GO
CREATE TABLE [dbo].[brokerfirm]
(
[rowid] [bigint] NOT NULL,
[brokerage_cca_licence_no] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[brokerage_cca_licence_expiry] [datetime] NULL,
[brokerage_dpa_licence_number] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[brokerage_dpa_licence_expiry] [datetime] NULL,
[brokerage_regulator_registration_no] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[brokerage_authorisation_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[brokerage_representative_of] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[brokerage_trade_body_membership_1] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[brokerage_broker_type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[brokerage_commission_rate] [decimal] (4, 2) NULL,
[brokerage_commission_end_date] [datetime] NULL,
[brokerage_commission_agreed_with] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_status] [varchar] (14) COLLATE Latin1_General_CI_AS NULL,
[brokerage_review_date] [datetime] NULL,
[brokerage_basis_for_authorisation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_NACFB_member] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[brokerage_business_area_10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[broker_completions_pa_1] [int] NULL,
[broker_completions_pa_2] [int] NULL,
[broker_completions_pa_3] [int] NULL,
[broker_completions_pa_4] [int] NULL,
[broker_completions_pa_5] [int] NULL,
[broker_completions_pa_6] [int] NULL,
[broker_completions_pa_7] [int] NULL,
[broker_completions_pa_8] [int] NULL,
[broker_completions_pa_9] [int] NULL,
[broker_completions_pa_10] [int] NULL,
[business_transacted_1] [dbo].[balance] NULL,
[business_transacted_2] [dbo].[balance] NULL,
[business_transacted_3] [dbo].[balance] NULL,
[business_transacted_4] [dbo].[balance] NULL,
[business_transacted_5] [dbo].[balance] NULL,
[business_transacted_6] [dbo].[balance] NULL,
[business_transacted_7] [dbo].[balance] NULL,
[business_transacted_8] [dbo].[balance] NULL,
[business_transacted_9] [dbo].[balance] NULL,
[business_transacted_10] [dbo].[balance] NULL,
[application_style_2_classification] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[application_style_3_classification] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[competitors_used] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[frequency_of_contact] [int] NULL,
[frequency_of_contact_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_brokerfirm] on [dbo].[brokerfirm]'
GO
ALTER TABLE [dbo].[brokerfirm] ADD CONSTRAINT [PK_brokerfirm] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[brokerfirm]'
GO
ALTER TABLE [dbo].[brokerfirm] ADD CONSTRAINT [IX_brokerfirm_nonpers] UNIQUE NONCLUSTERED  ([FK_rowid_nonpers])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[brokerfirm_c]'
GO
CREATE TABLE [dbo].[brokerfirm_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_brokerfirm] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_brokerfirm_c] on [dbo].[brokerfirm_c]'
GO
ALTER TABLE [dbo].[brokerfirm_c] ADD CONSTRAINT [PK_brokerfirm_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_brokerfirm_c] on [dbo].[brokerfirm_c]'
GO
CREATE NONCLUSTERED INDEX [IX_brokerfirm_c] ON [dbo].[brokerfirm_c] ([FK_rowid_brokerfirm], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[businessarea]'
GO
CREATE TABLE [dbo].[businessarea]
(
[rowid] [bigint] NOT NULL,
[application_style] [int] NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[home_branch] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_businessarea] on [dbo].[businessarea]'
GO
ALTER TABLE [dbo].[businessarea] ADD CONSTRAINT [PK_businessarea] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_businessarea_name] on [dbo].[businessarea]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_businessarea_name] ON [dbo].[businessarea] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[businessarea_c]'
GO
CREATE TABLE [dbo].[businessarea_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_businessarea] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_businessarea_c] on [dbo].[businessarea_c]'
GO
ALTER TABLE [dbo].[businessarea_c] ADD CONSTRAINT [PK_businessarea_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_businessarea_c] on [dbo].[businessarea_c]'
GO
CREATE NONCLUSTERED INDEX [IX_businessarea_c] ON [dbo].[businessarea_c] ([FK_rowid_businessarea], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[call]'
GO
CREATE TABLE [dbo].[call]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[status] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[groupid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[group_rowid] [bigint] NULL,
[crint_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_increment] [decimal] (8, 6) NULL,
[crint_cap] [decimal] (8, 6) NULL,
[crint_floor] [decimal] (8, 6) NULL,
[crint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_IRreportable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_gross] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_split_pcent] [decimal] (10, 7) NULL,
[crint_gross_IRreportable_yes_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_IRreportable_no_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_next] [datetime] NULL,
[crint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_pcent] [decimal] (5, 2) NULL,
[crint_pay_code] [int] NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_accsub] [int] NULL,
[crint_accr] [dbo].[accrual] NULL,
[crint_accr_dr] [dbo].[accrual] NULL,
[crint_paid_td] [decimal] (18, 2) NULL,
[tax_paid_td] [decimal] (18, 2) NULL,
[drint_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_increment] [decimal] (8, 6) NULL,
[drint_cap] [decimal] (8, 6) NULL,
[drint_floor] [decimal] (8, 6) NULL,
[drint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_next] [datetime] NULL,
[drint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[drint_pay_pcent] [decimal] (5, 2) NULL,
[drint_pay_code] [int] NULL,
[drint_pay_accno] [bigint] NULL,
[drint_pay_accsub] [int] NULL,
[drint_accr] [dbo].[accrual] NULL,
[drint_accr_cr] [dbo].[accrual] NULL,
[drint_pn_every] [int] NULL,
[drint_pn_freq] [varchar] (8) NULL,
[drint_pn_amount] [decimal] (18, 2) NULL,
[drint_pn_from] [datetime] NULL,
[drint_paid_td] [decimal] (18, 2) NULL,
[overdraft] [decimal] (20, 2) NULL,
[overdraft_temp] [decimal] (20, 2) NULL,
[overdraft_internal] [decimal] (20, 2) NULL,
[overdraft_status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[overdraft_texpire] [datetime] NULL,
[overdraft_purpose] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[limitgroup] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[limitgroup_rowid] [bigint] NULL,
[limitgroup_use] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[charge_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_every] [int] NULL,
[charge_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_day] [int] NULL,
[charge_next] [datetime] NULL,
[charge_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[charge_pay_pcent] [decimal] (5, 2) NULL,
[charge_pay_code] [int] NULL,
[charge_pay_accno] [bigint] NULL,
[charge_pay_accsub] [int] NULL,
[charge_accr] [decimal] (17, 3) NULL,
[charge_accr_adjust] [decimal] (17, 3) NULL,
[charge_pn_every] [int] NULL,
[charge_pn_freq] [varchar] (8) NULL,
[charge_pn_amount] [decimal] (16, 2) NULL,
[charge_pn_from] [datetime] NULL,
[charge_paid_td] [decimal] (16, 2) NULL,
[charge_free_period] [int] NULL,
[charge_monthly_fee] [dbo].[balance] NULL,
[charge_override_reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[charge_other_total] [dbo].[balance] NULL,
[maint_charge] [decimal] (8, 2) NULL,
[tover_charge] [decimal] (8, 2) NULL,
[tover_per] [decimal] (11, 2) NULL,
[fee_override] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_override] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_pro_rata_fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_bookbal] [decimal] (19, 2) NULL,
[eod_valuebal] [decimal] (19, 2) NULL,
[eod_intrate] [decimal] (8, 6) NULL,
[initial_deposit_date] [datetime] NULL,
[regulatory_dormant] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regulatory_last_activity] [datetime] NULL,
[last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[last_savepoint] [datetime] NULL,
[signers] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[product] [bigint] NULL,
[pnint_accr] [dbo].[accrual] NULL,
[chqbook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqstyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[chq_third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paybook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paystyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[pay_third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chg_1] [int] NULL,
[chg_2] [int] NULL,
[chg_3] [int] NULL,
[chg_4] [int] NULL,
[dr_turnover] [decimal] (18, 2) NULL,
[transfer_accno] [bigint] NULL,
[transfer_sortcode] [int] NULL,
[transfer_subbranch] [int] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[close_reason] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[deposit] [dbo].[balance] NULL,
[deposit_previous] [dbo].[balance] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[free_withdrawals_in_period] [int] NULL,
[free_withdrawals_cleardown] [datetime] NULL,
[conversion] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[mm_maturitydate] [datetime] NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[fscs_exclusiontype] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[fscs_product_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[transfer_letter_returned] [datetime] NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL,
[changeofsigs_application_status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[close_request] [datetime] NULL,
[close_transfer_method] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[close_transfer_sortcode] [int] NULL,
[close_transfer_account] [bigint] NULL,
[telephone_application_received] [datetime] NULL,
[eod_chg_1] [int] NULL,
[eod_chg_2] [int] NULL,
[eod_chg_3] [int] NULL,
[eod_chg_4] [int] NULL,
[eod_chgadj] [decimal] (17, 3) NULL,
[eod_turnover] [dbo].[accrual] NULL,
[eod_pnint] [dbo].[accrual] NULL,
[eod_charge] [datetime] NULL,
[transmissions] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paytran_sortcode] [int] NULL,
[paytran_accno] [bigint] NULL,
[BACS_limit] [dbo].[balance] NULL,
[BACS_limit_frequency] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[VISA_limit] [dbo].[balance] NULL,
[membershipno] [varchar] (16) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_call] on [dbo].[call]'
GO
ALTER TABLE [dbo].[call] ADD CONSTRAINT [PK_call] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[call]'
GO
ALTER TABLE [dbo].[call] ADD CONSTRAINT [IX_call_FKacct] UNIQUE NONCLUSTERED  ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_call_groupid] on [dbo].[call]'
GO
CREATE NONCLUSTERED INDEX [IX_call_groupid] ON [dbo].[call] ([groupid], [product])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_call_limitgroup] on [dbo].[call]'
GO
CREATE NONCLUSTERED INDEX [IX_call_limitgroup] ON [dbo].[call] ([limitgroup], [product])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[call_c]'
GO
CREATE TABLE [dbo].[call_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[bookstamp] [datetime] NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[sequence] [bigint] NOT NULL IDENTITY(1, 1),
[emplstamp] [int] NULL,
[FK_rowid_call] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_call_c] on [dbo].[call_c]'
GO
ALTER TABLE [dbo].[call_c] ADD CONSTRAINT [PK_call_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_call_c] on [dbo].[call_c]'
GO
CREATE NONCLUSTERED INDEX [IX_call_c] ON [dbo].[call_c] ([FK_rowid_call], [bookstamp], [timestamp], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[call_s]'
GO
CREATE TABLE [dbo].[call_s]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[bookstamp] [datetime] NULL,
[emplstamp] [int] NULL,
[bookbal] [dbo].[balance] NULL,
[valuebal] [dbo].[balance] NULL,
[clearbal] [dbo].[balance] NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[status] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[groupid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[group_rowid] [bigint] NULL,
[crint_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_increment] [decimal] (8, 6) NULL,
[crint_cap] [decimal] (8, 6) NULL,
[crint_floor] [decimal] (8, 6) NULL,
[crint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_IRreportable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_gross] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_split_pcent] [decimal] (10, 7) NULL,
[crint_gross_IRreportable_yes_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_IRreportable_no_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_next] [datetime] NULL,
[crint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_pcent] [decimal] (5, 2) NULL,
[crint_pay_code] [int] NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_accsub] [int] NULL,
[crint_accr] [dbo].[accrual] NULL,
[crint_accr_dr] [dbo].[accrual] NULL,
[crint_paid_td] [decimal] (18, 2) NULL,
[tax_paid_td] [decimal] (18, 2) NULL,
[drint_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_increment] [decimal] (8, 6) NULL,
[drint_cap] [decimal] (8, 6) NULL,
[drint_floor] [decimal] (8, 6) NULL,
[drint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_next] [datetime] NULL,
[drint_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[drint_pay_pcent] [decimal] (5, 2) NULL,
[drint_pay_code] [int] NULL,
[drint_pay_accno] [bigint] NULL,
[drint_pay_accsub] [int] NULL,
[drint_accr] [dbo].[accrual] NULL,
[drint_accr_cr] [dbo].[accrual] NULL,
[drint_pn_every] [int] NULL,
[drint_pn_freq] [varchar] (8) NULL,
[drint_pn_amount] [decimal] (12, 2) NULL,
[drint_pn_from] [datetime] NULL,
[drint_paid_td] [decimal] (18, 2) NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_bookbal] [decimal] (19, 2) NULL,
[eod_valuebal] [decimal] (19, 2) NULL,
[eod_intrate] [decimal] (8, 6) NULL,
[initial_deposit_date] [datetime] NULL,
[last_activity] [datetime] NULL,
[regulatory_dormant] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regulatory_last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[last_savepoint] [datetime] NULL,
[overdraft] [decimal] (20, 2) NULL,
[overdraft_temp] [decimal] (20, 2) NULL,
[overdraft_internal] [decimal] (20, 2) NULL,
[overdraft_status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[overdraft_texpire] [datetime] NULL,
[overdraft_purpose] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[limitgroup] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[limitgroup_rowid] [bigint] NULL,
[limitgroup_use] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[charge_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_every] [int] NULL,
[charge_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[charge_day] [int] NULL,
[charge_next] [datetime] NULL,
[charge_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[charge_pay_pcent] [decimal] (5, 2) NULL,
[charge_pay_code] [int] NULL,
[charge_pay_accno] [bigint] NULL,
[charge_pay_accsub] [int] NULL,
[charge_accr] [decimal] (17, 3) NULL,
[charge_accr_adjust] [decimal] (17, 3) NULL,
[charge_pn_every] [int] NULL,
[charge_pn_freq] [varchar] (8) NULL,
[charge_pn_amount] [decimal] (16, 2) NULL,
[charge_pn_from] [datetime] NULL,
[charge_paid_td] [decimal] (16, 2) NULL,
[charge_free_period] [int] NULL,
[charge_monthly_fee] [dbo].[balance] NULL,
[charge_override_reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[charge_other_total] [dbo].[balance] NULL,
[maint_charge] [decimal] (8, 2) NULL,
[tover_charge] [decimal] (8, 2) NULL,
[tover_per] [decimal] (11, 2) NULL,
[fee_override] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_override] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_pro_rata_fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[pnint_accr] [dbo].[accrual] NULL,
[chqbook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqstyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[chq_third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paybook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paystyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[pay_third_party] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[saveflags] [int] NULL,
[signers] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[product] [bigint] NULL,
[notice_period] [int] NULL,
[chg_1] [int] NULL,
[chg_2] [int] NULL,
[chg_3] [int] NULL,
[chg_4] [int] NULL,
[dr_turnover] [decimal] (18, 2) NULL,
[transfer_accno] [bigint] NULL,
[transfer_sortcode] [int] NULL,
[transfer_subbranch] [int] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[close_reason] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[deposit] [dbo].[balance] NULL,
[deposit_previous] [dbo].[balance] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[free_withdrawals_in_period] [int] NULL,
[free_withdrawals_cleardown] [datetime] NULL,
[mm_maturitydate] [datetime] NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_call] [bigint] NULL,
[transfer_letter_returned] [datetime] NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL,
[changeofsigs_application_status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[close_request] [datetime] NULL,
[close_transfer_method] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[close_transfer_sortcode] [int] NULL,
[close_transfer_account] [bigint] NULL,
[telephone_application_received] [datetime] NULL,
[eod_chg_1] [int] NULL,
[eod_chg_2] [int] NULL,
[eod_chg_3] [int] NULL,
[eod_chg_4] [int] NULL,
[eod_chgadj] [decimal] (17, 3) NULL,
[eod_turnover] [dbo].[accrual] NULL,
[eod_pnint] [dbo].[accrual] NULL,
[eod_charge] [datetime] NULL,
[transmissions] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paytran_sortcode] [int] NULL,
[paytran_accno] [bigint] NULL,
[BACS_limit] [dbo].[balance] NULL,
[BACS_limit_frequency] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[VISA_limit] [dbo].[balance] NULL,
[membershipno] [varchar] (16) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_call_s] on [dbo].[call_s]'
GO
ALTER TABLE [dbo].[call_s] ADD CONSTRAINT [PK_call_s] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookstamp] on [dbo].[call_s]'
GO
CREATE NONCLUSTERED INDEX [IX_bookstamp] ON [dbo].[call_s] ([FK_rowid_call], [bookstamp], [saveflags])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[call_v]'
GO
CREATE TABLE [dbo].[call_v]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NOT NULL,
[timestamp] [datetime] NOT NULL,
[bookstamp] [datetime] NOT NULL,
[emplstamp] [int] NOT NULL,
[viewflags] [bigint] NOT NULL,
[FK_rowid_call] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_call_v] on [dbo].[call_v]'
GO
ALTER TABLE [dbo].[call_v] ADD CONSTRAINT [PK_call_v] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_call_v] on [dbo].[call_v]'
GO
CREATE NONCLUSTERED INDEX [IX_call_v] ON [dbo].[call_v] ([FK_rowid_call], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[call_prenotification]'
GO
CREATE TABLE [dbo].[call_prenotification]
(
[rowid] [bigint] NOT NULL,
[type] [varchar](6) NULL,
[amount] [decimal](19, 2) NULL,
[applied_date] [datetime] NULL,
[date_from] [datetime] NULL,
[date_to] [datetime] NULL,
[cat1_charge_title] [varchar](50) NULL,
[cat1_charge1_items] [int] NULL,
[cat1_charge1_amount] [decimal](19, 2) NULL,
[cat1_charge2_items] [int] NULL,
[cat1_charge2_amount] [decimal](19, 2) NULL,
[cat1_charge3_items] [int] NULL,
[cat1_charge3_amount] [decimal](19, 2) NULL,
[cat2_charge_title] [varchar](50) NULL,
[cat2_charge1_items] [int] NULL,
[cat2_charge1_amount] [decimal](19, 2) NULL,
[cat2_charge2_items] [int] NULL,
[cat2_charge2_amount] [decimal](19, 2) NULL,
[cat2_charge3_items] [int] NULL,
[cat2_charge3_amount] [decimal](19, 2) NULL,
[cat3_charge_title] [varchar](50) NULL,
[cat3_charge1_items] [int] NULL,
[cat3_charge1_amount] [decimal](19, 2) NULL,
[cat3_charge2_items] [int] NULL,
[cat3_charge2_amount] [decimal](19, 2) NULL,
[cat3_charge3_items] [int] NULL,
[cat3_charge3_amount] [decimal](19, 2) NULL,
[cat4_charge_title] [varchar](50) NULL,
[cat4_charge1_items] [int] NULL,
[cat4_charge1_amount] [decimal](19, 2) NULL,
[cat4_charge2_items] [int] NULL,
[cat4_charge2_amount] [decimal](19, 2) NULL,
[cat4_charge3_items] [int] NULL,
[cat4_charge3_amount] [decimal](19, 2) NULL,
[cat5_charge_title] [varchar](50) NULL,
[cat5_charge1_items] [int] NULL,
[cat5_charge1_amount] [decimal](19, 2) NULL,
[cat5_charge2_items] [int] NULL,
[cat5_charge2_amount] [decimal](19, 2) NULL,
[cat5_charge3_items] [int] NULL,
[cat5_charge3_amount] [decimal](19, 2) NULL,
[cat6_charge_title] [varchar](50) NULL,
[cat6_charge1_items] [int] NULL,
[cat6_charge1_amount] [decimal](19, 2) NULL,
[cat6_charge2_items] [int] NULL,
[cat6_charge2_amount] [decimal](19, 2) NULL,
[cat6_charge3_items] [int] NULL,
[cat6_charge3_amount] [decimal](19, 2) NULL,
[maint_charge_amount] [decimal](19, 2) NULL,
[turnover_charge_amount] [decimal](19, 2) NULL,
[charge_min_post] [decimal](19, 2) NULL,
[turnover_charge] [decimal](19, 2) NULL,
[turnover_charge_per] [decimal](19, 2) NULL,	
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_stmt] [bigint] NULL,
[FK_rowid_stmthdr] [bigint] NULL	
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_call_prenotification] on [dbo].[call_prenotification]'
GO
ALTER TABLE [dbo].[call_prenotification] ADD CONSTRAINT [PK_call_prenotification] PRIMARY KEY CLUSTERED  ([rowid])
GO	
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[calldef]'
GO
CREATE TABLE [dbo].[calldef]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NOT NULL,
[id] [dbo].[product_id] NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[yearend] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[backdate_unauthorised] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[min_initial_deposit] [dbo].[balance] NULL,
[crint_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_group_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_program_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[crint_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_month] [int] NULL,
[crint_modifiers] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_min_post] [decimal] (4, 2) NULL,
[crint_compound] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_inttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_exttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[notice_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[notice_period] [int] NULL,
[notice_action] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[notice_limit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payout_penalty_balance_only] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_group_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_program_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[drint_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_month] [int] NULL,
[drint_modifiers] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_period_date] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_min_post] [decimal] (4, 2) NULL,
[drint_compound] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_inttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_unauth_calc] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_pn_every] [int] NULL,
[drint_pn_freq] [varchar] (8) NULL,
[charge_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_acct] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_group] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_every] [int] NULL,
[charge_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[charge_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_day] [int] NULL,
[charge_month] [int] NULL,
[charge_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_period_date] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_min_post] [decimal] (4, 2) NULL,
[charge_fixed_min_post] [dbo].[balance] NULL,
[charge_compound] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_inttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_maint] [decimal] (8, 2) NULL,
[charge_pro_rata_fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_tover] [decimal] (8, 2) NULL,
[charge_toverper] [decimal] (11, 2) NULL,
[charge_maint_acct] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_maint_group] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_free_period] [int] NULL,
[charge_monthly_fee] [dbo].[balance] NULL,
[charge_dormant] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_inactive] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[charge_min_bal] [dbo].[balance] NULL,
[charge_min_bal_other] [dbo].[balance] NULL,
[fee_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee_acct] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee_group] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee_owner] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_every] [int] NULL,
[stmt_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[stmt_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_day] [int] NULL,
[stmt_month] [int] NULL,
[stmt_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_deliverymeth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[stmt_format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[charge_pn_every] [int] NULL,
[charge_pn_freq] [varchar] (8) NULL,
[chqbook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqmax] [int] NULL,
[chqorder] [int] NULL,
[chqstyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[chqserialno] [int] NULL,
[chqautomated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqcomplete] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqposition] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqafter] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paybook] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payorder] [int] NULL,
[paystyle] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[payserialno] [int] NULL,
[divisor] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[allow_user_accno] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_sub_accounts] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_inttfr] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_so] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_swout] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_swin] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[autopymt_bp] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_ddin] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_ddout] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[monthstoinactive] [int] NULL,
[monthstodormant] [int] NULL,
[months_to_regulatory_dormant] [int] NULL,
[card_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cardstyle] [dbo].[cardstyle] NULL,
[min_dep] [dbo].[balance] NULL,
[max_dep] [dbo].[balance] NULL,
[free_withdrawals_num] [int] NULL,
[free_withdrawals_freq] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[free_withdrawals_max_percent] [int] NULL,
[extbank_dd_transfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_calldef] on [dbo].[calldef]'
GO
ALTER TABLE [dbo].[calldef] ADD CONSTRAINT [PK_calldef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_calldef_id] on [dbo].[calldef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_calldef_id] ON [dbo].[calldef] ([FK_rowid_prod], [startdate], [nextdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[calldef_c]'
GO
CREATE TABLE [dbo].[calldef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_calldef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_calldef_c] on [dbo].[calldef_c]'
GO
ALTER TABLE [dbo].[calldef_c] ADD CONSTRAINT [PK_calldef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_calldef_c] on [dbo].[calldef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_calldef_c] ON [dbo].[calldef_c] ([FK_rowid_calldef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prod]'
GO
CREATE TABLE [dbo].[prod]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[id] [dbo].[product_id] NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[base] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[owner_restrict] [int] NULL,
[softpoint] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[taxfree] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[taxfreetype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[owners_allowed] [int] NULL,
[moneymarket] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[combined_signatories] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[application_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[reg_shortname] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[internet_enabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[internet_text] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[internet_promotional] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_rate] [decimal] (8, 6) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prod] on [dbo].[prod]'
GO
ALTER TABLE [dbo].[prod] ADD CONSTRAINT [PK_prod] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[prod]'
GO
ALTER TABLE [dbo].[prod] ADD CONSTRAINT [IX_prod_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[card]'
GO
CREATE TABLE [dbo].[card]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[style] [dbo].[cardstyle] NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[pan] [varbinary] (50) NULL,
[issue] [int] NULL,
[embossname1] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[embossname2] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[validdate] [datetime] NULL,
[expirydate] [datetime] NULL,
[withdrawallimit] [dbo].[balance] NULL,
[disburselimit] [dbo].[balance] NULL,
[balancelimit] [dbo].[balance] NULL,
[pintype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[activationcode] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NOT NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL,
[FK_rowid_carddef] [bigint] NULL,
[FK_rowid_cardholder] [bigint] NULL,
[FK_rowid_corppay] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_card] on [dbo].[card]'
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [PK_card] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_embossname] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_embossname] ON [dbo].[card] ([embossname1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKacct] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKacct] ON [dbo].[card] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_identifier] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_identifier] ON [dbo].[card] ([FK_rowid_acct], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKcarddef] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKcarddef] ON [dbo].[card] ([FK_rowid_carddef])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKcardholder] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKcardholder] ON [dbo].[card] ([FK_rowid_cardholder])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKcontact] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKcontact] ON [dbo].[card] ([FK_rowid_contact])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKcorppay] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKcorppay] ON [dbo].[card] ([FK_rowid_corppay])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKnonpers] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKnonpers] ON [dbo].[card] ([FK_rowid_nonpers])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_FKpeople] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_FKpeople] ON [dbo].[card] ([FK_rowid_people])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_pan] on [dbo].[card]'
GO
CREATE NONCLUSTERED INDEX [IX_card_pan] ON [dbo].[card] ([pan])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[card_c]'
GO
CREATE TABLE [dbo].[card_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_card] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_card_c] on [dbo].[card_c]'
GO
ALTER TABLE [dbo].[card_c] ADD CONSTRAINT [PK_card_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_card_c] on [dbo].[card_c]'
GO
CREATE NONCLUSTERED INDEX [IX_card_c] ON [dbo].[card_c] ([FK_rowid_card], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[carddef]'
GO
CREATE TABLE [dbo].[carddef]
(
[rowid] [bigint] NOT NULL,
[style] [dbo].[cardstyle] NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (70) COLLATE Latin1_General_CI_AS NULL,
[brand] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[altstyle] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[expirytype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[expirydate] [datetime] NULL,
[expiryevery] [int] NULL,
[expiryfreq] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[pangeneration] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[panhigh] [int] NULL,
[panlength] [int] NULL,
[panlowstart] [int] NULL,
[panlowfixseven] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[panlowfixeight] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[panlownextsequence] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_carddef] on [dbo].[carddef]'
GO
ALTER TABLE [dbo].[carddef] ADD CONSTRAINT [PK_carddef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_carddef_style] on [dbo].[carddef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_carddef_style] ON [dbo].[carddef] ([style])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardholder]'
GO
CREATE TABLE [dbo].[cardholder]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[title] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[gender] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[surname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[birthdate] [datetime] NULL,
[cardpintype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[addressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[salutation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[contact] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[teltype1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[telnumber1] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[teltype2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[telnumber2] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[teltype3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[telnumber3] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[email] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardholder] on [dbo].[cardholder]'
GO
ALTER TABLE [dbo].[cardholder] ADD CONSTRAINT [PK_cardholder] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardholder_identifier] on [dbo].[cardholder]'
GO
CREATE NONCLUSTERED INDEX [IX_cardholder_identifier] ON [dbo].[cardholder] ([FK_rowid_nonpers], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardholder_reference] on [dbo].[cardholder]'
GO
CREATE NONCLUSTERED INDEX [IX_cardholder_reference] ON [dbo].[cardholder] ([FK_rowid_nonpers], [reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[corppay]'
GO
CREATE TABLE [dbo].[corppay]
(
[rowid] [bigint] NOT NULL,
[requestdate] [datetime] NULL,
[acctref] [bigint] NULL,
[acctname] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (45) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[transferoutdate] [datetime] NULL,
[transferindate] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_carddef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_corppay] on [dbo].[corppay]'
GO
ALTER TABLE [dbo].[corppay] ADD CONSTRAINT [PK_corppay] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_corppay_acctref] on [dbo].[corppay]'
GO
CREATE NONCLUSTERED INDEX [IX_corppay_acctref] ON [dbo].[corppay] ([acctref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardconfig]'
GO
CREATE TABLE [dbo].[cardconfig]
(
[rowid] [bigint] NOT NULL,
[emailsender] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[emailsupport] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[emailreport] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[cardwithdrawallimit] [dbo].[balance] NULL,
[carddisburselimit] [dbo].[balance] NULL,
[cardbalancelimit] [dbo].[balance] NULL,
[cardrequeststatus] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processhold] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processfolder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[processtime] [datetime] NULL,
[processlastdate] [datetime] NULL,
[processlasttime] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[processhold2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processtime2] [datetime] NULL,
[journaltime] [datetime] NULL,
[journaltime2] [datetime] NULL,
[journallastdate] [datetime] NULL,
[journallasttime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardconfig] on [dbo].[cardconfig]'
GO
ALTER TABLE [dbo].[cardconfig] ADD CONSTRAINT [PK_cardconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardconfig_c]'
GO
CREATE TABLE [dbo].[cardconfig_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_cardconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardconfig_c] on [dbo].[cardconfig_c]'
GO
ALTER TABLE [dbo].[cardconfig_c] ADD CONSTRAINT [PK_cardconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardconfig_c] on [dbo].[cardconfig_c]'
GO
CREATE NONCLUSTERED INDEX [IX_cardconfig_c] ON [dbo].[cardconfig_c] ([FK_rowid_cardconfig], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardcontrol]'
GO
CREATE TABLE [dbo].[cardcontrol]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[date] [datetime] NULL,
[version] [int] NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardcontrol] on [dbo].[cardcontrol]'
GO
ALTER TABLE [dbo].[cardcontrol] ADD CONSTRAINT [PK_cardcontrol] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardcontrol_version] on [dbo].[cardcontrol]'
GO
CREATE NONCLUSTERED INDEX [IX_cardcontrol_version] ON [dbo].[cardcontrol] ([type], [date], [version])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardcontrol_c]'
GO
CREATE TABLE [dbo].[cardcontrol_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_cardcontrol] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardcontrol_c] on [dbo].[cardcontrol_c]'
GO
ALTER TABLE [dbo].[cardcontrol_c] ADD CONSTRAINT [PK_cardcontrol_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardcontrol_c] on [dbo].[cardcontrol_c]'
GO
CREATE NONCLUSTERED INDEX [IX_cardcontrol_c] ON [dbo].[cardcontrol_c] ([FK_rowid_cardcontrol], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[carddef_c]'
GO
CREATE TABLE [dbo].[carddef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_carddef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_carddef_c] on [dbo].[carddef_c]'
GO
ALTER TABLE [dbo].[carddef_c] ADD CONSTRAINT [PK_carddef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_carddef_c] on [dbo].[carddef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_carddef_c] ON [dbo].[carddef_c] ([FK_rowid_carddef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[carddisburse]'
GO
CREATE TABLE [dbo].[carddisburse]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[disbursedate] [datetime] NULL,
[disburseid] [bigint] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_card] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_carddisburse] on [dbo].[carddisburse]'
GO
ALTER TABLE [dbo].[carddisburse] ADD CONSTRAINT [PK_carddisburse] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_carddisburse_disburseid] on [dbo].[carddisburse]'
GO
CREATE NONCLUSTERED INDEX [IX_carddisburse_disburseid] ON [dbo].[carddisburse] ([disburseid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_carddisburse_identifier] on [dbo].[carddisburse]'
GO
CREATE NONCLUSTERED INDEX [IX_carddisburse_identifier] ON [dbo].[carddisburse] ([FK_rowid_card], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[carddisburse_c]'
GO
CREATE TABLE [dbo].[carddisburse_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_carddisburse] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_carddisburse_c] on [dbo].[carddisburse_c]'
GO
ALTER TABLE [dbo].[carddisburse_c] ADD CONSTRAINT [PK_carddisburse_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_carddisburse_c] on [dbo].[carddisburse_c]'
GO
CREATE NONCLUSTERED INDEX [IX_carddisburse_c] ON [dbo].[carddisburse_c] ([FK_rowid_carddisburse], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[cardholder_c]'
GO
CREATE TABLE [dbo].[cardholder_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_cardholder] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_cardholder_c] on [dbo].[cardholder_c]'
GO
ALTER TABLE [dbo].[cardholder_c] ADD CONSTRAINT [PK_cardholder_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_cardholder_c] on [dbo].[cardholder_c]'
GO
CREATE NONCLUSTERED INDEX [IX_cardholder_c] ON [dbo].[cardholder_c] ([FK_rowid_cardholder], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ccy]'
GO
CREATE TABLE [dbo].[ccy]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[isonum] [int] NULL,
[isocode3] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[intnum] [int] NULL,
[intcode] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[unitname] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[subunitname] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[subunit] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[expirydate] [datetime] NULL,
[triangulation] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[glchart] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[glbase] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[lookahead] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ccy] on [dbo].[ccy]'
GO
ALTER TABLE [dbo].[ccy] ADD CONSTRAINT [PK_ccy] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ccy]'
GO
ALTER TABLE [dbo].[ccy] ADD CONSTRAINT [IX_ccy_intcode] UNIQUE NONCLUSTERED  ([intcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_intnum] on [dbo].[ccy]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_intnum] ON [dbo].[ccy] ([intnum])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_isocode3] on [dbo].[ccy]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_isocode3] ON [dbo].[ccy] ([isocode3])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_isonum] on [dbo].[ccy]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_isonum] ON [dbo].[ccy] ([isonum])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_name] on [dbo].[ccy]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_name] ON [dbo].[ccy] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_status] on [dbo].[ccy]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_status] ON [dbo].[ccy] ([status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ccy_c]'
GO
CREATE TABLE [dbo].[ccy_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ccy] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ccy_c] on [dbo].[ccy_c]'
GO
ALTER TABLE [dbo].[ccy_c] ADD CONSTRAINT [PK_ccy_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ccy_c] on [dbo].[ccy_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ccy_c] ON [dbo].[ccy_c] ([FK_rowid_ccy], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[charge]'
GO
CREATE TABLE [dbo].[charge]
(
[rowid] [bigint] NOT NULL,
[link_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[link_id] [dbo].[product_id] NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[c1_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[c1l1_value] [decimal] (5, 3) NULL,
[c1l2_count] [int] NULL,
[c1l2_value] [decimal] (5, 3) NULL,
[c1l3_count] [int] NULL,
[c1l3_value] [decimal] (5, 3) NULL,
[c1_switch] [int] NULL,
[c2_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[c2l1_value] [decimal] (5, 3) NULL,
[c2l2_count] [int] NULL,
[c2l2_value] [decimal] (5, 3) NULL,
[c2l3_count] [int] NULL,
[c2l3_value] [decimal] (5, 3) NULL,
[c2_switch] [int] NULL,
[c3_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[c3l1_value] [decimal] (5, 3) NULL,
[c3l2_count] [int] NULL,
[c3l2_value] [decimal] (5, 3) NULL,
[c3l3_count] [int] NULL,
[c3l3_value] [decimal] (5, 3) NULL,
[c3_switch] [int] NULL,
[c4_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[c4l1_value] [decimal] (5, 3) NULL,
[c4l2_count] [int] NULL,
[c4l2_value] [decimal] (5, 3) NULL,
[c4l3_count] [int] NULL,
[c4l3_value] [decimal] (5, 3) NULL,
[c4_switch] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_acctgroup] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_charge] on [dbo].[charge]'
GO
ALTER TABLE [dbo].[charge] ADD CONSTRAINT [PK_charge] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_charge_FKall] on [dbo].[charge]'
GO
CREATE NONCLUSTERED INDEX [IX_charge_FKall] ON [dbo].[charge] ([FK_rowid_prod], [FK_rowid_acct], [FK_rowid_acctgroup], [startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[charge_c]'
GO
CREATE TABLE [dbo].[charge_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_charge] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_charge_c] on [dbo].[charge_c]'
GO
ALTER TABLE [dbo].[charge_c] ADD CONSTRAINT [PK_charge_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_charge_c] on [dbo].[charge_c]'
GO
CREATE NONCLUSTERED INDEX [IX_charge_c] ON [dbo].[charge_c] ([FK_rowid_charge], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chgtype]'
GO
CREATE TABLE [dbo].[chgtype]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[title] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chgtype] on [dbo].[chgtype]'
GO
ALTER TABLE [dbo].[chgtype] ADD CONSTRAINT [PK_chgtype] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[chgtype]'
GO
ALTER TABLE [dbo].[chgtype] ADD CONSTRAINT [IX_chgtype_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chgtype_c]'
GO
CREATE TABLE [dbo].[chgtype_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_chgtype] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chgtype_c] on [dbo].[chgtype_c]'
GO
ALTER TABLE [dbo].[chgtype_c] ADD CONSTRAINT [PK_chgtype_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chgtype_c] on [dbo].[chgtype_c]'
GO
CREATE NONCLUSTERED INDEX [IX_chgtype_c] ON [dbo].[chgtype_c] ([FK_rowid_chgtype], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqinhdr]'
GO
CREATE TABLE [dbo].[chqinhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacscreate] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[bacssequence] [int] NULL,
[tottxnscr] [int] NULL,
[totamountcr] [dbo].[balance] NULL,
[tottxnsdr] [int] NULL,
[totamountdr] [dbo].[balance] NULL,
[tottxns] [int] NULL,
[totposted] [int] NULL,
[toterrored] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processing_service] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqinhdr] on [dbo].[chqinhdr]'
GO
ALTER TABLE [dbo].[chqinhdr] ADD CONSTRAINT [PK_chqinhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqinhdr_filename] on [dbo].[chqinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_chqinhdr_filename] ON [dbo].[chqinhdr] ([FK_rowid_model], [filename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqinhdr_bacssequence] on [dbo].[chqinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_chqinhdr_bacssequence] ON [dbo].[chqinhdr] ([FK_rowid_model], [submissiondate], [bacssequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqinhdr_currency] on [dbo].[chqinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_chqinhdr_currency] ON [dbo].[chqinhdr] ([FK_rowid_model], [submissiondate], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqinhdr_submission] on [dbo].[chqinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_chqinhdr_submission] ON [dbo].[chqinhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqinhdr_c]'
GO
CREATE TABLE [dbo].[chqinhdr_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_chqinhdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqinhdr_c] on [dbo].[chqinhdr_c]'
GO
ALTER TABLE [dbo].[chqinhdr_c] ADD CONSTRAINT [PK_chqinhdr_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqinhdr_c] on [dbo].[chqinhdr_c]'
GO
CREATE NONCLUSTERED INDEX [IX_chqinhdr_c] ON [dbo].[chqinhdr_c] ([FK_rowid_chqinhdr], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqintxn]'
GO
CREATE TABLE [dbo].[chqintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[destinationsortcode] [int] NULL,
[destinationacctno] [bigint] NULL,
[destinationtitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[originatorsortcode] [int] NULL,
[originatoracctno] [bigint] NULL,
[originatortitle] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[amount] [dbo].[balance] NULL,
[serialno] [int] NULL,
[bacsreference] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[trandate] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[referredsortcode] [int] NULL,
[referredacctno] [bigint] NULL,
[postreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[postreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_chqinhdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NULL,
[substsortcode] [int] NULL,
[substacctno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqintxn] on [dbo].[chqintxn]'
GO
ALTER TABLE [dbo].[chqintxn] ADD CONSTRAINT [PK_chqintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqintxn_identifier] on [dbo].[chqintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_chqintxn_identifier] ON [dbo].[chqintxn] ([FK_rowid_chqinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqintxn_FKtxns] on [dbo].[chqintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_chqintxn_FKtxns] ON [dbo].[chqintxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqintxn_c]'
GO
CREATE TABLE [dbo].[chqintxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_chqintxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqintxn_c] on [dbo].[chqintxn_c]'
GO
ALTER TABLE [dbo].[chqintxn_c] ADD CONSTRAINT [PK_chqintxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqintxn_c] on [dbo].[chqintxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_chqintxn_c] ON [dbo].[chqintxn_c] ([FK_rowid_chqintxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqrevhdr]'
GO
CREATE TABLE [dbo].[chqrevhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[totamount] [dbo].[balance] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqrevhdr] on [dbo].[chqrevhdr]'
GO
ALTER TABLE [dbo].[chqrevhdr] ADD CONSTRAINT [PK_chqrevhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqrevhdr_submission] on [dbo].[chqrevhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_chqrevhdr_submission] ON [dbo].[chqrevhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqrevtxns]'
GO
CREATE TABLE [dbo].[chqrevtxns]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[payeename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serialno] [bigint] NULL,
[amount] [dbo].[balance] NULL,
[postdate] [datetime] NULL,
[chequedate] [datetime] NULL,
[payername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[reason] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[letter] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[overdrawn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[bankvalidate] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[banksortcode] [int] NULL,
[bankname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[branchname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_chqrevhdr] [bigint] NULL,
[FK_rowid_txns] [bigint] NULL,
[letterbookvalue] [dbo].[balance] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqrevtxns] on [dbo].[chqrevtxns]'
GO
ALTER TABLE [dbo].[chqrevtxns] ADD CONSTRAINT [PK_chqrevtxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqrevtxns_identifier] on [dbo].[chqrevtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_chqrevtxns_identifier] ON [dbo].[chqrevtxns] ([FK_rowid_chqrevhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqrevtxns_FK_rowid_txns] on [dbo].[chqrevtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_chqrevtxns_FK_rowid_txns] ON [dbo].[chqrevtxns] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chqrevtxns_c]'
GO
CREATE TABLE [dbo].[chqrevtxns_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_chqrevtxns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chqrevtxns_c] on [dbo].[chqrevtxns_c]'
GO
ALTER TABLE [dbo].[chqrevtxns_c] ADD CONSTRAINT [PK_chqrevtxns_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chqrevtxns_c] on [dbo].[chqrevtxns_c]'
GO
CREATE NONCLUSTERED INDEX [IX_chqrevtxns_c] ON [dbo].[chqrevtxns_c] ([FK_rowid_chqrevtxns], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[coded_action]'
GO
CREATE TABLE [dbo].[coded_action]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[function_no] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_coded_action] on [dbo].[coded_action]'
GO
ALTER TABLE [dbo].[coded_action] ADD CONSTRAINT [PK_coded_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[coded_action]'
GO
ALTER TABLE [dbo].[coded_action] ADD CONSTRAINT [IX_coded_action_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[coded_action_c]'
GO
CREATE TABLE [dbo].[coded_action_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_coded_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_coded_action_c] on [dbo].[coded_action_c]'
GO
ALTER TABLE [dbo].[coded_action_c] ADD CONSTRAINT [PK_coded_action_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_coded_action_c] on [dbo].[coded_action_c]'
GO
CREATE NONCLUSTERED INDEX [IX_coded_action_c] ON [dbo].[coded_action_c] ([FK_rowid_coded_action], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[coded_template]'
GO
CREATE TABLE [dbo].[coded_template]
(
[rowid] [bigint] NOT NULL,
[work_template_id] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_coded_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_coded_template] on [dbo].[coded_template]'
GO
ALTER TABLE [dbo].[coded_template] ADD CONSTRAINT [PK_coded_template] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_coded_template_id] on [dbo].[coded_template]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_coded_template_id] ON [dbo].[coded_template] ([FK_rowid_coded_action], [work_template_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[condition_c]'
GO
CREATE TABLE [dbo].[condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_condition_c] on [dbo].[condition_c]'
GO
ALTER TABLE [dbo].[condition_c] ADD CONSTRAINT [PK_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_condition_c] on [dbo].[condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_condition_c] ON [dbo].[condition_c] ([FK_rowid_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[config]'
GO
CREATE TABLE [dbo].[config]
(
[rowid] [bigint] NOT NULL,
[liveserver] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[mailserver] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[mailserver_send_email_timeout] [int] NULL,
[workflow_from] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[statements_from] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[ibnklockouttries] [int] NULL,
[ibnkpasswordrenew] [int] NULL,
[ibnkpasswordprenotify] [int] NULL,
[ibnknopasswords] [int] NULL,
[ibnkstopfee] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[ibnkpaymentdate] [int] NULL,
[ibnkmaxtransactiondays] [int] NULL,
[ibnkmaxtransactioncount] [int] NULL,
[ibnkmaxstandingorderdays] [int] NULL,
[ibnkmaxstatementdays] [int] NULL,
[min_mem_details_length] [int] NULL,
[minusernamelength] [int] NULL,
[conversiondate] [datetime] NULL,
[reportpakqueuefolder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[reportpaklastdate] [datetime] NULL,
[reportpaklasttime] [datetime] NULL,
[pac_lockout_tries] [int] NULL,
[ibnkauthenticationmode] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[passwordskipposition1] [int] NULL,
[passwordskipposition2] [int] NULL,
[passwordskipposition3] [int] NULL,
[ibnkpasswordlength] [int] NULL,
[ibnkpasswordexclude] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[aml_max_workflow] [int] NULL,
[eiscd] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[pafaddressing] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[officerenforcement] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[search_officer] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[watchlist_last_date] [datetime] NULL,
[watchlist_last_time] [datetime] NULL,
[creditref_company] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[creditref_username] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[creditref_password] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[creditref_password_set] [datetime] NULL,
[creditref_password_daysvalid] [int] NULL,
[months_to_regulatory_dormancy] [int] NULL,
[default_country] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[default_sales_officer] [int] NULL,
[default_personal_banker] [int] NULL,
[default_risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[del_depacct_used_after] [int] NULL,
[del_depacct_used_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[del_depacct_unused_after] [int] NULL,
[del_depacct_unused_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[del_depappl_unused_after] [int] NULL,
[del_depappl_unused_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[del_loanacct_used_after] [int] NULL,
[del_loanacct_used_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[del_loanacct_unused_after] [int] NULL,
[del_loanacct_unused_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[del_loanappl_unused_after] [int] NULL,
[del_loanappl_unused_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[bypass_authenticator] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[fixedtermprod_notificationdays] [int] NULL,
[agency_claim_notification] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_config] on [dbo].[config]'
GO
ALTER TABLE [dbo].[config] ADD CONSTRAINT [PK_config] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[config_c]'
GO
CREATE TABLE [dbo].[config_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_config] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_config_c] on [dbo].[config_c]'
GO
ALTER TABLE [dbo].[config_c] ADD CONSTRAINT [PK_config_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_config_c] on [dbo].[config_c]'
GO
CREATE NONCLUSTERED INDEX [IX_config_c] ON [dbo].[config_c] ([FK_rowid_config], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[contact_c]'
GO
CREATE TABLE [dbo].[contact_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_contact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_contact_c] on [dbo].[contact_c]'
GO
ALTER TABLE [dbo].[contact_c] ADD CONSTRAINT [PK_contact_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_contact_c] on [dbo].[contact_c]'
GO
CREATE NONCLUSTERED INDEX [IX_contact_c] ON [dbo].[contact_c] ([FK_rowid_contact], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[development]'
GO
CREATE TABLE [dbo].[development]
(
[rowid] [bigint] NOT NULL,
[location_phase] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[planning_consent_number] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[planning_expiry_date] [datetime] NULL,
[reserved_pound] [dbo].[balance] NULL,
[reserved_percent] [decimal] (5, 2) NULL,
[exchanged_pound] [dbo].[balance] NULL,
[exchanged_percent] [decimal] (5, 2) NULL,
[completed_pound] [dbo].[balance] NULL,
[completed_percent] [decimal] (5, 2) NULL,
[initial_site_value] [dbo].[balance] NULL,
[redemption_fees_received] [dbo].[balance] NULL,
[sales_proceeds_received] [dbo].[balance] NULL,
[release_fee_rate] [decimal] (4, 2) NULL,
[release_fee_minimum] [dbo].[balance] NULL,
[security_remaining] [dbo].[balance] NULL,
[gdv] [dbo].[balance] NULL,
[prior_ranking_charge] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[prior_ranking_restriction] [dbo].[balance] NULL,
[subsequent_ranking_charge] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[subsequent_ranking_restriction] [dbo].[balance] NULL,
[overall_build_stage] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_development] on [dbo].[development]'
GO
ALTER TABLE [dbo].[development] ADD CONSTRAINT [PK_development] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_development_securities] on [dbo].[development]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_development_securities] ON [dbo].[development] ([FK_rowid_securities])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[property]'
GO
CREATE TABLE [dbo].[property]
(
[rowid] [bigint] NOT NULL,
[security_remaining] [dbo].[balance] NULL,
[tenure] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[leasehold_expiry] [datetime] NULL,
[landregtitle] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[deedlocation] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prior_lender_details] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[prior_lender_restriction] [dbo].[balance] NULL,
[subsq_lender_details] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[subsq_lender_restriction] [dbo].[balance] NULL,
[ninety_day_value] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_securities] [bigint] NULL,
[leasehold] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_property] on [dbo].[property]'
GO
ALTER TABLE [dbo].[property] ADD CONSTRAINT [PK_property] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[property]'
GO
ALTER TABLE [dbo].[property] ADD CONSTRAINT [IX_property_securities] UNIQUE NONCLUSTERED  ([FK_rowid_securities])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[corppay_c]'
GO
CREATE TABLE [dbo].[corppay_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_corppay] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_corppay_c] on [dbo].[corppay_c]'
GO
ALTER TABLE [dbo].[corppay_c] ADD CONSTRAINT [PK_corppay_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_corppay_c] on [dbo].[corppay_c]'
GO
CREATE NONCLUSTERED INDEX [IX_corppay_c] ON [dbo].[corppay_c] ([FK_rowid_corppay], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[corppaydisburse]'
GO
CREATE TABLE [dbo].[corppaydisburse]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[comment] [varchar] (45) COLLATE Latin1_General_CI_AS NULL,
[disbursedate] [datetime] NULL,
[disburseid] [bigint] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_corppay] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_corppaydisburse] on [dbo].[corppaydisburse]'
GO
ALTER TABLE [dbo].[corppaydisburse] ADD CONSTRAINT [PK_corppaydisburse] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_corppaydisburse_disburseid] on [dbo].[corppaydisburse]'
GO
CREATE NONCLUSTERED INDEX [IX_corppaydisburse_disburseid] ON [dbo].[corppaydisburse] ([disburseid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_corppaydisburse_identifier] on [dbo].[corppaydisburse]'
GO
CREATE NONCLUSTERED INDEX [IX_corppaydisburse_identifier] ON [dbo].[corppaydisburse] ([FK_rowid_corppay], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[corppaydisburse_c]'
GO
CREATE TABLE [dbo].[corppaydisburse_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_corppaydisburse] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_corppaydisburse_c] on [dbo].[corppaydisburse_c]'
GO
ALTER TABLE [dbo].[corppaydisburse_c] ADD CONSTRAINT [PK_corppaydisburse_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_corppaydisburse_c] on [dbo].[corppaydisburse_c]'
GO
CREATE NONCLUSTERED INDEX [IX_corppaydisburse_c] ON [dbo].[corppaydisburse_c] ([FK_rowid_corppaydisburse], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[credentials]'
GO
CREATE TABLE [dbo].[credentials]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[service_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[username] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[password] [varbinary] (200) NULL,
[password_set] [datetime] NULL,
[days_valid] [int] NULL,
[cert_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[environment] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[url1] [varchar] (200) COLLATE Latin1_General_CI_AS NULL,
[url1_desc] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[url1_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[url2] [varchar] (200) COLLATE Latin1_General_CI_AS NULL,
[url2_desc] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[url2_method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[proxy_yesno] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[proxy_address] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[host_key] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[custom_message] [varchar] (160) COLLATE Latin1_General_CI_AS NULL,
[auth_type] [varchar](10) COLLATE Latin1_General_CI_AS NULL,
[client_id] [varbinary](200) NULL,
[client_secret] [varbinary](200) NULL,
[token] [varbinary](2048) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_credentials] on [dbo].[credentials]'
GO
ALTER TABLE [dbo].[credentials] ADD CONSTRAINT [PK_credentials] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_credentials_service_name] on [dbo].[credentials]'
GO
CREATE NONCLUSTERED INDEX [IX_credentials_service_name] ON [dbo].[credentials] ([service_name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_credentials_type] on [dbo].[credentials]'
GO
CREATE NONCLUSTERED INDEX [IX_credentials_type] ON [dbo].[credentials] ([type], [environment])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_credentials_environment] on [dbo].[credentials]'
GO
CREATE NONCLUSTERED INDEX [IX_credentials_environment] ON [dbo].[credentials] ([service_name], [environment])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[credentials_c]'
GO
CREATE TABLE [dbo].[credentials_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_credentials] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_credentials_c] on [dbo].[credentials_c]'
GO
ALTER TABLE [dbo].[credentials_c] ADD CONSTRAINT [PK_credentials_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_credentials_c] on [dbo].[credentials_c]'
GO
CREATE NONCLUSTERED INDEX [IX_credentials_c] ON [dbo].[credentials_c] ([FK_rowid_credentials], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ctry]'
GO
CREATE TABLE [dbo].[ctry]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[intnum] [int] NULL,
[isonum] [int] NULL,
[isocode2] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[isocode3] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[boe_code2] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[boe_code4] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[IRreportable] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ctry] on [dbo].[ctry]'
GO
ALTER TABLE [dbo].[ctry] ADD CONSTRAINT [PK_ctry] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_boe_code2] on [dbo].[ctry]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_boe_code2] ON [dbo].[ctry] ([boe_code2])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_boe_code4] on [dbo].[ctry]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_boe_code4] ON [dbo].[ctry] ([boe_code4])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_intnum] on [dbo].[ctry]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_intnum] ON [dbo].[ctry] ([intnum])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_isocode3] on [dbo].[ctry]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_isocode3] ON [dbo].[ctry] ([isocode3])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_isonum] on [dbo].[ctry]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_isonum] ON [dbo].[ctry] ([isonum])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ctry]'
GO
ALTER TABLE [dbo].[ctry] ADD CONSTRAINT [IX_ctry_name] UNIQUE NONCLUSTERED  ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ctry_c]'
GO
CREATE TABLE [dbo].[ctry_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ctry] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ctry_c] on [dbo].[ctry_c]'
GO
ALTER TABLE [dbo].[ctry_c] ADD CONSTRAINT [PK_ctry_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ctry_c] on [dbo].[ctry_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ctry_c] ON [dbo].[ctry_c] ([FK_rowid_ctry], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector]'
GO
CREATE TABLE [dbo].[dataselector]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[priority] [int] NULL,
[table1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[childtable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[childtable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[childtable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[childtable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[childtable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets1] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator1] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring1] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint1] [int] NULL,
[wherevaluebigint1] [bigint] NULL,
[wherevaluedatetime1] [datetime] NULL,
[wherevaluedecimal1] [decimal] (23, 5) NULL,
[wherevariable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula1] [int] NULL,
[whereclosebrackets1] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wherejoin1] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets2] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator2] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring2] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint2] [int] NULL,
[wherevaluebigint2] [bigint] NULL,
[wherevaluedatetime2] [datetime] NULL,
[wherevaluedecimal2] [decimal] (23, 5) NULL,
[wherevariable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula2] [int] NULL,
[whereclosebrackets2] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wherejoin2] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets3] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator3] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring3] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint3] [int] NULL,
[wherevaluebigint3] [bigint] NULL,
[wherevaluedatetime3] [datetime] NULL,
[wherevaluedecimal3] [decimal] (23, 5) NULL,
[wherevariable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula3] [int] NULL,
[whereclosebrackets3] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wherejoin3] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets4] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator4] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring4] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint4] [int] NULL,
[wherevaluebigint4] [bigint] NULL,
[wherevaluedatetime4] [datetime] NULL,
[wherevaluedecimal4] [decimal] (23, 5) NULL,
[wherevariable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula4] [int] NULL,
[whereclosebrackets4] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wherejoin4] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets5] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator5] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring5] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint5] [int] NULL,
[wherevaluebigint5] [bigint] NULL,
[wherevaluedatetime5] [datetime] NULL,
[wherevaluedecimal5] [decimal] (23, 5) NULL,
[wherevariable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula5] [int] NULL,
[whereclosebrackets5] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wherejoin5] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[whereopenbrackets6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[wheretable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherefield6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereoperator6] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[wheredbexplicit6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherevaluestring6] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[wherevalueint6] [int] NULL,
[wherevaluebigint6] [bigint] NULL,
[wherevaluedatetime6] [datetime] NULL,
[wherevaluedecimal6] [decimal] (23, 5) NULL,
[wherevariable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejointable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[wherejoinfield6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[whereformula6] [int] NULL,
[whereclosebrackets6] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[schedule_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[schedule_cycle] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[schedule_every] [int] NULL,
[schedule_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[schedule_day] [int] NULL,
[schedule_nextdate] [datetime] NULL,
[schedule_minutes] [int] NULL,
[archive_table] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[data_lastrundatestart] [datetime] NULL,
[data_lastrundateend] [datetime] NULL,
[data_lastruntimestart] [datetime] NULL,
[data_lastruntimeend] [datetime] NULL,
[data_lastruntimeminutes] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector] on [dbo].[dataselector]'
GO
ALTER TABLE [dbo].[dataselector] ADD CONSTRAINT [PK_dataselector] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_id] on [dbo].[dataselector]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_dataselector_id] ON [dbo].[dataselector] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_priority] on [dbo].[dataselector]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_priority] ON [dbo].[dataselector] ([priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_action]'
GO
CREATE TABLE [dbo].[dataselector_action]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[priority] [int] NULL,
[postpone_days] [int] NULL,
[keep_employee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dataselector_id] [int] NULL,
[work_template_id] [int] NULL,
[description_formula_id] [int] NULL,
[data_action_id] [int] NULL,
[coded_action_id] [int] NULL,
[securemessage] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_dataselector] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_action] on [dbo].[dataselector_action]'
GO
ALTER TABLE [dbo].[dataselector_action] ADD CONSTRAINT [PK_dataselector_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_action_priority] on [dbo].[dataselector_action]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_dataselector_action_priority] ON [dbo].[dataselector_action] ([dataselector_id], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_action_unique] on [dbo].[dataselector_action]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_action_unique] ON [dbo].[dataselector_action] ([work_template_id], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_actioncondition]'
GO
CREATE TABLE [dbo].[dataselector_actioncondition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_dataselector_action] [bigint] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_actioncondition] on [dbo].[dataselector_actioncondition]'
GO
ALTER TABLE [dbo].[dataselector_actioncondition] ADD CONSTRAINT [PK_dataselector_actioncondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_actioncondition] on [dbo].[dataselector_actioncondition]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_dataselector_actioncondition] ON [dbo].[dataselector_actioncondition] ([FK_rowid_dataselector_action], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_actioncondition_c]'
GO
CREATE TABLE [dbo].[dataselector_actioncondition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_dataselector_actioncondition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_actioncondition_c] on [dbo].[dataselector_actioncondition_c]'
GO
ALTER TABLE [dbo].[dataselector_actioncondition_c] ADD CONSTRAINT [PK_dataselector_actioncondition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_actioncondition_c] on [dbo].[dataselector_actioncondition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_actioncondition_c] ON [dbo].[dataselector_actioncondition_c] ([FK_rowid_dataselector_actioncondition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_c]'
GO
CREATE TABLE [dbo].[dataselector_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_dataselector] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_c] on [dbo].[dataselector_c]'
GO
ALTER TABLE [dbo].[dataselector_c] ADD CONSTRAINT [PK_dataselector_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_c] on [dbo].[dataselector_c]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_c] ON [dbo].[dataselector_c] ([FK_rowid_dataselector], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_condition]'
GO
CREATE TABLE [dbo].[dataselector_condition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_dataselector] [bigint] NOT NULL,
[FK_rowid_condition] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_condition] on [dbo].[dataselector_condition]'
GO
ALTER TABLE [dbo].[dataselector_condition] ADD CONSTRAINT [PK_dataselector_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_condition_FKdataselector] on [dbo].[dataselector_condition]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_condition_FKdataselector] ON [dbo].[dataselector_condition] ([FK_rowid_dataselector], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_condition_c]'
GO
CREATE TABLE [dbo].[dataselector_condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_dataselector_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_condition_c] on [dbo].[dataselector_condition_c]'
GO
ALTER TABLE [dbo].[dataselector_condition_c] ADD CONSTRAINT [PK_dataselector_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_condition_c] on [dbo].[dataselector_condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_condition_c] ON [dbo].[dataselector_condition_c] ([FK_rowid_dataselector_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dcouttxns]'
GO
CREATE TABLE [dbo].[dcouttxns]
(
[rowid] [bigint] NOT NULL,
[intsortcode] [int] NOT NULL,
[intacctno] [bigint] NOT NULL,
[extsortcode] [int] NOT NULL,
[extacctno] [bigint] NOT NULL,
[extname] [varchar] (18) COLLATE Latin1_General_CI_AS NOT NULL,
[ref] [varchar] (18) COLLATE Latin1_General_CI_AS NOT NULL,
[amount] [dbo].[balance] NOT NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NOT NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NOT NULL,
[voiddate] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_bacstxnhdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_autopymt] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dcouttxns] on [dbo].[dcouttxns]'
GO
ALTER TABLE [dbo].[dcouttxns] ADD CONSTRAINT [PK_dcouttxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dcouttxns_FKtxns] on [dbo].[dcouttxns]'
GO
CREATE NONCLUSTERED INDEX [IX_dcouttxns_FKtxns] ON [dbo].[dcouttxns] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[extacct]'
GO
CREATE TABLE [dbo].[extacct]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[subbranch] [int] NULL,
[acctno] [bigint] NOT NULL,
[rollno] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[acctname] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_extacct] on [dbo].[extacct]'
GO
ALTER TABLE [dbo].[extacct] ADD CONSTRAINT [PK_extacct] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddintxns]'
GO
CREATE TABLE [dbo].[ddintxns]
(
[rowid] [bigint] NOT NULL,
[ref] [varchar] (30) COLLATE Latin1_General_CI_AS NOT NULL,
[intsortcode] [int] NOT NULL,
[intacctno] [bigint] NOT NULL,
[extacctno] [bigint] NOT NULL,
[extsortcode] [int] NOT NULL,
[extname] [varchar] (50) COLLATE Latin1_General_CI_AS NOT NULL,
[amount] [dbo].[balance] NOT NULL,
[trancode] [varchar] (2) COLLATE Latin1_General_CI_AS NOT NULL,
[daterequested] [datetime] NOT NULL,
[datereversed] [datetime] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NOT NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_bacstxnhdr] [bigint] NOT NULL,
[FK_rowid_ddiin] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddintxns] on [dbo].[ddintxns]'
GO
ALTER TABLE [dbo].[ddintxns] ADD CONSTRAINT [PK_ddintxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddiout_c]'
GO
CREATE TABLE [dbo].[ddiout_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ddiout] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddiout_c] on [dbo].[ddiout_c]'
GO
ALTER TABLE [dbo].[ddiout_c] ADD CONSTRAINT [PK_ddiout_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddiout_c] on [dbo].[ddiout_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ddiout_c] ON [dbo].[ddiout_c] ([FK_rowid_ddiout], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddorigin]'
GO
CREATE TABLE [dbo].[ddorigin]
(
[rowid] [bigint] NOT NULL,
[service_user_no] [int] NULL,
[service_user_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addressee_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postal_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr_line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr_line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr_line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr_line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[tel_number] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[fax_number] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[user_addr_line6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[sponsor_bank_code] [int] NULL,
[orig_status] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[auddis_status] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[notification_period] [int] NULL,
[dormancy_period] [int] NULL,
[market_segment] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[amalgamation_flag] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[amendment_date] [datetime] NULL,
[partial_check] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[migration] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddorigin] on [dbo].[ddorigin]'
GO
ALTER TABLE [dbo].[ddorigin] ADD CONSTRAINT [PK_ddorigin] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddorigin_migration] on [dbo].[ddorigin]'
GO
CREATE NONCLUSTERED INDEX [IX_ddorigin_migration] ON [dbo].[ddorigin] ([migration])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddorigin_service_user_no] on [dbo].[ddorigin]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ddorigin_service_user_no] ON [dbo].[ddorigin] ([service_user_no])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddorigin_acct]'
GO
CREATE TABLE [dbo].[ddorigin_acct]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[type] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[amendment_date] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ddorigin] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddorigin_acct] on [dbo].[ddorigin_acct]'
GO
ALTER TABLE [dbo].[ddorigin_acct] ADD CONSTRAINT [PK_ddorigin_acct] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddorigin_acct_sortcode] on [dbo].[ddorigin_acct]'
GO
CREATE NONCLUSTERED INDEX [IX_ddorigin_acct_sortcode] ON [dbo].[ddorigin_acct] ([FK_rowid_ddorigin], [sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddorigin_acct_c]'
GO
CREATE TABLE [dbo].[ddorigin_acct_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ddorigin_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddorigin_acct_c] on [dbo].[ddorigin_acct_c]'
GO
ALTER TABLE [dbo].[ddorigin_acct_c] ADD CONSTRAINT [PK_ddorigin_acct_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddorigin_acct_c] on [dbo].[ddorigin_acct_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ddorigin_acct_c] ON [dbo].[ddorigin_acct_c] ([FK_rowid_ddorigin_acct], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddorigin_c]'
GO
CREATE TABLE [dbo].[ddorigin_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ddorigin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddorigin_c] on [dbo].[ddorigin_c]'
GO
ALTER TABLE [dbo].[ddorigin_c] ADD CONSTRAINT [PK_ddorigin_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddorigin_c] on [dbo].[ddorigin_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ddorigin_c] ON [dbo].[ddorigin_c] ([FK_rowid_ddorigin], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddrevhdr]'
GO
CREATE TABLE [dbo].[ddrevhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[tottxns] [int] NULL,
[totamount] [dbo].[balance] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddrevhdr] on [dbo].[ddrevhdr]'
GO
ALTER TABLE [dbo].[ddrevhdr] ADD CONSTRAINT [PK_ddrevhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddrevhdr_submission] on [dbo].[ddrevhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_ddrevhdr_submission] ON [dbo].[ddrevhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddrevtxns]'
GO
CREATE TABLE [dbo].[ddrevtxns]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[destinationname] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[destinationsortcode] [int] NULL,
[destinationacctno] [bigint] NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[payername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[bacsprocess] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[serviceuserno] [int] NULL,
[serviceusername] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[reasondesc] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[letter] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[overdrawn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_ddrevhdr] [bigint] NULL,
[letterbookvalue] [dbo].[balance] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddrevtxns] on [dbo].[ddrevtxns]'
GO
ALTER TABLE [dbo].[ddrevtxns] ADD CONSTRAINT [PK_ddrevtxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddrevtxns_identifier] on [dbo].[ddrevtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ddrevtxns_identifier] ON [dbo].[ddrevtxns] ([FK_rowid_ddrevhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddrevtxns_FK_rowid_txns] on [dbo].[ddrevtxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ddrevtxns_FK_rowid_txns] ON [dbo].[ddrevtxns] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ddrevtxns_c]'
GO
CREATE TABLE [dbo].[ddrevtxns_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ddrevtxns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ddrevtxns_c] on [dbo].[ddrevtxns_c]'
GO
ALTER TABLE [dbo].[ddrevtxns_c] ADD CONSTRAINT [PK_ddrevtxns_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ddrevtxns_c] on [dbo].[ddrevtxns_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ddrevtxns_c] ON [dbo].[ddrevtxns_c] ([FK_rowid_ddrevtxns], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[trea]'
GO
CREATE TABLE [dbo].[trea]
(
[rowid] [bigint] NOT NULL,
[custno] [int] NULL,
[type] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[code] [int] NULL,
[sequence] [int] NULL,
[name] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[balance] [dbo].[balance] NULL,
[interest] [dbo].[balance] NULL,
[accrued] [dbo].[balance] NULL,
[date] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_trea] on [dbo].[trea]'
GO
ALTER TABLE [dbo].[trea] ADD CONSTRAINT [PK_trea] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[trea]'
GO
ALTER TABLE [dbo].[trea] ADD CONSTRAINT [IX_trea_lookup] UNIQUE NONCLUSTERED  ([custno], [type], [code], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[deal]'
GO
CREATE TABLE [dbo].[deal]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[type] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[sub] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[date] [datetime] NULL,
[maturity] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[interest] [dbo].[balance] NULL,
[accrued] [dbo].[balance] NULL,
[rate] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[yield] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[purchase] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_trea] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_deal] on [dbo].[deal]'
GO
ALTER TABLE [dbo].[deal] ADD CONSTRAINT [PK_deal] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[development_c]'
GO
CREATE TABLE [dbo].[development_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_development] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_development_c] on [dbo].[development_c]'
GO
ALTER TABLE [dbo].[development_c] ADD CONSTRAINT [PK_development_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_development_c] on [dbo].[development_c]'
GO
CREATE NONCLUSTERED INDEX [IX_development_c] ON [dbo].[development_c] ([FK_rowid_development], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dm_index]'
GO
CREATE TABLE [dbo].[dm_index]
(
[rowid] [bigint] NOT NULL,
[level1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[customer_index] [int] NULL,
[customer_name_index] [int] NULL,
[customer_guid_index] [int] NULL,
[people_index] [int] NULL,
[nonpers_index] [int] NULL,
[account_index] [int] NULL,
[account_guid_index] [int] NULL,
[application_index] [int] NULL,
[application_guid_index] [int] NULL,
[document_index] [int] NULL,
[section_index] [int] NULL,
[description_index] [int] NULL,
[guid_index] [int] NULL,
[date_index] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_documentconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dm_index] on [dbo].[dm_index]'
GO
ALTER TABLE [dbo].[dm_index] ADD CONSTRAINT [PK_dm_index] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dm_index_level1] on [dbo].[dm_index]'
GO
CREATE NONCLUSTERED INDEX [IX_dm_index_level1] ON [dbo].[dm_index] ([level1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dm_index_c]'
GO
CREATE TABLE [dbo].[dm_index_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_dm_index] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dm_index_c] on [dbo].[dm_index_c]'
GO
ALTER TABLE [dbo].[dm_index_c] ADD CONSTRAINT [PK_dm_index_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dm_index_c] on [dbo].[dm_index_c]'
GO
CREATE NONCLUSTERED INDEX [IX_dm_index_c] ON [dbo].[dm_index_c] ([FK_rowid_dm_index], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[documentconfig]'
GO
CREATE TABLE [dbo].[documentconfig]
(
[rowid] [bigint] NOT NULL,
[inbound_storage] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[inbound_location] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[AC_inbound_storage][varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[AC_inbound_location] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[outbound_format] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[outbound_storage] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[outbound_location] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[outbound_source] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[virtual_cabinet_path] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[outlook_path] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_documentconfig] on [dbo].[documentconfig]'
GO
ALTER TABLE [dbo].[documentconfig] ADD CONSTRAINT [PK_documentconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[document]'
GO
CREATE TABLE [dbo].[document]
(
[rowid] [bigint] NOT NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[storage] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[guid] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_item] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_document] on [dbo].[document]'
GO
ALTER TABLE [dbo].[document] ADD CONSTRAINT [PK_document] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_document] on [dbo].[document]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_document] ON [dbo].[document] ([FK_rowid_work_item])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[document_image]'
GO
CREATE TABLE [dbo].[document_image]
(
[rowid] [bigint] NOT NULL,
[part] [int] NULL,
[image] [image] NULL,
[FK_rowid_document] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_document_image] on [dbo].[document_image]'
GO
ALTER TABLE [dbo].[document_image] ADD CONSTRAINT [PK_document_image] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_document_image] on [dbo].[document_image]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_document_image] ON [dbo].[document_image] ([FK_rowid_document], [part])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_item]'
GO
CREATE TABLE [dbo].[work_item]
(
[rowid] [bigint] NOT NULL,
[id] [bigint] NULL,
[origin] [bigint] NULL,
[priority] [int] NULL,
[postpone_count] [int] NULL,
[assigned_to] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[has_comments] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[last_comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[linkrow1] [bigint] NULL,
[linkrow2] [bigint] NULL,
[linkrow3] [bigint] NULL,
[linkrow4] [bigint] NULL,
[linkrow5] [bigint] NULL,
[linkrow6] [bigint] NULL,
[copies] [int] NULL,
[reprint] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[peer_review_for_empl] [int] NULL,
[work_date] [datetime] NULL,
[create_date] [datetime] NULL,
[assignable_date] [datetime] NULL,
[assignable_time] [datetime] NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status_reason] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[status_change_date] [datetime] NULL,
[status_change_time] [datetime] NULL,
[contact_rowid] [bigint] NULL,
[cycle] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cycle_every] [int] NULL,
[cycle_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[cycle_day] [int] NULL,
[cycle_next] [datetime] NULL,
[cycle_flag] [int] NULL,
[document_guid] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[dm_section] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[overridden_salutation] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[overridden_addressee] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[overridden_company] [varchar] (75) COLLATE Latin1_General_CI_AS NULL,
[wiflags] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_item_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_item] on [dbo].[work_item]'
GO
ALTER TABLE [dbo].[work_item] ADD CONSTRAINT [PK_work_item] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_empl] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_empl] ON [dbo].[work_item] ([assigned_to], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_cycle_next] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_cycle_next] ON [dbo].[work_item] ([cycle_flag], [cycle_next])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_document_guid] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_document_guid] ON [dbo].[work_item] ([document_guid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow1_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow1_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow2_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow2_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow2])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow3_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow3_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow3])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow4_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow4_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow4])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow5_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow5_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow5])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow6_FK] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow6_FK] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [linkrow6])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_required_fields] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_required_fields] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [work_date], [priority], [description]) INCLUDE ([assigned_to], [id], [last_comment], [linkrow1], [linkrow2], [linkrow3], [linkrow4], [linkrow5], [linkrow6], [peer_review_for_empl], [reprint], [rowid], [sortcode], [status_change_date], [status_change_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_work_date2] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_work_date2] ON [dbo].[work_item] ([FK_rowid_work_item_template], [status], [work_date], [priority], [description], [rowid]) INCLUDE ([amenddate], [amendempl], [amendtime], [assignable_date], [assignable_time], [assigned_to], [contact_rowid], [copies], [create_date], [createdate], [createempl], [createtime], [has_comments], [id], [linkrow1], [linkrow2], [linkrow3], [linkrow4], [linkrow5], [linkrow6], [origin], [peer_review_for_empl], [postpone_count], [reprint], [sortcode], [status_change_date], [status_change_time], [status_reason])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_item]'
GO
ALTER TABLE [dbo].[work_item] ADD CONSTRAINT [IX_work_item_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow1] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow1] ON [dbo].[work_item] ([linkrow1]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow2], [linkrow3], [linkrow4], [linkrow5], [linkrow6], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow2] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow2] ON [dbo].[work_item] ([linkrow2]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow1], [linkrow3], [linkrow4], [linkrow5], [linkrow6], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow3] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow3] ON [dbo].[work_item] ([linkrow3]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow1], [linkrow2], [linkrow4], [linkrow5], [linkrow6], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow4] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow4] ON [dbo].[work_item] ([linkrow4]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow1], [linkrow2], [linkrow3], [linkrow5], [linkrow6], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow5] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow5] ON [dbo].[work_item] ([linkrow5]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow1], [linkrow2], [linkrow3], [linkrow4], [linkrow6], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_linkrow6] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_linkrow6] ON [dbo].[work_item] ([linkrow6]) INCLUDE ([assigned_to], [description], [FK_rowid_work_item_template], [id], [last_comment], [linkrow1], [linkrow2], [linkrow3], [linkrow4], [linkrow5], [reprint], [rowid], [status], [status_change_date], [status_change_time], [work_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_origin] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_origin] ON [dbo].[work_item] ([origin])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_status] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_status] ON [dbo].[work_item] ([status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_work_date] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_work_date] ON [dbo].[work_item] ([status], [FK_rowid_work_item_template], [rowid], [work_date], [priority], [description]) INCLUDE ([amenddate], [amendempl], [amendtime], [assignable_date], [assignable_time], [assigned_to], [contact_rowid], [copies], [create_date], [createdate], [createempl], [createtime], [has_comments], [id], [linkrow1], [linkrow2], [linkrow3], [linkrow4], [linkrow5], [linkrow6], [origin], [peer_review_for_empl], [postpone_count], [reprint], [sortcode], [status_change_date], [status_change_time], [status_reason])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_status_change_date] on [dbo].[work_item]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_status_change_date] ON [dbo].[work_item] ([status_change_date], [status_change_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_attribute]'
GO
CREATE TABLE [dbo].[work_attribute]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[length] [int] NULL,
[formatting] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[overtypeable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[function_no] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_attribute] on [dbo].[work_attribute]'
GO
ALTER TABLE [dbo].[work_attribute] ADD CONSTRAINT [PK_work_attribute] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_attribute]'
GO
ALTER TABLE [dbo].[work_attribute] ADD CONSTRAINT [IX_work_attribute] UNIQUE NONCLUSTERED  ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_attribute_c]'
GO
CREATE TABLE [dbo].[work_attribute_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_documentattributes] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_attribute_c] on [dbo].[work_attribute_c]'
GO
ALTER TABLE [dbo].[work_attribute_c] ADD CONSTRAINT [PK_work_attribute_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_attribute_c] on [dbo].[work_attribute_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_attribute_c] ON [dbo].[work_attribute_c] ([FK_rowid_documentattributes], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[documentconfig_c]'
GO
CREATE TABLE [dbo].[documentconfig_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_documentconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_documentconfig_c] on [dbo].[documentconfig_c]'
GO
ALTER TABLE [dbo].[documentconfig_c] ADD CONSTRAINT [PK_documentconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dw_stage]'
GO
CREATE TABLE [dbo].[dw_stage]
(
[rowid] [bigint] NOT NULL,
[bookdate] [datetime] NULL,
[charge_date] [datetime] NULL,
[charge] [dbo].[balance] NULL,
[charge_accr] [dbo].[accrual] NULL,
[charge_adj] [dbo].[accrual] NULL,
[charge_manual] [dbo].[balance] NULL,
[charge_manual_adj] [dbo].[accrual] NULL,
[turnover] [dbo].[balance] NULL,
[turnover_charge] [dbo].[accrual] NULL,
[turnover_accr] [dbo].[accrual] NULL,
[turnover_adj] [dbo].[accrual] NULL,
[category01_charge_no] [int] NULL,
[category01_charge_amount] [dbo].[accrual] NULL,
[category01_accr_no] [int] NULL,
[category01_accr_amount] [dbo].[accrual] NULL,
[category02_charge_no] [int] NULL,
[category02_charge_amount] [dbo].[accrual] NULL,
[category02_accr_no] [int] NULL,
[category02_accr_amount] [dbo].[accrual] NULL,
[category03_charge_no] [int] NULL,
[category03_charge_amount] [dbo].[accrual] NULL,
[category03_accr_no] [int] NULL,
[category03_accr_amount] [dbo].[accrual] NULL,
[category04_charge_no] [int] NULL,
[category04_charge_amount] [dbo].[accrual] NULL,
[category04_accr_no] [int] NULL,
[category04_accr_amount] [dbo].[accrual] NULL,
[pnint] [dbo].[accrual] NULL,
[pnint_accr] [dbo].[accrual] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[prev_bookdate] [datetime] NULL,
[prev_charge_date] [datetime] NULL,
[prev_charge] [dbo].[balance] NULL,
[prev_charge_accr] [dbo].[accrual] NULL,
[prev_charge_adj] [dbo].[accrual] NULL,
[prev_charge_manual] [dbo].[balance] NULL,
[prev_charge_manual_adj] [dbo].[accrual] NULL,
[prev_turnover] [dbo].[balance] NULL,
[prev_turnover_charge] [dbo].[accrual] NULL,
[prev_turnover_accr] [dbo].[accrual] NULL,
[prev_turnover_adj] [dbo].[accrual] NULL,
[prev_category01_charge_no] [int] NULL,
[prev_category01_charge_amount] [dbo].[accrual] NULL,
[prev_category01_accr_no] [int] NULL,
[prev_category01_accr_amount] [dbo].[accrual] NULL,
[prev_category02_charge_no] [int] NULL,
[prev_category02_charge_amount] [dbo].[accrual] NULL,
[prev_category02_accr_no] [int] NULL,
[prev_category02_accr_amount] [dbo].[accrual] NULL,
[prev_category03_charge_no] [int] NULL,
[prev_category03_charge_amount] [dbo].[accrual] NULL,
[prev_category03_accr_no] [int] NULL,
[prev_category03_accr_amount] [dbo].[accrual] NULL,
[prev_category04_charge_no] [int] NULL,
[prev_category04_charge_amount] [dbo].[accrual] NULL,
[prev_category04_accr_no] [int] NULL,
[prev_category04_accr_amount] [dbo].[accrual] NULL,
[prev_pnint] [dbo].[accrual] NULL,
[prev_pnint_accr] [dbo].[accrual] NULL,
[prev_status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dw_stage] on [dbo].[dw_stage]'
GO
ALTER TABLE [dbo].[dw_stage] ADD CONSTRAINT [PK_dw_stage] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dw_stage_FKacct] on [dbo].[dw_stage]'
GO
CREATE NONCLUSTERED INDEX [IX_dw_stage_FKacct] ON [dbo].[dw_stage] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[empl]'
GO
CREATE TABLE [dbo].[empl]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[title] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[surname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[datestarted] [datetime] NULL,
[dateleft] [datetime] NULL,
[onlinestatus] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[lstpwdchange] [datetime] NULL,
[multiplelogin] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mlogincount] [int] NULL,
[loginattempt] [int] NULL,
[sortcode] [int] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[reviewdate] [datetime] NULL,
[email] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[document_signature] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[personal_banker] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[sales_officer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[telnumber] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[position] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[gender] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[birthdate] [datetime] NULL,
[default_custacct] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_searchby] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_filter_1] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_value_1] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_filter_2] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_value_2] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_filter_3] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[default_value_3] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[previous_password] [varbinary] (256) NULL,
[fpsamlexempt] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_empl] on [dbo].[empl]'
GO
ALTER TABLE [dbo].[empl] ADD CONSTRAINT [PK_empl] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_empl_no] on [dbo].[empl]'
GO
CREATE NONCLUSTERED INDEX [IX_empl_no] ON [dbo].[empl] ([no]) INCLUDE ([sortcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_empl_name] on [dbo].[empl]'
GO
CREATE NONCLUSTERED INDEX [IX_empl_name] ON [dbo].[empl] ([surname], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[empl_c]'
GO
CREATE TABLE [dbo].[empl_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_empl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_empl_c] on [dbo].[empl_c]'
GO
ALTER TABLE [dbo].[empl_c] ADD CONSTRAINT [PK_empl_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_empl_c] on [dbo].[empl_c]'
GO
CREATE NONCLUSTERED INDEX [IX_empl_c] ON [dbo].[empl_c] ([FK_rowid_empl], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplapprovalconfig]'
GO
CREATE TABLE [dbo].[emplapprovalconfig]
(
	[rowid] [bigint] NOT NULL,
	[profilename] [varchar](50) COLLATE Latin1_General_CI_AS NULL,
	[fieldname] [varchar](50) COLLATE Latin1_General_CI_AS NULL,
	[status] [varchar](10) COLLATE Latin1_General_CI_AS NULL,
	[createempl] [int] NULL,
	[createdate] [datetime] NULL,
	[createtime] [datetime] NULL,
	[amendempl] [int] NULL,
	[amenddate] [datetime] NULL,
	[amendtime] [datetime] NULL,
	[FK_rowid_SDKdetail] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplapprovalconfig] on [dbo].[emplapprovalconfig]'
GO
ALTER TABLE [dbo].[emplapprovalconfig] ADD CONSTRAINT [PK_emplapprovalconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[emplapprovalconfig]'
GO
ALTER TABLE [dbo].[emplapprovalconfig] ADD CONSTRAINT [FK_emplapprovalconfig_SDKdetail] FOREIGN KEY ([FK_rowid_SDKdetail]) REFERENCES [dbo].[SDKdetail] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplapprovalconfig] on [dbo].[emplapprovalconfig]'
GO
CREATE NONCLUSTERED INDEX [IX_emplapprovalconfig] ON [dbo].[emplapprovalconfig] ([FK_rowid_SDKdetail])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplapprovalconfig_profilename] on [dbo].[emplapprovalconfig]'
GO
CREATE NONCLUSTERED INDEX [IX_emplapprovalconfig_profilename] ON [dbo].[emplapprovalconfig] ([profilename], [fieldname])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplapprovalconfig_c]'
GO
CREATE TABLE [dbo].[emplapprovalconfig_c]
(
	[rowid] [bigint] NOT NULL,
	[fieldname] [varchar](50) COLLATE Latin1_General_CI_AS NULL,
	[oldvalue] [varchar](250) COLLATE Latin1_General_CI_AS NULL,
	[newvalue] [varchar](250) COLLATE Latin1_General_CI_AS NULL,
	[datestamp] [datetime] NULL,
	[timestamp] [datetime] NULL,
	[emplstamp] [int] NULL,
	[FK_rowid_emplapprovalconfig] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplapprovalconfig_c] on [dbo].[emplapprovalconfig_c]'
GO
ALTER TABLE [dbo].[emplapprovalconfig_c] ADD CONSTRAINT [PK_emplapprovalconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[emplapprovalconfig_c]'
GO
ALTER TABLE [dbo].[emplapprovalconfig_c] ADD CONSTRAINT [FK_emplapprovalconfig_c_emplapprovalconfig] FOREIGN KEY ([FK_rowid_emplapprovalconfig]) REFERENCES [dbo].[emplapprovalconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplapprovalconfig_c] on [dbo].[emplapprovalconfig_c]'
GO
CREATE NONCLUSTERED INDEX [IX_emplapprovalconfig_c] ON [dbo].[emplapprovalconfig_c] ([FK_rowid_emplapprovalconfig], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplconfig]'
GO
CREATE TABLE [dbo].[emplconfig]
(
[rowid] [bigint] NOT NULL,
[minlength] [int] NULL,
[maxlength] [int] NULL,
[minloweralphabetic] [int] NULL,
[minupperalphabetic] [int] NULL,
[minnumeric] [int] NULL,
[minnonalphanumeric] [int] NULL,
[allowusername] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allowspace] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[defaultpassword] [varbinary] (100) NULL,
[minageper] [int] NULL,
[minagefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[maxageper] [int] NULL,
[maxagefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[reuseper] [int] NULL,
[reusefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[lockoutthreshold] [int] NULL,
[wizardhelp1] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[wizardhelp2] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[wizardhelp3] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[wizardhelp4] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[wizardhelp5] [varchar] (80) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplconfig] on [dbo].[emplconfig]'
GO
ALTER TABLE [dbo].[emplconfig] ADD CONSTRAINT [PK_emplconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplconfig_c]'
GO
CREATE TABLE [dbo].[emplconfig_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_emplconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplconfig_c] on [dbo].[emplconfig_c]'
GO
ALTER TABLE [dbo].[emplconfig_c] ADD CONSTRAINT [PK_emplconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplconfig_c] on [dbo].[emplconfig_c]'
GO
CREATE NONCLUSTERED INDEX [IX_emplconfig_c] ON [dbo].[emplconfig_c] ([FK_rowid_emplconfig], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplmodel]'
GO
CREATE TABLE [dbo].[emplmodel]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[preferred_printer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_empl] [bigint] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplmodel] on [dbo].[emplmodel]'
GO
ALTER TABLE [dbo].[emplmodel] ADD CONSTRAINT [PK_emplmodel] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplmodel_status] on [dbo].[emplmodel]'
GO
CREATE NONCLUSTERED INDEX [IX_emplmodel_status] ON [dbo].[emplmodel] ([FK_rowid_empl], [FK_rowid_model], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplmodel_status_type] on [dbo].[emplmodel]'
GO
CREATE NONCLUSTERED INDEX [IX_emplmodel_status_type] ON [dbo].[emplmodel] ([FK_rowid_empl], [status], [rowid], [type], [FK_rowid_model])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplmodel_status_FK_empl] on [dbo].[emplmodel]'
GO
CREATE NONCLUSTERED INDEX [IX_emplmodel_status_FK_empl] ON [dbo].[emplmodel] ([FK_rowid_empl], [type], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplmodel_status_FK_model] on [dbo].[emplmodel]'
GO
CREATE NONCLUSTERED INDEX [IX_emplmodel_status_FK_model] ON [dbo].[emplmodel] ([FK_rowid_model], [type], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[emplmodel_c]'
GO
CREATE TABLE [dbo].[emplmodel_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_emplmodel] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_emplmodel_c] on [dbo].[emplmodel_c]'
GO
ALTER TABLE [dbo].[emplmodel_c] ADD CONSTRAINT [PK_emplmodel_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_emplmodel_c] on [dbo].[emplmodel_c]'
GO
CREATE NONCLUSTERED INDEX [IX_emplmodel_c] ON [dbo].[emplmodel_c] ([FK_rowid_emplmodel], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[encashment_c]'
GO
CREATE TABLE [dbo].[encashment_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_encashment] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_encashment_c] on [dbo].[encashment_c]'
GO
ALTER TABLE [dbo].[encashment_c] ADD CONSTRAINT [PK_encashment_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_encashment_c] on [dbo].[encashment_c]'
GO
CREATE NONCLUSTERED INDEX [IX_encashment_c] ON [dbo].[encashment_c] ([FK_rowid_encashment], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[eventdef]'
GO
CREATE TABLE [dbo].[eventdef]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (64) COLLATE Latin1_General_CI_AS NULL,
[id] [int] NULL,
[action] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[feeid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[derive_amount] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[percentage] [decimal] (5, 2) NULL,
[is_overridable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee_behaviour] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[start_date] [datetime] NULL,
[next_date] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_eventdef] on [dbo].[eventdef]'
GO
ALTER TABLE [dbo].[eventdef] ADD CONSTRAINT [PK_eventdef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_eventdef_event] on [dbo].[eventdef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_eventdef_event] ON [dbo].[eventdef] ([FK_rowid_prod], [type], [id], [start_date], [next_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[eventdef_c]'
GO
CREATE TABLE [dbo].[eventdef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_eventdef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_eventdef_c] on [dbo].[eventdef_c]'
GO
ALTER TABLE [dbo].[eventdef_c] ADD CONSTRAINT [PK_eventdef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_eventdef_c] on [dbo].[eventdef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_eventdef_c] ON [dbo].[eventdef_c] ([FK_rowid_eventdef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[eventdef_condition]'
GO
CREATE TABLE [dbo].[eventdef_condition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_eventdef] [bigint] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_eventdef_condition] on [dbo].[eventdef_condition]'
GO
ALTER TABLE [dbo].[eventdef_condition] ADD CONSTRAINT [PK_eventdef_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_eventdef_condition] on [dbo].[eventdef_condition]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_eventdef_condition] ON [dbo].[eventdef_condition] ([FK_rowid_eventdef], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exch]'
GO
CREATE TABLE [dbo].[exch]
(
[rowid] [bigint] NOT NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[instrument] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[effective] [datetime] NULL,
[time] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exch] on [dbo].[exch]'
GO
ALTER TABLE [dbo].[exch] ADD CONSTRAINT [PK_exch] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[exch]'
GO
ALTER TABLE [dbo].[exch] ADD CONSTRAINT [IX_exch_ccy] UNIQUE NONCLUSTERED  ([ccy], [instrument])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exch_c]'
GO
CREATE TABLE [dbo].[exch_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_exch] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exch_c] on [dbo].[exch_c]'
GO
ALTER TABLE [dbo].[exch_c] ADD CONSTRAINT [PK_exch_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_exch_c] on [dbo].[exch_c]'
GO
CREATE NONCLUSTERED INDEX [IX_exch_c] ON [dbo].[exch_c] ([FK_rowid_exch], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exchrate]'
GO
CREATE TABLE [dbo].[exchrate]
(
[rowid] [bigint] NOT NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[buy] [decimal] (12, 6) NULL,
[mid] [decimal] (12, 6) NULL,
[sell] [decimal] (12, 6) NULL,
[divmul] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_exch] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exchrate] on [dbo].[exchrate]'
GO
ALTER TABLE [dbo].[exchrate] ADD CONSTRAINT [PK_exchrate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[exchrate]'
GO
ALTER TABLE [dbo].[exchrate] ADD CONSTRAINT [IX_exchrate_ccy] UNIQUE NONCLUSTERED  ([FK_rowid_exch], [ccy])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exchrate_c]'
GO
CREATE TABLE [dbo].[exchrate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_exchrate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exchrate_c] on [dbo].[exchrate_c]'
GO
ALTER TABLE [dbo].[exchrate_c] ADD CONSTRAINT [PK_exchrate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_exchrate_c] on [dbo].[exchrate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_exchrate_c] ON [dbo].[exchrate_c] ([FK_rowid_exchrate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exposure]'
GO
CREATE TABLE [dbo].[exposure]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[groupid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[accttype] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[accno] [bigint] NULL,
[sortcode] [int] NULL,
[accsub] [int] NULL,
[FK_rowid_acctgroup] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exposure] on [dbo].[exposure]'
GO
ALTER TABLE [dbo].[exposure] ADD CONSTRAINT [PK_exposure] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_exposure_FKacctgroup] on [dbo].[exposure]'
GO
CREATE NONCLUSTERED INDEX [IX_exposure_FKacctgroup] ON [dbo].[exposure] ([FK_rowid_acctgroup])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[exposure]'
GO
ALTER TABLE [dbo].[exposure] ADD CONSTRAINT [IX_exposure] UNIQUE NONCLUSTERED  ([type], [accttype], [sortcode], [accno], [accsub], [groupid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[exposure_c]'
GO
CREATE TABLE [dbo].[exposure_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_exposure] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_exposure_c] on [dbo].[exposure_c]'
GO
ALTER TABLE [dbo].[exposure_c] ADD CONSTRAINT [PK_exposure_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_exposure_c] on [dbo].[exposure_c]'
GO
CREATE NONCLUSTERED INDEX [IX_exposure_c] ON [dbo].[exposure_c] ([FK_rowid_exposure], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[extacct_c]'
GO
CREATE TABLE [dbo].[extacct_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_extacct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_extacct_c] on [dbo].[extacct_c]'
GO
ALTER TABLE [dbo].[extacct_c] ADD CONSTRAINT [PK_extacct_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_extacct_c] on [dbo].[extacct_c]'
GO
CREATE NONCLUSTERED INDEX [IX_extacct_c] ON [dbo].[extacct_c] ([FK_rowid_extacct], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fee]'
GO
CREATE TABLE [dbo].[fee]
(
[rowid] [bigint] NOT NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[call_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[loan_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[term_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[usage] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[amount] [decimal] (10, 2) NULL,
[currency] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[allow_excess] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fee] on [dbo].[fee]'
GO
ALTER TABLE [dbo].[fee] ADD CONSTRAINT [PK_fee] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[fee]'
GO
ALTER TABLE [dbo].[fee] ADD CONSTRAINT [IX_fee_id] UNIQUE NONCLUSTERED  ([id], [source])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fee_c]'
GO
CREATE TABLE [dbo].[fee_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_fee] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fee_c] on [dbo].[fee_c]'
GO
ALTER TABLE [dbo].[fee_c] ADD CONSTRAINT [PK_fee_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fee_c] on [dbo].[fee_c]'
GO
CREATE NONCLUSTERED INDEX [IX_fee_c] ON [dbo].[fee_c] ([FK_rowid_fee], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[feeoverride]'
GO
CREATE TABLE [dbo].[feeoverride]
(
[rowid] [bigint] NOT NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[usage] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[amount] [decimal] (10, 2) NULL,
[currency] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_acctgroup] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_feeoverride] on [dbo].[feeoverride]'
GO
ALTER TABLE [dbo].[feeoverride] ADD CONSTRAINT [PK_feeoverride] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[feeoverride]'
GO
ALTER TABLE [dbo].[feeoverride] ADD CONSTRAINT [IX_feeoverride_lookup] UNIQUE NONCLUSTERED  ([id], [source], [status], [FK_rowid_prod], [FK_rowid_acct], [FK_rowid_acctgroup])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[feeoverride_c]'
GO
CREATE TABLE [dbo].[feeoverride_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_feeoverride] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_feeoverride_c] on [dbo].[feeoverride_c]'
GO
ALTER TABLE [dbo].[feeoverride_c] ADD CONSTRAINT [PK_feeoverride_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_feeoverride_c] on [dbo].[feeoverride_c]'
GO
CREATE NONCLUSTERED INDEX [IX_feeoverride_c] ON [dbo].[feeoverride_c] ([FK_rowid_feeoverride], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[formula]'
GO
CREATE TABLE [dbo].[formula]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[returntype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[function_no] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[openbrackets1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime1] [datetime] NULL,
[valuestring1] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint1] [int] NULL,
[valuebigint1] [bigint] NULL,
[valuedecimal1] [decimal] (23, 5) NULL,
[variable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator1] [varchar] (3) COLLATE Latin1_General_CI_AS NOT NULL,
[formattinginteger1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring1] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros1] [int] NULL,
[openbrackets2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime2] [datetime] NULL,
[valuestring2] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint2] [int] NULL,
[valuebigint2] [bigint] NULL,
[valuedecimal2] [decimal] (23, 5) NULL,
[variable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros2] [int] NULL,
[openbrackets3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime3] [datetime] NULL,
[valuestring3] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint3] [int] NULL,
[valuebigint3] [bigint] NULL,
[valuedecimal3] [decimal] (23, 5) NULL,
[variable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator3] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros3] [int] NULL,
[openbrackets4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime4] [datetime] NULL,
[valuestring4] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint4] [int] NULL,
[valuebigint4] [bigint] NULL,
[valuedecimal4] [decimal] (23, 5) NULL,
[variable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator4] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring4] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros4] [int] NULL,
[openbrackets5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime5] [datetime] NULL,
[valuestring5] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint5] [int] NULL,
[valuebigint5] [bigint] NULL,
[valuedecimal5] [decimal] (23, 5) NULL,
[variable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator5] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros5] [int] NULL,
[openbrackets6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime6] [datetime] NULL,
[valuestring6] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint6] [int] NULL,
[valuebigint6] [bigint] NULL,
[valuedecimal6] [decimal] (23, 5) NULL,
[variable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator6] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros6] [int] NULL,
[openbrackets7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime7] [datetime] NULL,
[valuestring7] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint7] [int] NULL,
[valuebigint7] [bigint] NULL,
[valuedecimal7] [decimal] (23, 5) NULL,
[variable7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator7] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros7] [int] NULL,
[openbrackets8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime8] [datetime] NULL,
[valuestring8] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint8] [int] NULL,
[valuebigint8] [bigint] NULL,
[valuedecimal8] [decimal] (23, 5) NULL,
[variable8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator8] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros8] [int] NULL,
[openbrackets9] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime9] [datetime] NULL,
[valuestring9] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint9] [int] NULL,
[valuebigint9] [bigint] NULL,
[valuedecimal9] [decimal] (23, 5) NULL,
[variable9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets9] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator9] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger9] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal9] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring9] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros9] [int] NULL,
[openbrackets10] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime10] [datetime] NULL,
[valuestring10] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint10] [int] NULL,
[valuebigint10] [bigint] NULL,
[valuedecimal10] [decimal] (23, 5) NULL,
[variable10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets10] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator10] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger10] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal10] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring10] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros10] [int] NULL,
[openbrackets11] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime11] [datetime] NULL,
[valuestring11] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint11] [int] NULL,
[valuebigint11] [bigint] NULL,
[valuedecimal11] [decimal] (23, 5) NULL,
[variable11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets11] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[operator11] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger11] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal11] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring11] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros11] [int] NULL,
[openbrackets12] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[table12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuedatetime12] [datetime] NULL,
[valuestring12] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint12] [int] NULL,
[valuebigint12] [bigint] NULL,
[valuedecimal12] [decimal] (23, 5) NULL,
[variable12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[closebrackets12] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattinginteger12] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingdecimal12] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingstring12] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formattingzeros12] [int] NULL,
[startdatedbexplicit] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[startdatetable] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[startdatefield] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[startdatevalue] [datetime] NULL,
[startdatevariable] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[dateoperator] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dateincrement_period] [int] NULL,
[dateincrement_freq] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dateincrement_day] [int] NULL,
[dateoperator2] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dateincrement_period2] [int] NULL,
[dateincrement_freq2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dateincrement_day2] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_formula] on [dbo].[formula]'
GO
ALTER TABLE [dbo].[formula] ADD CONSTRAINT [PK_formula] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_formula_id] on [dbo].[formula]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_formula_id] ON [dbo].[formula] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[formula_c]'
GO
CREATE TABLE [dbo].[formula_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_formula] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_formula_c] on [dbo].[formula_c]'
GO
ALTER TABLE [dbo].[formula_c] ADD CONSTRAINT [PK_formula_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_formula_c] on [dbo].[formula_c]'
GO
CREATE NONCLUSTERED INDEX [IX_formula_c] ON [dbo].[formula_c] ([FK_rowid_formula], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsinhdr]'
GO
CREATE TABLE [dbo].[fpsinhdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacscreate] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[bacssequence] [int] NULL,
[tottxnscr] [int] NULL,
[totamountcr] [dbo].[balance] NULL,
[tottxnsdr] [int] NULL,
[totamountdr] [dbo].[balance] NULL,
[tottxns] [int] NULL,
[totposted] [int] NULL,
[toterrored] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[filename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[processing_service] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsinhdr] on [dbo].[fpsinhdr]'
GO
ALTER TABLE [dbo].[fpsinhdr] ADD CONSTRAINT [PK_fpsinhdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsinhdr_filename] on [dbo].[fpsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsinhdr_filename] ON [dbo].[fpsinhdr] ([FK_rowid_model], [filename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsinhdr_bacssequence] on [dbo].[fpsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsinhdr_bacssequence] ON [dbo].[fpsinhdr] ([FK_rowid_model], [submissiondate], [bacssequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsinhdr_currency] on [dbo].[fpsinhdr]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsinhdr_currency] ON [dbo].[fpsinhdr] ([FK_rowid_model], [submissiondate], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsinhdr_submission] on [dbo].[fpsinhdr]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_fpsinhdr_submission] ON [dbo].[fpsinhdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsinhdr_c]'
GO
CREATE TABLE [dbo].[fpsinhdr_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_fpsinhdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsinhdr_c] on [dbo].[fpsinhdr_c]'
GO
ALTER TABLE [dbo].[fpsinhdr_c] ADD CONSTRAINT [PK_fpsinhdr_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsinhdr_c] on [dbo].[fpsinhdr_c]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsinhdr_c] ON [dbo].[fpsinhdr_c] ([FK_rowid_fpsinhdr], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsintxn]'
GO
CREATE TABLE [dbo].[fpsintxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [bigint] NULL,
[destinationsortcode] [int] NULL,
[destinationacctno] [bigint] NULL,
[destinationtitle] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[destinationtitleextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[originatorsortcode] [int] NULL,
[originatoracctno] [bigint] NULL,
[originatorbic] [varchar] (11) COLLATE Latin1_General_CI_AS NULL,
[originatoriban] [varchar] (34) COLLATE Latin1_General_CI_AS NULL,
[originatortitle] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[originatortitleextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[bacserror] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[bacscomplete] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bacsreference] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[trandate] [datetime] NULL,
[traceno] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[fpid] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[paymenttype] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[returnedfpid] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[returnedcode] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[schemecode] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[referredcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[referredreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[referredreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[referredsortcode] [int] NULL,
[referredacctno] [bigint] NULL,
[postreason] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[postreasonextra] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_fpsinhdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NULL,
[substsortcode] [int] NULL,
[substacctno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsintxn] on [dbo].[fpsintxn]'
GO
ALTER TABLE [dbo].[fpsintxn] ADD CONSTRAINT [PK_fpsintxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsintxn_identifier] on [dbo].[fpsintxn]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_fpsintxn_identifier] ON [dbo].[fpsintxn] ([FK_rowid_fpsinhdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsintxn_FKtxns] on [dbo].[fpsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsintxn_FKtxns] ON [dbo].[fpsintxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsintxn_fpid] on [dbo].[fpsintxn]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsintxn_fpid] ON [dbo].[fpsintxn] ([fpid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsintxn_c]'
GO
CREATE TABLE [dbo].[fpsintxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_fpsintxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsintxn_c] on [dbo].[fpsintxn_c]'
GO
ALTER TABLE [dbo].[fpsintxn_c] ADD CONSTRAINT [PK_fpsintxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsintxn_c] on [dbo].[fpsintxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsintxn_c] ON [dbo].[fpsintxn_c] ([FK_rowid_fpsintxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsouthdr]'
GO
CREATE TABLE [dbo].[fpsouthdr]
(
[rowid] [bigint] NOT NULL,
[submissiondate] [datetime] NULL,
[submission] [int] NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[processeddate] [datetime] NULL,
[processedtime] [datetime] NULL,
[bacsprocess] [datetime] NULL,
[bacsexpiry] [datetime] NULL,
[tottxnscr] [int] NULL,
[totamountcr] [dbo].[balance] NULL,
[tottxnsdr] [int] NULL,
[totamountdr] [dbo].[balance] NULL,
[tottxns] [int] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsouthdr] on [dbo].[fpsouthdr]'
GO
ALTER TABLE [dbo].[fpsouthdr] ADD CONSTRAINT [PK_fpsouthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouthdr_status] on [dbo].[fpsouthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsouthdr_status] ON [dbo].[fpsouthdr] ([FK_rowid_model], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouthdr_currency] on [dbo].[fpsouthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsouthdr_currency] ON [dbo].[fpsouthdr] ([FK_rowid_model], [submissiondate], [currency])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouthdr_submission] on [dbo].[fpsouthdr]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_fpsouthdr_submission] ON [dbo].[fpsouthdr] ([FK_rowid_model], [submissiondate], [submission])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsouttxn]'
GO
CREATE TABLE [dbo].[fpsouttxn]
(
[rowid] [bigint] NOT NULL,
[identifier] [bigint] NULL,
[payeesortcode] [int] NULL,
[payeeacctno] [bigint] NULL,
[payeebic] [dbo].[bic] NULL,
[payeeiban] [dbo].[iban] NULL,
[payeetitle] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[payersortcode] [int] NULL,
[payeracctno] [bigint] NULL,
[payertitle] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[reference] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[bacserror] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[traceno] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[fpid] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[paymenttype] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[returnfpid] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[returncode] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_fpsouthdr] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_autopymt] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsouttxn] on [dbo].[fpsouttxn]'
GO
ALTER TABLE [dbo].[fpsouttxn] ADD CONSTRAINT [PK_fpsouttxn] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouttxn_identifier] on [dbo].[fpsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsouttxn_identifier] ON [dbo].[fpsouttxn] ([FK_rowid_fpsouthdr], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouttxn_FK_rowid_txns] on [dbo].[fpsouttxn]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsouttxn_FK_rowid_txns] ON [dbo].[fpsouttxn] ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[fpsouttxn_c]'
GO
CREATE TABLE [dbo].[fpsouttxn_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_fpsouttxn] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_fpsouttxn_c] on [dbo].[fpsouttxn_c]'
GO
ALTER TABLE [dbo].[fpsouttxn_c] ADD CONSTRAINT [PK_fpsouttxn_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_fpsouttxn_c] on [dbo].[fpsouttxn_c]'
GO
CREATE NONCLUSTERED INDEX [IX_fpsouttxn_c] ON [dbo].[fpsouttxn_c] ([FK_rowid_fpsouttxn], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[gl]'
GO
CREATE TABLE [dbo].[gl]
(
[rowid] [bigint] NOT NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[closeddate] [datetime] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[debitcontrol] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_gl] on [dbo].[gl]'
GO
ALTER TABLE [dbo].[gl] ADD CONSTRAINT [PK_gl] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_gl_FKacct] on [dbo].[gl]'
GO
CREATE NONCLUSTERED INDEX [IX_gl_FKacct] ON [dbo].[gl] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[gl_c]'
GO
CREATE TABLE [dbo].[gl_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_gl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_gl_c] on [dbo].[gl_c]'
GO
ALTER TABLE [dbo].[gl_c] ADD CONSTRAINT [PK_gl_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_gl_c] on [dbo].[gl_c]'
GO
CREATE NONCLUSTERED INDEX [IX_gl_c] ON [dbo].[gl_c] ([FK_rowid_gl], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[hols]'
GO
CREATE TABLE [dbo].[hols]
(
[rowid] [bigint] NOT NULL,
[hol_date] [datetime] NULL,
[descr] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_hols] on [dbo].[hols]'
GO
ALTER TABLE [dbo].[hols] ADD CONSTRAINT [PK_hols] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_hols_model] on [dbo].[hols]'
GO
CREATE NONCLUSTERED INDEX [IX_hols_model] ON [dbo].[hols] ([FK_rowid_model], [hol_date], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[hols_c]'
GO
CREATE TABLE [dbo].[hols_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_hols] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_hols_c] on [dbo].[hols_c]'
GO
ALTER TABLE [dbo].[hols_c] ADD CONSTRAINT [PK_hols_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_hols_c] on [dbo].[hols_c]'
GO
CREATE NONCLUSTERED INDEX [IX_hols_c] ON [dbo].[hols_c] ([FK_rowid_hols], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnk_payment_limit]'
GO
CREATE TABLE [dbo].[ibnk_payment_limit]
(
[rowid] [bigint] NOT NULL,
[payment_type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[payment_limit] [dbo].[balance] NULL,
[authority_required] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[authority_anyuser] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_ibnkuser_authority1] [bigint] NULL,
[authority_join] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_ibnkuser_authority2] [bigint] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnk_payment_limit] on [dbo].[ibnk_payment_limit]'
GO
ALTER TABLE [dbo].[ibnk_payment_limit] ADD CONSTRAINT [PK_ibnk_payment_limit] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnk_payment_limit_payment_limit] on [dbo].[ibnk_payment_limit]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnk_payment_limit_payment_limit] ON [dbo].[ibnk_payment_limit] ([FK_rowid_nonpers], [payment_type], [payment_limit])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnk_payment_limit_c]'
GO
CREATE TABLE [dbo].[ibnk_payment_limit_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnk_payment_limit] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnk_payment_limit_c] on [dbo].[ibnk_payment_limit_c]'
GO
ALTER TABLE [dbo].[ibnk_payment_limit_c] ADD CONSTRAINT [PK_ibnk_payment_limit_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnk_payment_limit_c] on [dbo].[ibnk_payment_limit_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnk_payment_limit_c] ON [dbo].[ibnk_payment_limit_c] ([FK_rowid_ibnk_payment_limit], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuser]'
GO
CREATE TABLE [dbo].[ibnkuser]
(
[rowid] [bigint] NOT NULL,
[username] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[internet] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[telephone] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mobile] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ivr] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[noticeboarddismisseddate] [datetime] NULL,
[noticeboarddismissedtime] [datetime] NULL,
[internetstatus] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[internetview] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetsubmit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetauthorise] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetadministrator] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_third_party_access] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_documents] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetusernametemp] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetusernamechanged] [datetime] NULL,
[internetpassword] [varbinary] (256) NULL,
[internetpasswordattempts] [int] NULL,
[internet_password_attempt_page] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[internetpasswordchanged] [datetime] NULL,
[internetpasswordtemp] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetpasswordtempsource] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[internetpasswordlinkexpiredate] [datetime] NULL,
[internetpasswordlinkexpiretime] [datetime] NULL,
[internetpac] [varbinary] (16) NULL,
[internetpacattempts] [int] NULL,
[internetpacchanged] [datetime] NULL,
[internet_paclinkexpirydate] [datetime] NULL,
[internet_paclinkexpirytime] [datetime] NULL,
[internetpactemp] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_twofa_enrolled] [varchar] (3) NULL,
[internet_login_date] [datetime] NULL,
[internet_login_time] [datetime] NULL,
[internet_login_attempts] [int] NULL,
[internet_txn_limit] [dbo].[balance] NULL,
[internet_daily_txn_limit] [dbo].[balance] NULL,
[internet_daily_txn_limit_used] [dbo].[balance] NULL,
[internet_daily_txn_limit_used_date] [datetime] NULL,
[internet_document_notification_email] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[telephonestatus] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[telephonepassword] [varbinary] (256) NULL,
[telephonechanged] [datetime] NULL,
[mobilestatus] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[mobilepac] [varbinary] (16) NULL,
[mobiletoken] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[mobiletokenexpirydate] [datetime] NULL,
[mobiletokenexpirytime] [datetime] NULL,
[ivrstatus] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[ivrpac] [varbinary] (16) NULL,
[ivrattempts] [int] NULL,
[ivrchanged] [datetime] NULL,
[ivrtemp] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[memorabledate] [varbinary] (100) NULL,
[maidenname] [varbinary] (100) NULL,
[firstschool] [varbinary] (100) NULL,
[placeofbirth] [varbinary] (100) NULL,
[memorablename] [varbinary] (100) NULL,
[emailreminderdate] [datetime] NULL,
[emailaddress] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[emailstatus] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[emaillinkexpiredate] [datetime] NULL,
[emaillinkexpiretime] [datetime] NULL,
[emailverifieddate] [datetime] NULL,
[emailverifydeferredcount] [int] NULL,
[emailverify_token] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[default_ibnk_format] [bigint] NULL,
[authentication_mode] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[logoncredentialschangeddate] [datetime] NULL,
[logoncredentialschangedtime] [datetime] NULL,
[logoncredentialsmigration] [datetime] NULL,
[registrationcomplete] [datetime] NULL,
[registrationreminderdate] [datetime] NULL,
[registrationdefercount] [int] NULL,
[requested_authentication] [bigint] NULL,
[requested_pac_characters] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NOT NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuser] on [dbo].[ibnkuser]'
GO
ALTER TABLE [dbo].[ibnkuser] ADD CONSTRAINT [PK_ibnkuser] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_FK_nonpers] on [dbo].[ibnkuser]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_FK_nonpers] ON [dbo].[ibnkuser] ([FK_rowid_nonpers], [username])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_FK_people] on [dbo].[ibnkuser]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_FK_people] ON [dbo].[ibnkuser] ([FK_rowid_people], [username])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ibnkuser]'
GO
ALTER TABLE [dbo].[ibnkuser] ADD CONSTRAINT [IX_ibnkuser_username] UNIQUE NONCLUSTERED  ([username])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkaccountblock]'
GO
CREATE TABLE [dbo].[ibnkaccountblock]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[accno] [dbo].[accno] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkaccountblock] on [dbo].[ibnkaccountblock]'
GO
ALTER TABLE [dbo].[ibnkaccountblock] ADD CONSTRAINT [PK_ibnkaccountblock] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkaccountblock_status] on [dbo].[ibnkaccountblock]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkaccountblock_status] ON [dbo].[ibnkaccountblock] ([FK_rowid_ibnkuser], [sortcode], [accno], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkaccountblock_c]'
GO
CREATE TABLE [dbo].[ibnkaccountblock_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkaccountblock] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkaccountblock_c] on [dbo].[ibnkaccountblock_c]'
GO
ALTER TABLE [dbo].[ibnkaccountblock_c] ADD CONSTRAINT [PK_ibnkaccountblock_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkaccountblock_c] on [dbo].[ibnkaccountblock_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkaccountblock_c] ON [dbo].[ibnkaccountblock_c] ([FK_rowid_ibnkaccountblock], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkbrowserretirement]'
GO
CREATE TABLE [dbo].[ibnkbrowserretirement]
(
[rowid] [bigint] NOT NULL,
[browser] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[mobile] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[severity] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[majorversion] [int] NULL,
[minorversion] [int] NULL,
[lastmajorversion] [int] NULL,
[lastminorversion] [int] NULL,
[retirementdate] [datetime] NULL,
[retirementmessage] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkbrowserretirement] on [dbo].[ibnkbrowserretirement]'
GO
ALTER TABLE [dbo].[ibnkbrowserretirement] ADD CONSTRAINT [PK_ibnkbrowserretirement] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkbrowserretirement_browser_severity] on [dbo].[ibnkbrowserretirement]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkbrowserretirement_browser_severity] ON [dbo].[ibnkbrowserretirement] ([browser], [mobile], [severity], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkbrowserretirement_c]'
GO
CREATE TABLE [dbo].[ibnkbrowserretirement_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkbrowserretirement] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkbrowserretirement_c] on [dbo].[ibnkbrowserretirement_c]'
GO
ALTER TABLE [dbo].[ibnkbrowserretirement_c] ADD CONSTRAINT [PK_ibnkbrowserretirement_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkbrowserretirement_c] on [dbo].[ibnkbrowserretirement_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkbrowserretirement_c] ON [dbo].[ibnkbrowserretirement_c] ([FK_rowid_ibnkbrowserretirement], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkconfig]'
GO
CREATE TABLE [dbo].[ibnkconfig]
(
[rowid] [bigint] NOT NULL,
[websiteurl] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailserver] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[noticeboardenabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[noticeboardmessage] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[noticeboardsetdate] [datetime] NULL,
[noticeboardsettime] [datetime] NULL,
[passwordresetenabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[passwordresetsender] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[passwordresetsubject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[passwordresettype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[passwordresetmessage] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[passwordresettemplate] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[passwordresetlinkexpiryperiod] [int] NULL,
[passwordresetlinkexpiryfreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[passwordresetlinkexpirytime] [datetime] NULL,
[internet_pacresetenabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresetsender] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresetsubject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresettype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresetmessage] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresettemplate] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresetlinkexpiryperiod] [int] NULL,
[internet_pacresetlinkexpiryfreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[internet_pacresetlinkexpirytime] [datetime] NULL,
[passwordcomplexitymessage] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[emailreminder] [int] NULL,
[emailverifysender] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifysubject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifytype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[emailverifymessage] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[emailverifytemplate] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifyvalidationsender] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifyvalidationsubject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifyvalidationtype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[emailverifyvalidationmessage] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[emailverifyvalidationtemplate] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailverifylinkexpiryperiod] [int] NULL,
[emailverifylinkexpiryfreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[emailverifylinkexpirytime] [datetime] NULL,
[emailverifydeferlimit] [int] NULL,
[authoriseenabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[authorisesender] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[authorisesubject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[authorisetype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[authorisemessage] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[authorisetemplate] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[usernameminlength] [int] NULL,
[usernamemaxlength] [int] NULL,
[passwordinitiallength] [int] NULL,
[passwordinitialexclude] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[passwordminlength] [int] NULL,
[passwordmaxlength] [int] NULL,
[passwordminloweralphabetic] [int] NULL,
[passwordminupperalphabetic] [int] NULL,
[passwordminnumeric] [int] NULL,
[passwordminnonalphanumeric] [int] NULL,
[passwordallowusername] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[passwordallowspace] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[passwordreuseevery] [int] NULL,
[passwordreusefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[internet_custom_max] [int] NULL,
[maxautopayintxnsdays] [int] NULL,
[maxautopayintxnscount] [int] NULL,
[transactionlimitchecktype] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[transactionlimitmax] [dbo].[balance] NULL,
[transactionlimitmax_bp] [dbo].[balance] NULL,
[transactionlimitmax_so] [dbo].[balance] NULL,
[transactionlimitmaxsingleauthorisinguser] [dbo].[balance] NULL,
[transactionlimitmaxsingleauthorisinguser_bp] [dbo].[balance] NULL,
[transactionlimitmaxsingleauthorisinguser_so] [dbo].[balance] NULL,
[transactiondailylimit] [dbo].[balance] NULL,
[transactiondailylimit_bp] [dbo].[balance] NULL,
[transactiondailylimit_so] [dbo].[balance] NULL,
[transactiondailylimitsingleauthorisinguser] [dbo].[balance] NULL,
[transactiondailylimitsingleauthorisinguser_bp] [dbo].[balance] NULL,
[transactiondailylimitsingleauthorisinguser_so] [dbo].[balance] NULL,
[forgotten_username_require_accno] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[forgotten_username_require_dob] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[forgotten_username_require_postcode] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[forgotten_username_require_email] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[forgotten_username_require_password] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[forgotten_username_require_pac] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[credentialchangedcooldown] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[credentialchangedcooldownperiod] [int] NULL,
[credentialchangedcooldownfreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[internet_pacallowbirthdate] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_pacallowrepeatingcharacters] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_pacallowrepeatingcharactersnum] [int] NULL,
[internet_pacallowconsecutivecharacters] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_pacallowconsecutivecharactersnum] [int] NULL,
[internet_pacallowusername] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_pacallowpassword] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[registrationdefernew] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[registrationdefermigrated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[registrationremindernew] [int] NULL,
[registrationremindermigrated] [int] NULL,
[registrationdeferlimitnew] [int] NULL,
[registrationdeferlimitmigrated] [int] NULL,
[registrationtemporarydetails] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresmemorableword] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresmemorablename] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresplaceofbirth] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresmemorabledate] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresmaidenname] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresfirstschool] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequirespac] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresdob] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[initiallogonrequiresemail] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[documents_show_linked_to_accounts] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[documents_show_previous_months] [int] NULL,
[statement_fscs_insert_location] [varchar] (256) COLLATE Latin1_General_CI_AS NULL,
[bulk_uploads] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bulk_upload_archive_document] [int] NULL,
[bulk_upload_review_period] [int] NULL,
[bulk_upload_review_freq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[bulk_payments_limit_per_file] [int] NULL,
[statement_download_enabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[statement_recipient_enabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[login_failure_reason_secret_account_locked] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[login_failure_reason_secret_account_revoked] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkconfig] on [dbo].[ibnkconfig]'
GO
ALTER TABLE [dbo].[ibnkconfig] ADD CONSTRAINT [PK_ibnkconfig] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkconfig_c]'
GO
CREATE TABLE [dbo].[ibnkconfig_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkconfig] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkconfig_c] on [dbo].[ibnkconfig_c]'
GO
ALTER TABLE [dbo].[ibnkconfig_c] ADD CONSTRAINT [PK_ibnkconfig_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkconfig_c] on [dbo].[ibnkconfig_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkconfig_c] ON [dbo].[ibnkconfig_c] ([FK_rowid_ibnkconfig], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnklog]'
GO
CREATE TABLE [dbo].[ibnklog]
(
[rowid] [bigint] NOT NULL,
[logid] [bigint] NULL,
[req_page] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[req_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[req_bookdate] [datetime] NULL,
[req_date] [datetime] NULL,
[req_time] [datetime] NULL,
[req_ibnkuser] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[req_ibnkuserrowid] [bigint] NULL,
[err_code] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[err_message] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[req_sessionid] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[req_ipaddress] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[req_agent] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[req_browsertype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[req_browsername] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[req_browserversion] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[req_platform] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[req_mobiledevice] [varchar] (25) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnklog] on [dbo].[ibnklog]'
GO
ALTER TABLE [dbo].[ibnklog] ADD CONSTRAINT [PK_ibnklog] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ibnklog]'
GO
ALTER TABLE [dbo].[ibnklog] ADD CONSTRAINT [IX_ibnklog_logid] UNIQUE NONCLUSTERED  ([logid], [req_ibnkuser])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnklog_user] on [dbo].[ibnklog]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnklog_user] ON [dbo].[ibnklog] ([req_ibnkuser], [req_date], [err_code])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnklog_error]'
GO
CREATE TABLE [dbo].[ibnklog_error]
(
[rowid] [bigint] NOT NULL,
[description] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnklog] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnklog_error] on [dbo].[ibnklog_error]'
GO
ALTER TABLE [dbo].[ibnklog_error] ADD CONSTRAINT [PK_ibnklog_error] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkprevpasswords]'
GO
CREATE TABLE [dbo].[ibnkprevpasswords]
(
[rowid] [bigint] NOT NULL,
[passdate] [datetime] NULL,
[passtime] [datetime] NULL,
[encrpassword] [varbinary] (256) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkprevpasswords] on [dbo].[ibnkprevpasswords]'
GO
ALTER TABLE [dbo].[ibnkprevpasswords] ADD CONSTRAINT [PK_ibnkprevpasswords] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkprevpasswords_passdate] on [dbo].[ibnkprevpasswords]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkprevpasswords_passdate] ON [dbo].[ibnkprevpasswords] ([FK_rowid_ibnkuser], [passdate] DESC, [passtime] DESC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkprevusernames]'
GO
CREATE TABLE [dbo].[ibnkprevusernames]
(
[rowid] [bigint] NOT NULL,
[username] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkprevusernames] on [dbo].[ibnkprevusernames]'
GO
ALTER TABLE [dbo].[ibnkprevusernames] ADD CONSTRAINT [PK_ibnkprevusernames] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuact]'
GO
CREATE TABLE [dbo].[ibnkuact]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[accno] [dbo].[accno] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkugrp] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuact] on [dbo].[ibnkuact]'
GO
ALTER TABLE [dbo].[ibnkuact] ADD CONSTRAINT [PK_ibnkuact] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuact_acct] on [dbo].[ibnkuact]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuact_acct] ON [dbo].[ibnkuact] ([FK_rowid_ibnkugrp], [sortcode], [accno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuact_status] on [dbo].[ibnkuact]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuact_status] ON [dbo].[ibnkuact] ([FK_rowid_ibnkugrp], [status], [sortcode], [accno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuact_c]'
GO
CREATE TABLE [dbo].[ibnkuact_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkuact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuact_c] on [dbo].[ibnkuact_c]'
GO
ALTER TABLE [dbo].[ibnkuact_c] ADD CONSTRAINT [PK_ibnkuact_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuact_c] on [dbo].[ibnkuact_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuact_c] ON [dbo].[ibnkuact_c] ([FK_rowid_ibnkuact], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkugrp]'
GO
CREATE TABLE [dbo].[ibnkugrp]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[isdefault] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkugrp] on [dbo].[ibnkugrp]'
GO
ALTER TABLE [dbo].[ibnkugrp] ADD CONSTRAINT [PK_ibnkugrp] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkugrp_name] on [dbo].[ibnkugrp]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkugrp_name] ON [dbo].[ibnkugrp] ([FK_rowid_ibnkuser], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkugrp_status] on [dbo].[ibnkugrp]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkugrp_status] ON [dbo].[ibnkugrp] ([FK_rowid_ibnkuser], [status], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkugrp_c]'
GO
CREATE TABLE [dbo].[ibnkugrp_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkugrp] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkugrp_c] on [dbo].[ibnkugrp_c]'
GO
ALTER TABLE [dbo].[ibnkugrp_c] ADD CONSTRAINT [PK_ibnkugrp_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkugrp_c] on [dbo].[ibnkugrp_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkugrp_c] ON [dbo].[ibnkugrp_c] ([FK_rowid_ibnkugrp], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuser_c]'
GO
CREATE TABLE [dbo].[ibnkuser_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ibnkuser] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuser_c] on [dbo].[ibnkuser_c]'
GO
ALTER TABLE [dbo].[ibnkuser_c] ADD CONSTRAINT [PK_ibnkuser_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_c] on [dbo].[ibnkuser_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_c] ON [dbo].[ibnkuser_c] ([FK_rowid_ibnkuser], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuser_search]'
GO
CREATE TABLE [dbo].[ibnkuser_search]
(
[rowid] [bigint] NOT NULL,
[request_type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[transaction_type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[search_period] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[from_date] [datetime] NULL,
[to_date] [datetime] NULL,
[sort_column] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[sort_order] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NULL,
[FK_rowid_ibnkuser_format] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuser_search] on [dbo].[ibnkuser_search]'
GO
ALTER TABLE [dbo].[ibnkuser_search] ADD CONSTRAINT [PK_ibnkuser_search] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_search_status] on [dbo].[ibnkuser_search]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_search_status] ON [dbo].[ibnkuser_search] ([FK_rowid_ibnkuser], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuser_format]'
GO
CREATE TABLE [dbo].[ibnkuser_format]
(
[rowid] [bigint] NOT NULL,
[id] [bigint] NULL,
[name] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[sortcolumn] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[sortorder] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[delimiter] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[headers] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[column1] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column2] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column3] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column4] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column5] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column6] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column7] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column8] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column9] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column10] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column11] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column12] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column13] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column14] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column15] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column16] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column17] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column18] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column19] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column20] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column21] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column22] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column23] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column24] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[column25] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[lastmodified] [datetime] NULL,
[lastmodifiedby] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuser_format] on [dbo].[ibnkuser_format]'
GO
ALTER TABLE [dbo].[ibnkuser_format] ADD CONSTRAINT [PK_ibnkuser_format] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_format_id] on [dbo].[ibnkuser_format]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ibnkuser_format_id] ON [dbo].[ibnkuser_format] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnkuser_session]'
GO
CREATE TABLE [dbo].[ibnkuser_session]
(
[rowid] [bigint] NOT NULL,
[authentication_token] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[page_request_token] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[page_url] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[submission_token] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[session_id] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[ip_address] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ibnkuser] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnkuser_session] on [dbo].[ibnkuser_session]'
GO
ALTER TABLE [dbo].[ibnkuser_session] ADD CONSTRAINT [PK_ibnkuser_session] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_session_authentication] on [dbo].[ibnkuser_session]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_session_authentication] ON [dbo].[ibnkuser_session] ([FK_rowid_ibnkuser], [authentication_token])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnkuser_session_session_id] on [dbo].[ibnkuser_session]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnkuser_session_session_id] ON [dbo].[ibnkuser_session] ([session_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[instrument]'
GO
CREATE TABLE [dbo].[instrument]
(
[rowid] [bigint] NOT NULL,
[institution] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_instrument] on [dbo].[instrument]'
GO
ALTER TABLE [dbo].[instrument] ADD CONSTRAINT [PK_instrument] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_instrument_securities] on [dbo].[instrument]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_instrument_securities] ON [dbo].[instrument] ([FK_rowid_securities])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_instrument_reference] on [dbo].[instrument]'
GO
CREATE NONCLUSTERED INDEX [IX_instrument_reference] ON [dbo].[instrument] ([reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[instrument_c]'
GO
CREATE TABLE [dbo].[instrument_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_instrument] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_instrument_c] on [dbo].[instrument_c]'
GO
ALTER TABLE [dbo].[instrument_c] ADD CONSTRAINT [PK_instrument_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_instrument_c] on [dbo].[instrument_c]'
GO
CREATE NONCLUSTERED INDEX [IX_instrument_c] ON [dbo].[instrument_c] ([FK_rowid_instrument], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[insurance]'
GO
CREATE TABLE [dbo].[insurance]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[policy_number] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[value] [dbo].[balance] NULL,
[expirydate] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_development] [bigint] NULL,
[FK_rowid_property] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_insurance] on [dbo].[insurance]'
GO
ALTER TABLE [dbo].[insurance] ADD CONSTRAINT [PK_insurance] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[insurance_c]'
GO
CREATE TABLE [dbo].[insurance_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_insurance] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_insurance_c] on [dbo].[insurance_c]'
GO
ALTER TABLE [dbo].[insurance_c] ADD CONSTRAINT [PK_insurance_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_insurance_c] on [dbo].[insurance_c]'
GO
CREATE NONCLUSTERED INDEX [IX_insurance_c] ON [dbo].[insurance_c] ([FK_rowid_insurance], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ivr_machine]'
GO
CREATE TABLE [dbo].[ivr_machine]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[voice_library_directory] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ivr_machine] on [dbo].[ivr_machine]'
GO
ALTER TABLE [dbo].[ivr_machine] ADD CONSTRAINT [PK_ivr_machine] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ivr_machine] on [dbo].[ivr_machine]'
GO
CREATE NONCLUSTERED INDEX [IX_ivr_machine] ON [dbo].[ivr_machine] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ivr_channel]'
GO
CREATE TABLE [dbo].[ivr_channel]
(
[rowid] [bigint] NOT NULL,
[board_number] [int] NULL,
[channel_number] [int] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ivr_machine] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ivr_channel] on [dbo].[ivr_channel]'
GO
ALTER TABLE [dbo].[ivr_channel] ADD CONSTRAINT [PK_ivr_channel] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ivr_channel] on [dbo].[ivr_channel]'
GO
CREATE NONCLUSTERED INDEX [IX_ivr_channel] ON [dbo].[ivr_channel] ([FK_rowid_ivr_machine], [board_number], [channel_number])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[kyc_history]'
GO
CREATE TABLE [dbo].[kyc_history]
(
[rowid] [bigint] NOT NULL,
[xml] [image] NULL,
[request_response] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[customer_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[search_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[kyc_result] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_appl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_kyc_history] on [dbo].[kyc_history]'
GO
ALTER TABLE [dbo].[kyc_history] ADD CONSTRAINT [PK_kyc_history] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_kyc_history_appl] on [dbo].[kyc_history]'
GO
CREATE NONCLUSTERED INDEX [IX_kyc_history_appl] ON [dbo].[kyc_history] ([FK_rowid_appl])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ledger]'
GO
CREATE TABLE [dbo].[ledger]
(
[rowid] [bigint] NOT NULL,
[ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[lookup] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[category] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[callprod] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[loanprod] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[termprod] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[acctsubs] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ledger] on [dbo].[ledger]'
GO
ALTER TABLE [dbo].[ledger] ADD CONSTRAINT [PK_ledger] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ledger]'
GO
ALTER TABLE [dbo].[ledger] ADD CONSTRAINT [IX_ledger_lookup] UNIQUE NONCLUSTERED  ([lookup])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ledger_codes] on [dbo].[ledger]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ledger_codes] ON [dbo].[ledger] ([type], [ledger1], [ledger2], [ledger3])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ledger_c]'
GO
CREATE TABLE [dbo].[ledger_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_ledger] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ledger_c] on [dbo].[ledger_c]'
GO
ALTER TABLE [dbo].[ledger_c] ADD CONSTRAINT [PK_ledger_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ledger_c] on [dbo].[ledger_c]'
GO
CREATE NONCLUSTERED INDEX [IX_ledger_c] ON [dbo].[ledger_c] ([FK_rowid_ledger], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[level]'
GO
CREATE TABLE [dbo].[level]
(
[rowid] [bigint] NOT NULL,
[levno] [int] NULL,
[name] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[bacs] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_level] on [dbo].[level]'
GO
ALTER TABLE [dbo].[level] ADD CONSTRAINT [PK_level] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_level_bacs] on [dbo].[level]'
GO
CREATE NONCLUSTERED INDEX [IX_level_bacs] ON [dbo].[level] ([bacs], [rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_level_levno] on [dbo].[level]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_level_levno] ON [dbo].[level] ([levno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[level_c]'
GO
CREATE TABLE [dbo].[level_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_level] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_level_c] on [dbo].[level_c]'
GO
ALTER TABLE [dbo].[level_c] ADD CONSTRAINT [PK_level_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_level_c] on [dbo].[level_c]'
GO
CREATE NONCLUSTERED INDEX [IX_level_c] ON [dbo].[level_c] ([FK_rowid_level], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[limit]'
GO
CREATE TABLE [dbo].[limit]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rights] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_privlimit] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_limit] on [dbo].[limit]'
GO
ALTER TABLE [dbo].[limit] ADD CONSTRAINT [PK_limit] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_limit_name] on [dbo].[limit]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_limit_name] ON [dbo].[limit] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[limit_c]'
GO
CREATE TABLE [dbo].[limit_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_limit] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_limits_c] on [dbo].[limit_c]'
GO
ALTER TABLE [dbo].[limit_c] ADD CONSTRAINT [PK_limits_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_limits_c] on [dbo].[limit_c]'
GO
CREATE NONCLUSTERED INDEX [IX_limits_c] ON [dbo].[limit_c] ([FK_rowid_limit], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan_c]'
GO
CREATE TABLE [dbo].[loan_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[bookstamp] [datetime] NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[sequence] [bigint] NOT NULL IDENTITY(1, 1),
[emplstamp] [int] NULL,
[FK_rowid_loan] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan_c] on [dbo].[loan_c]'
GO
ALTER TABLE [dbo].[loan_c] ADD CONSTRAINT [PK_loan_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loan_c] on [dbo].[loan_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loan_c] ON [dbo].[loan_c] ([FK_rowid_loan], [bookstamp], [timestamp], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan_condition]'
GO
CREATE TABLE [dbo].[loan_condition]
(
[rowid] [bigint] NOT NULL,
[condition] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[priority] [int] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_appl] [bigint] NULL,
[FK_rowid_loan] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan_condition] on [dbo].[loan_condition]'
GO
ALTER TABLE [dbo].[loan_condition] ADD CONSTRAINT [PK_loan_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loan_condition_FKappl] on [dbo].[loan_condition]'
GO
CREATE NONCLUSTERED INDEX [IX_loan_condition_FKappl] ON [dbo].[loan_condition] ([FK_rowid_appl], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loan_condition_FKloan] on [dbo].[loan_condition]'
GO
CREATE NONCLUSTERED INDEX [IX_loan_condition_FKloan] ON [dbo].[loan_condition] ([FK_rowid_loan], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan_condition_c]'
GO
CREATE TABLE [dbo].[loan_condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_loan_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan_condition_c] on [dbo].[loan_condition_c]'
GO
ALTER TABLE [dbo].[loan_condition_c] ADD CONSTRAINT [PK_loan_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loan_condition_c] on [dbo].[loan_condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loan_condition_c] ON [dbo].[loan_condition_c] ([FK_rowid_loan_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan_s]'
GO
CREATE TABLE [dbo].[loan_s]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[bookstamp] [datetime] NULL,
[emplstamp] [int] NULL,
[bookbal] [dbo].[balance] NULL,
[valuebal] [dbo].[balance] NULL,
[clearbal] [dbo].[balance] NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[closeddate] [datetime] NULL,
[propstatus] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[signers] [int] NULL,
[purpose] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[regulator_purpose] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[risk_code] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mlar_code] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[approved] [dbo].[balance] NULL,
[drawndown] [dbo].[balance] NULL,
[theoretical_capital] [dbo].[balance] NULL,
[theoretical_interest] [dbo].[balance] NULL,
[theoretical_fees] [dbo].[balance] NULL,
[theoretical_insurance] [dbo].[balance] NULL,
[term] [int] NULL,
[termfreq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amort_period] [int] NULL,
[amort_period_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amort_date] [datetime] NULL,
[notification_date] [datetime] NULL,
[repaytype] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[drawdowndate] [datetime] NULL,
[maturitydate] [datetime] NULL,
[maturityday] [int] NULL,
[contractual_maturitydate] [datetime] NULL,
[reviewdate] [datetime] NULL,
[drint_type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[drint_program_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_month] [int] NULL,
[drint_next] [datetime] NULL,
[drint_increment] [decimal] (8, 6) NULL,
[drint_floor] [decimal] (8, 6) NULL,
[drint_cap] [decimal] (8, 6) NULL,
[drint_apr] [decimal] (3, 1) NULL,
[drint_irr] [decimal] (8, 3) NULL,
[drint_apr_day1_adjust] [dbo].[balance] NULL,
[payment_every] [int] NULL,
[payment_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[payment_day] [int] NULL,
[payment_month] [int] NULL,
[first_payment] [datetime] NULL,
[invoice] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[invoice_date] [datetime] NULL,
[invoice_due] [datetime] NULL,
[invoice_amount] [decimal] (19, 2) NULL,
[cap_paid_td] [dbo].[balance] NULL,
[int_paid_td] [dbo].[balance] NULL,
[ins_paid_td] [dbo].[balance] NULL,
[fee_paid_td] [dbo].[balance] NULL,
[drint_paid_td] [dbo].[balance] NULL,
[drint_paid_for_payment] [dbo].[balance] NULL,
[drint_paid_life] [dbo].[balance] NULL,
[drint_accr] [dbo].[accrual] NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_bookbal] [dbo].[balance] NULL,
[eod_valuebal] [dbo].[balance] NULL,
[next_payment] [datetime] NULL,
[next_lsched] [datetime] NULL,
[next_fee] [datetime] NULL,
[last_payment] [datetime] NULL,
[payment_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[internal_accno] [bigint] NULL,
[internal_sortcode] [int] NULL,
[internal_sub] [int] NULL,
[arrs_cap] [dbo].[balance] NULL,
[arrs_int] [dbo].[balance] NULL,
[arrs_ins] [dbo].[balance] NULL,
[arrs_fee] [dbo].[balance] NULL,
[arrs_accr] [dbo].[accrual] NULL,
[product] [bigint] NULL,
[clearexceptions] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[def_disburse_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[last_savepoint] [datetime] NULL,
[saveflags] [int] NULL,
[restbal] [dbo].[balance] NULL,
[chg_1] [int] NULL,
[chg_2] [int] NULL,
[chg_3] [int] NULL,
[chg_4] [int] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[tcc] [dbo].[balance] NULL,
[total_drint_accr] [dbo].[accrual] NULL,
[bad_debt_provision] [dbo].[balance] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[min_interest_to_charge] [int] NULL,
[min_interest_to_chargefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[risk_weighting_figure] [decimal] (5, 2) NULL,
[contingent_value] [dbo].[balance] NULL,
[contingent_3rd_party] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[facility_limit] [dbo].[balance] NULL,
[original_facility_limit] [dbo].[balance] NULL,
[has_sub_account_flags] [int] NULL,
[is_sub_account_flags] [int] NULL,
[syndication_participant_nonpers] [bigint] NULL,
[syndication_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[syndication_pcent] [decimal] (5, 3) NULL,
[element1_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element1_amount] [dbo].[balance] NULL,
[element1_drawndown] [dbo].[balance] NULL,
[element2_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element2_amount] [dbo].[balance] NULL,
[element2_drawndown] [dbo].[balance] NULL,
[element3_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element3_amount] [dbo].[balance] NULL,
[element3_drawndown] [dbo].[balance] NULL,
[element4_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element4_amount] [dbo].[balance] NULL,
[element4_drawndown] [dbo].[balance] NULL,
[element5_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element5_amount] [dbo].[balance] NULL,
[element5_drawndown] [dbo].[balance] NULL,
[element6_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element6_amount] [dbo].[balance] NULL,
[element6_drawndown] [dbo].[balance] NULL,
[element7_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element7_amount] [dbo].[balance] NULL,
[element7_drawndown] [dbo].[balance] NULL,
[element8_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[element8_amount] [dbo].[balance] NULL,
[element8_drawndown] [dbo].[balance] NULL,
[interest_rolled] [dbo].[balance] NULL,
[drint_suspense] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[suspense_drint] [dbo].[balance] NULL,
[fees_suspense] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[suspense_fees] [dbo].[balance] NULL,
[personal_banker] [int] NULL,
[sales_officer] [int] NULL,
[stage] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[region_code] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[activation_date] [datetime] NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_loan] [bigint] NOT NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan_s] on [dbo].[loan_s]'
GO
ALTER TABLE [dbo].[loan_s] ADD CONSTRAINT [PK_loan_s] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookstamp] on [dbo].[loan_s]'
GO
CREATE NONCLUSTERED INDEX [IX_bookstamp] ON [dbo].[loan_s] ([FK_rowid_loan], [bookstamp], [saveflags])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loan_v]'
GO
CREATE TABLE [dbo].[loan_v]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NOT NULL,
[timestamp] [datetime] NOT NULL,
[bookstamp] [datetime] NOT NULL,
[emplstamp] [int] NOT NULL,
[viewflags] [bigint] NOT NULL,
[FK_rowid_loan] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loan_v] on [dbo].[loan_v]'
GO
ALTER TABLE [dbo].[loan_v] ADD CONSTRAINT [PK_loan_v] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loan_v] on [dbo].[loan_v]'
GO
CREATE NONCLUSTERED INDEX [IX_loan_v] ON [dbo].[loan_v] ([FK_rowid_loan], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanadv_c]'
GO
CREATE TABLE [dbo].[loanadv_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_loanadv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanadv_c] on [dbo].[loanadv_c]'
GO
ALTER TABLE [dbo].[loanadv_c] ADD CONSTRAINT [PK_loanadv_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanadv_c] on [dbo].[loanadv_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loanadv_c] ON [dbo].[loanadv_c] ([FK_rowid_loanadv], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loandef]'
GO
CREATE TABLE [dbo].[loandef]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[id] [dbo].[product_id] NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[enddate] [datetime] NULL,
[yearend] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[backdate_unauthorised] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_acct_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_prod_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_stamped_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_program_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_modifiers] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_every] [int] NULL,
[drint_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[drint_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drint_day] [int] NULL,
[drint_month] [int] NULL,
[amortaccr_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fixdrintwithpayment] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[precalculate_drint] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[arrears_penalty] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[arrearsbase_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_amortised_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_capint_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_caponly_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_intonly_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_rolled_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_credit_balances] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[prenotify_days] [int] NULL,
[maintain_payment] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[final_payment_total_outstanding] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[first_payment_same_month_as_drawdown] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[amortised_final_payment_difference] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[customer] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[purpose] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[risk] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cca] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[secured] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[vendor] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[commission] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[subsidised] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fees] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[min_term] [int] NULL,
[min_term_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[max_term] [int] NULL,
[max_term_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[min_adv] [decimal] (19, 0) NULL,
[max_adv] [decimal] (19, 0) NULL,
[multi_adv] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[def_disburse_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[payment_method] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[amort_period] [int] NULL,
[amort_period_freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[notification_period] [int] NULL,
[auto_repropose] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[auto_propose] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[drawdown_delay] [int] NULL,
[payment_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[final_payment_ignores_payment_day] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_sub_accounts] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[annual_rest] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[divisor] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[stmt_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_every] [int] NULL,
[stmt_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[stmt_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_day] [int] NULL,
[stmt_month] [int] NULL,
[stmt_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_deliverymeth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[stmt_format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[grace_days] [int] NULL,
[min_interest_to_charge] [int] NULL,
[min_interest_to_chargefreq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[facility_limit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[funded_interest] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[auto_collect_funded_interest] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[syndicated] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loandef] on [dbo].[loandef]'
GO
ALTER TABLE [dbo].[loandef] ADD CONSTRAINT [PK_loandef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[loandef]'
GO
ALTER TABLE [dbo].[loandef] ADD CONSTRAINT [IX_loandef_id] UNIQUE NONCLUSTERED  ([FK_rowid_prod], [startdate], [nextdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loandef_c]'
GO
CREATE TABLE [dbo].[loandef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_loandef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loandef_c] on [dbo].[loandef_c]'
GO
ALTER TABLE [dbo].[loandef_c] ADD CONSTRAINT [PK_loandef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loandef_c] on [dbo].[loandef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loandef_c] ON [dbo].[loandef_c] ([FK_rowid_loandef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanelement]'
GO
CREATE TABLE [dbo].[loanelement]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanelement] on [dbo].[loanelement]'
GO
ALTER TABLE [dbo].[loanelement] ADD CONSTRAINT [PK_loanelement] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanelement_name] on [dbo].[loanelement]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_loanelement_name] ON [dbo].[loanelement] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanelement_c]'
GO
CREATE TABLE [dbo].[loanelement_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_loanelement] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanelement_c] on [dbo].[loanelement_c]'
GO
ALTER TABLE [dbo].[loanelement_c] ADD CONSTRAINT [PK_loanelement_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanelement_c] on [dbo].[loanelement_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loanelement_c] ON [dbo].[loanelement_c] ([FK_rowid_loanelement], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanred]'
GO
CREATE TABLE [dbo].[loanred]
(
[rowid] [bigint] NOT NULL,
[reddate] [datetime] NULL,
[date_produced] [datetime] NULL,
[description] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[method] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[request_type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[reference] [bigint] NULL,
[quotedate] [datetime] NULL,
[expirydate] [datetime] NULL,
[drint] [dbo].[balance] NULL,
[fees_rebate] [dbo].[balance] NULL,
[insurance_rebate] [dbo].[balance] NULL,
[capital_arrears] [dbo].[balance] NULL,
[interest_arrears] [dbo].[balance] NULL,
[fees_arrears] [dbo].[balance] NULL,
[insurance_arrears] [dbo].[balance] NULL,
[penalty_interest] [dbo].[balance] NULL,
[include_payments] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[reason] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[minimum] [dbo].[balance] NULL,
[maximum] [dbo].[balance] NULL,
[margin] [decimal] (5, 2) NULL,
[settlement] [dbo].[balance] NULL,
[interest_deposit_balance_sub] [dbo].[balance] NULL,
[accrued_interest_sub] [dbo].[balance] NULL,
[repayment_fee] [dbo].[balance] NULL,
[extension_fee] [dbo].[balance] NULL,
[deed_release_fee] [dbo].[balance] NULL,
[solicitors_fee] [dbo].[balance] NULL,
[daily_accrual] [dbo].[balance] NULL,
[drint_next_at_redemption] [datetime] NULL,
[eventdef1] [bigint] NULL,
[fee1] [dbo].[balance] NULL,
[eventdef2] [bigint] NULL,
[fee2] [dbo].[balance] NULL,
[eventdef3] [bigint] NULL,
[fee3] [dbo].[balance] NULL,
[eventdef4] [bigint] NULL,
[fee4] [dbo].[balance] NULL,
[eventdef5] [bigint] NULL,
[fee5] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_loan] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanred] on [dbo].[loanred]'
GO
ALTER TABLE [dbo].[loanred] ADD CONSTRAINT [PK_loanred] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanred_reddate] on [dbo].[loanred]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_loanred_reddate] ON [dbo].[loanred] ([FK_rowid_loan], [reddate], [rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanred_reference] on [dbo].[loanred]'
GO
CREATE NONCLUSTERED INDEX [IX_loanred_reference] ON [dbo].[loanred] ([reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[loanred_c]'
GO
CREATE TABLE [dbo].[loanred_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_loanred] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_loanred_c] on [dbo].[loanred_c]'
GO
ALTER TABLE [dbo].[loanred_c] ADD CONSTRAINT [PK_loanred_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_loanred_c] on [dbo].[loanred_c]'
GO
CREATE NONCLUSTERED INDEX [IX_loanred_c] ON [dbo].[loanred_c] ([FK_rowid_loanred], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[lsched]'
GO
CREATE TABLE [dbo].[lsched]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[subtype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[date] [datetime] NULL,
[todate] [datetime] NULL,
[cap_amt] [dbo].[balance] NULL,
[int_amt] [dbo].[balance] NULL,
[ins_amt] [dbo].[balance] NULL,
[fee_amt] [dbo].[balance] NULL,
[desc1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[sequence] [bigint] NULL,
[rec_int] [dbo].[balance] NULL,
[rec_cap] [dbo].[balance] NULL,
[rec_ins] [dbo].[balance] NULL,
[rec_fee] [dbo].[balance] NULL,
[invtype] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[model_status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[paid_date] [datetime] NOT NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_loan] [bigint] NULL,
[FK_rowid_appl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_lsched] on [dbo].[lsched]'
GO
ALTER TABLE [dbo].[lsched] ADD CONSTRAINT [PK_lsched] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_lsched_FK_rowid_appl] on [dbo].[lsched]'
GO
CREATE NONCLUSTERED INDEX [IX_lsched_FK_rowid_appl] ON [dbo].[lsched] ([FK_rowid_appl], [date], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_lsched_date2] on [dbo].[lsched]'
GO
CREATE NONCLUSTERED INDEX [IX_lsched_date2] ON [dbo].[lsched] ([FK_rowid_loan], [date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_lsched_date] on [dbo].[lsched]'
GO
CREATE NONCLUSTERED INDEX [IX_lsched_date] ON [dbo].[lsched] ([FK_rowid_loan], [date], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[lsched_c]'
GO
CREATE TABLE [dbo].[lsched_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_lsched] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_lsched_c] on [dbo].[lsched_c]'
GO
ALTER TABLE [dbo].[lsched_c] ADD CONSTRAINT [PK_lsched_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_lsched_c] on [dbo].[lsched_c]'
GO
CREATE NONCLUSTERED INDEX [IX_lsched_c] ON [dbo].[lsched_c] ([FK_rowid_lsched], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[lsched_txns]'
GO
CREATE TABLE [dbo].[lsched_txns]
(
[rowid] [bigint] NOT NULL,
[cap_amt] [dbo].[balance] NULL,
[int_amt] [dbo].[balance] NULL,
[ins_amt] [dbo].[balance] NULL,
[fee_amt] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_lsched] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_lsched_txns] on [dbo].[lsched_txns]'
GO
ALTER TABLE [dbo].[lsched_txns] ADD CONSTRAINT [PK_lsched_txns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_lsched_txns_parents] on [dbo].[lsched_txns]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_lsched_txns_parents] ON [dbo].[lsched_txns] ([FK_rowid_lsched], [FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlrule]'
GO
CREATE TABLE [dbo].[mlrule]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[rule1_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule1_amount] [dbo].[balance] NULL,
[rule2_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule2_percent] [decimal] (4, 1) NULL,
[rule3_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule3_amount] [dbo].[balance] NULL,
[rule4_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule4_amount] [dbo].[balance] NULL,
[rule4_percent] [decimal] (4, 1) NULL,
[rule4_days] [int] NULL,
[rule5_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule5_amount] [dbo].[balance] NULL,
[rule5_percent] [decimal] (4, 1) NULL,
[rule5_days] [int] NULL,
[rule6_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule6_amount] [dbo].[balance] NULL,
[rule6_percent] [decimal] (4, 1) NULL,
[rule6_days] [int] NULL,
[rule7_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule7_chequenumberdifference] [int] NULL,
[rule8_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule8_accounts] [int] NULL,
[rule8_depositcount] [int] NULL,
[rule8_depositaverage] [dbo].[balance] NULL,
[rule8_months] [int] NULL,
[rule9_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule9_amount] [dbo].[balance] NULL,
[rule10_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule10_percent] [decimal] (4, 1) NULL,
[rule11_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule11_amount] [dbo].[balance] NULL,
[rule11_percent] [decimal] (4, 1) NULL,
[rule11_days] [int] NULL,
[rule12_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule12_currencies] [int] NULL,
[rule12_months] [int] NULL,
[rule13_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule14_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule14_days] [int] NULL,
[rule15_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule15_months] [int] NULL,
[rule15_percent] [decimal] (4, 1) NULL,
[rule15_average] [dbo].[balance] NULL,
[rule16_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule16_accounts] [int] NULL,
[rule16_depositcount] [int] NULL,
[rule16_depositaverage] [dbo].[balance] NULL,
[rule16_months] [int] NULL,
[rule17_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule17_months] [int] NULL,
[rule17_percent] [decimal] (4, 1) NULL,
[rule17_average] [dbo].[balance] NULL,
[rule18_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule18_transactions] [int] NULL,
[rule18_days] [int] NULL,
[rule19_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule19_percent] [decimal] (4, 1) NULL,
[rule19_months] [int] NULL,
[rule19_average] [int] NULL,
[rule20_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule20_transactions] [int] NULL,
[rule20_months] [int] NULL,
[rule21_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule21_accounts] [int] NULL,
[rule21_days] [int] NULL,
[rule22_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule22_changes] [int] NULL,
[rule22_days] [int] NULL,
[rule23_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule23_days] [int] NULL,
[rule24_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule25_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule25_days] [int] NULL,
[rule26_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule26_bacspayments] [int] NULL,
[rule26_months] [int] NULL,
[rule27_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule28_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule29_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule29_transactions] [int] NULL,
[rule29_months] [int] NULL,
[rule30_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule30_days] [int] NULL,
[rule31_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule32_apply] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule32_days] [int] NULL,
[rule32_percent] [decimal] (4, 1) NULL,
[rule_cust_every] [int] NULL,
[rule_cust_freq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rue_cust_day] [int] NULL,
[rule_cust_next] [datetime] NULL,
[rule_acct_every] [int] NULL,
[rule_acct_freq] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rule_acct_day] [int] NULL,
[rule_acct_next] [datetime] NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlrule] on [dbo].[mlrule]'
GO
ALTER TABLE [dbo].[mlrule] ADD CONSTRAINT [PK_mlrule] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_id] on [dbo].[mlrule]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mlrule_id] ON [dbo].[mlrule] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlrule_c]'
GO
CREATE TABLE [dbo].[mlrule_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mlrule] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlrule_c] on [dbo].[mlrule_c]'
GO
ALTER TABLE [dbo].[mlrule_c] ADD CONSTRAINT [PK_mlrule_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_c] on [dbo].[mlrule_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_c] ON [dbo].[mlrule_c] ([FK_rowid_mlrule], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlrule_condition]'
GO
CREATE TABLE [dbo].[mlrule_condition]
(
[rowid] [bigint] NOT NULL,
[condition_id] [int] NULL,
[truth] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_mlrule] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlrule_condition] on [dbo].[mlrule_condition]'
GO
ALTER TABLE [dbo].[mlrule_condition] ADD CONSTRAINT [PK_mlrule_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlrule_condition_c]'
GO
CREATE TABLE [dbo].[mlrule_condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mlrule_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlrule_condition_c] on [dbo].[mlrule_condition_c]'
GO
ALTER TABLE [dbo].[mlrule_condition_c] ADD CONSTRAINT [PK_mlrule_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_condition_c] on [dbo].[mlrule_condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_condition_c] ON [dbo].[mlrule_condition_c] ([FK_rowid_mlrule_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlrule_log]'
GO
CREATE TABLE [dbo].[mlrule_log]
(
[rowid] [bigint] NOT NULL,
[triggerdate] [datetime] NULL,
[ruleno] [int] NULL,
[rule_amount] [dbo].[balance] NULL,
[rule_percent] [decimal] (4, 1) NULL,
[rule_days] [int] NULL,
[rule_chequenumberdifference] [int] NULL,
[rule_depositcount] [int] NULL,
[rule_depositaverage] [dbo].[balance] NULL,
[rule_currencies] [int] NULL,
[rule_months] [int] NULL,
[rule_transactions] [int] NULL,
[rule_accounts] [int] NULL,
[rule_changes] [int] NULL,
[rule_average] [dbo].[balance] NULL,
[actual_amount] [dbo].[balance] NULL,
[actual_days] [int] NULL,
[actual_chequenumberdifference] [int] NULL,
[actual_depositcount] [int] NULL,
[actual_depositaverage] [dbo].[balance] NULL,
[actual_currencies] [int] NULL,
[actual_transactions] [int] NULL,
[actual_withdrawl_amount] [dbo].[balance] NULL,
[actual_withdrawal_trancode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[actual_withdrawal_trandesc] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[actual_chequeserialno] [bigint] NULL,
[actual_previouschequeserialno] [bigint] NULL,
[actual_changes] [int] NULL,
[actual_duplicate] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[actual_duplicateformatted] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[actual_accounts] [int] NULL,
[actual_txnvaluethismonth] [dbo].[balance] NULL,
[actual_txnvalueaverage] [dbo].[balance] NULL,
[actual_txncountthismonth] [decimal] (19, 0) NULL,
[actual_txncountaverage] [decimal] (19, 5) NULL,
[actual_accountownercount] [int] NULL,
[report_trandate] [datetime] NULL,
[report_custid] [bigint] NULL,
[report_custname] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[report_custtype] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[report_custbustype] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[report_acctsortcode] [int] NULL,
[report_acctaccno] [bigint] NULL,
[report_acctsub] [int] NULL,
[report_accttype] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[report_acctopened] [datetime] NULL,
[report_txndate] [datetime] NULL,
[report_txnamt] [dbo].[balance] NULL,
[report_txnccy] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[report_txncode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[report_txndesc] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[report_duplicates] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_txns] [bigint] NULL,
[FK_rowid_mlrule] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlrule_log] on [dbo].[mlrule_log]'
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [PK_mlrule_log] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_log_FK_rowid_acct] on [dbo].[mlrule_log]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_log_FK_rowid_acct] ON [dbo].[mlrule_log] ([FK_rowid_acct], [ruleno], [triggerdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_log_FK_rowid_nonpers] on [dbo].[mlrule_log]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_log_FK_rowid_nonpers] ON [dbo].[mlrule_log] ([FK_rowid_nonpers], [ruleno], [triggerdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_log_FK_rowid_people] on [dbo].[mlrule_log]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_log_FK_rowid_people] ON [dbo].[mlrule_log] ([FK_rowid_people], [ruleno], [triggerdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlrule_log_FK_rowid_txns] on [dbo].[mlrule_log]'
GO
CREATE NONCLUSTERED INDEX [IX_mlrule_log_FK_rowid_txns] ON [dbo].[mlrule_log] ([FK_rowid_txns], [ruleno], [triggerdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlsanctioned]'
GO
CREATE TABLE [dbo].[mlsanctioned]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_mlrule] [bigint] NULL,
[FK_rowid_ctry] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlsanctioned] on [dbo].[mlsanctioned]'
GO
ALTER TABLE [dbo].[mlsanctioned] ADD CONSTRAINT [PK_mlsanctioned] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlsanctioned_FK_rowid_ctry] on [dbo].[mlsanctioned]'
GO
CREATE NONCLUSTERED INDEX [IX_mlsanctioned_FK_rowid_ctry] ON [dbo].[mlsanctioned] ([FK_rowid_ctry])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlsanctioned_FK_rowid_mlrule] on [dbo].[mlsanctioned]'
GO
CREATE NONCLUSTERED INDEX [IX_mlsanctioned_FK_rowid_mlrule] ON [dbo].[mlsanctioned] ([FK_rowid_mlrule])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[mlsanctioned]'
GO
ALTER TABLE [dbo].[mlsanctioned] ADD CONSTRAINT [IX_mlsanctioned] UNIQUE NONCLUSTERED  ([FK_rowid_mlrule], [FK_rowid_ctry])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mlsanctioned_c]'
GO
CREATE TABLE [dbo].[mlsanctioned_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mlsanctioned] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mlsanctioned_c] on [dbo].[mlsanctioned_c]'
GO
ALTER TABLE [dbo].[mlsanctioned_c] ADD CONSTRAINT [PK_mlsanctioned_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mlsanctioned_c] on [dbo].[mlsanctioned_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mlsanctioned_c] ON [dbo].[mlsanctioned_c] ([FK_rowid_mlsanctioned], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mminterestmargins]'
GO
CREATE TABLE [dbo].[mminterestmargins]
(
[rowid] [bigint] NOT NULL,
[startdate] [datetime] NULL,
[limit1] [decimal] (10, 0) NULL,
[margin1] [decimal] (8, 6) NULL,
[limit2] [decimal] (10, 0) NULL,
[margin2] [decimal] (8, 6) NULL,
[limit3] [decimal] (10, 0) NULL,
[margin3] [decimal] (8, 6) NULL,
[limit4] [decimal] (10, 0) NULL,
[margin4] [decimal] (8, 6) NULL,
[limit5] [decimal] (10, 0) NULL,
[margin5] [decimal] (8, 6) NULL,
[limit6] [decimal] (10, 0) NULL,
[margin6] [decimal] (8, 6) NULL,
[limit7] [decimal] (10, 0) NULL,
[margin7] [decimal] (8, 6) NULL,
[limit8] [decimal] (10, 0) NULL,
[margin8] [decimal] (8, 6) NULL,
[limit9] [decimal] (10, 0) NULL,
[margin9] [decimal] (8, 6) NULL,
[limit10] [decimal] (10, 0) NULL,
[margin10] [decimal] (8, 6) NULL,
[limit11] [decimal] (10, 0) NULL,
[margin11] [decimal] (8, 6) NULL,
[limit12] [decimal] (10, 0) NULL,
[margin12] [decimal] (8, 6) NULL,
[limit13] [decimal] (10, 0) NULL,
[margin13] [decimal] (8, 6) NULL,
[limit14] [decimal] (10, 0) NULL,
[margin14] [decimal] (8, 6) NULL,
[limit15] [decimal] (10, 0) NULL,
[margin15] [decimal] (8, 6) NULL,
[limit16] [decimal] (10, 0) NULL,
[margin16] [decimal] (8, 6) NULL,
[limit17] [decimal] (10, 0) NULL,
[margin17] [decimal] (8, 6) NULL,
[limit18] [decimal] (10, 0) NULL,
[margin18] [decimal] (8, 6) NULL,
[limit19] [decimal] (10, 0) NULL,
[margin19] [decimal] (8, 6) NULL,
[limit20] [decimal] (10, 0) NULL,
[margin20] [decimal] (8, 6) NULL,
[floor] [decimal] (8, 6) NULL,
[FK_rowid_ccy] [bigint] NULL,
[FK_rowid_mmperiod] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mminterestmargins] on [dbo].[mminterestmargins]'
GO
ALTER TABLE [dbo].[mminterestmargins] ADD CONSTRAINT [PK_mminterestmargins] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mminterestmargins] on [dbo].[mminterestmargins]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mminterestmargins] ON [dbo].[mminterestmargins] ([FK_rowid_mmperiod], [FK_rowid_ccy], [startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mminterestmargins_c]'
GO
CREATE TABLE [dbo].[mminterestmargins_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mminterestmargins] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mminterestmargins_c] on [dbo].[mminterestmargins_c]'
GO
ALTER TABLE [dbo].[mminterestmargins_c] ADD CONSTRAINT [PK_mminterestmargins_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mminterestmargins_c] on [dbo].[mminterestmargins_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mminterestmargins_c] ON [dbo].[mminterestmargins_c] ([FK_rowid_mminterestmargins], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mmperiod]'
GO
CREATE TABLE [dbo].[mmperiod]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[period] [int] NULL,
[freq] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[lookahead] [int] NULL,
[workingday] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[reverttooriginalday] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mmperiod] on [dbo].[mmperiod]'
GO
ALTER TABLE [dbo].[mmperiod] ADD CONSTRAINT [PK_mmperiod] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mmperiod_name] on [dbo].[mmperiod]'
GO
CREATE NONCLUSTERED INDEX [IX_mmperiod_name] ON [dbo].[mmperiod] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mmperiod_c]'
GO
CREATE TABLE [dbo].[mmperiod_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mmperiod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mmperiod_c] on [dbo].[mmperiod_c]'
GO
ALTER TABLE [dbo].[mmperiod_c] ADD CONSTRAINT [PK_mmperiod_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mmperiod_c] on [dbo].[mmperiod_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mmperiod_c] ON [dbo].[mmperiod_c] ([FK_rowid_mmperiod], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mmrate]'
GO
CREATE TABLE [dbo].[mmrate]
(
[rowid] [bigint] NOT NULL,
[startdate] [datetime] NULL,
[rate] [decimal] (8, 6) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ccy] [bigint] NULL,
[FK_rowid_mmperiod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mmrate] on [dbo].[mmrate]'
GO
ALTER TABLE [dbo].[mmrate] ADD CONSTRAINT [PK_mmrate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mmrate_startdate] on [dbo].[mmrate]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_mmrate_startdate] ON [dbo].[mmrate] ([FK_rowid_ccy], [FK_rowid_mmperiod], [startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mmrate_c]'
GO
CREATE TABLE [dbo].[mmrate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_mmrate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mmrate_c] on [dbo].[mmrate_c]'
GO
ALTER TABLE [dbo].[mmrate_c] ADD CONSTRAINT [PK_mmrate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_mmrate_c] on [dbo].[mmrate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_mmrate_c] ON [dbo].[mmrate_c] ([FK_rowid_mmrate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[model_c]'
GO
CREATE TABLE [dbo].[model_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_model_c] on [dbo].[model_c]'
GO
ALTER TABLE [dbo].[model_c] ADD CONSTRAINT [PK_model_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[nonpers_c]'
GO
CREATE TABLE [dbo].[nonpers_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_nonpers_c] on [dbo].[nonpers_c]'
GO
ALTER TABLE [dbo].[nonpers_c] ADD CONSTRAINT [PK_nonpers_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_nonpers_c] on [dbo].[nonpers_c]'
GO
CREATE NONCLUSTERED INDEX [IX_nonpers_c] ON [dbo].[nonpers_c] ([FK_rowid_nonpers], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[nonpers_v]'
GO
CREATE TABLE [dbo].[nonpers_v]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NOT NULL,
[timestamp] [datetime] NOT NULL,
[bookstamp] [datetime] NOT NULL,
[emplstamp] [int] NOT NULL,
[viewflags] [bigint] NOT NULL,
[FK_rowid_nonpers] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_nonpers_v] on [dbo].[nonpers_v]'
GO
ALTER TABLE [dbo].[nonpers_v] ADD CONSTRAINT [PK_nonpers_v] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_nonpers_v] on [dbo].[nonpers_v]'
GO
CREATE NONCLUSTERED INDEX [IX_nonpers_v] ON [dbo].[nonpers_v] ([FK_rowid_nonpers], [datestamp], [timestamp])
GO
PRINT N'Creating [dbo].[payment_transmission]'
GO
CREATE TABLE [dbo].[payment_transmission]
(
[rowid] [bigint] NOT NULL,
[product] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[BACS_usernumber] [int] NULL,
[override] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[submission_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[submission_tier0] [int] NULL,
[submission_charge0] [dbo].[balance] NULL,
[submission_tier1] [int] NULL,
[submission_charge1] [dbo].[balance] NULL,
[submission_tier2] [int] NULL,
[submission_charge2] [dbo].[balance] NULL,
[submission_tier3] [int] NULL,
[submission_charge3] [dbo].[balance] NULL,
[submission_tier4] [int] NULL,
[submission_charge4] [dbo].[balance] NULL,
[submission_tier5] [int] NULL,
[submission_charge5] [dbo].[balance] NULL,
[submission_tier6] [int] NULL,
[submission_charge6] [dbo].[balance] NULL,
[submission_tier7] [int] NULL,
[submission_charge7] [dbo].[balance] NULL,
[item_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[item_tier0] [int] NULL,
[item_charge0] [decimal] (19, 4) NULL,
[item_tier1] [int] NULL,
[item_charge1] [decimal] (19, 4) NULL,
[item_tier2] [int] NULL,
[item_charge2] [decimal] (19, 4) NULL,
[item_tier3] [int] NULL,
[item_charge3] [decimal] (19, 4) NULL,
[item_tier4] [int] NULL,
[item_charge4] [decimal] (19, 4) NULL,
[item_tier5] [int] NULL,
[item_charge5] [decimal] (19, 4) NULL,
[item_tier6] [int] NULL,
[item_charge6] [decimal] (19, 4) NULL,
[item_tier7] [int] NULL,
[item_charge7] [decimal] (19, 4) NULL,
[last_submission_count] [int] NULL,
[last_item_count] [int] NULL,
[fee] [dbo].[balance] NULL,
[status] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_call] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payment_transmission] on [dbo].[payment_transmission]'
GO
ALTER TABLE [dbo].[payment_transmission] ADD CONSTRAINT [PK_payment_transmission] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_BACS_usernumber] on [dbo].[payment_transmission]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_BACS_usernumber] ON [dbo].[payment_transmission] ([FK_rowid_call], [BACS_usernumber])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[payment_transmission_c]'
GO
CREATE TABLE [dbo].[payment_transmission_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_payment_transmission] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payment_transmission_c] on [dbo].[payment_transmission_c]'
GO
ALTER TABLE [dbo].[payment_transmission_c] ADD CONSTRAINT [PK_payment_transmission_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_c] on [dbo].[payment_transmission_c]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_c] ON [dbo].[payment_transmission_c] ([FK_rowid_payment_transmission], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[payment_transmission_history]'
GO
CREATE TABLE [dbo].[payment_transmission_history]
(
[rowid] [bigint] NOT NULL,
[files] [int] NULL,
[items] [int] NULL,
[charge] [dbo].[balance] NULL,
[filemarker] [varchar] (35) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_payment_transmission] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payment_transmission_history] on [dbo].[payment_transmission_history]'
GO
ALTER TABLE [dbo].[payment_transmission_history] ADD CONSTRAINT [PK_payment_transmission_history] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_history_filemarker] on [dbo].[payment_transmission_history]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_history_filemarker] ON [dbo].[payment_transmission_history] ([filemarker])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_history] on [dbo].[payment_transmission_history]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_history] ON [dbo].[payment_transmission_history] ([FK_rowid_payment_transmission], [createdate], [createtime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[payment_transmission_product]'
GO
CREATE TABLE [dbo].[payment_transmission_product]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (128) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[submission_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[submission_tier0] [int] NULL,
[submission_charge0] [dbo].[balance] NULL,
[submission_tier1] [int] NULL,
[submission_charge1] [dbo].[balance] NULL,
[submission_tier2] [int] NULL,
[submission_charge2] [dbo].[balance] NULL,
[submission_tier3] [int] NULL,
[submission_charge3] [dbo].[balance] NULL,
[submission_tier4] [int] NULL,
[submission_charge4] [dbo].[balance] NULL,
[submission_tier5] [int] NULL,
[submission_charge5] [dbo].[balance] NULL,
[submission_tier6] [int] NULL,
[submission_charge6] [dbo].[balance] NULL,
[submission_tier7] [int] NULL,
[submission_charge7] [dbo].[balance] NULL,
[item_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[item_tier0] [int] NULL,
[item_charge0] [decimal] (19, 4) NULL,
[item_tier1] [int] NULL,
[item_charge1] [decimal] (19, 4) NULL,
[item_tier2] [int] NULL,
[item_charge2] [decimal] (19, 4) NULL,
[item_tier3] [int] NULL,
[item_charge3] [decimal] (19, 4) NULL,
[item_tier4] [int] NULL,
[item_charge4] [decimal] (19, 4) NULL,
[item_tier5] [int] NULL,
[item_charge5] [decimal] (19, 4) NULL,
[item_tier6] [int] NULL,
[item_charge6] [decimal] (19, 4) NULL,
[item_tier7] [int] NULL,
[item_charge7] [decimal] (19, 4) NULL,
[fee] [dbo].[balance] NULL,
[status] [varchar] (16) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payment_transmission_product] on [dbo].[payment_transmission_product]'
GO
ALTER TABLE [dbo].[payment_transmission_product] ADD CONSTRAINT [PK_payment_transmission_product] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_product_name] on [dbo].[payment_transmission_product]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_product_name] ON [dbo].[payment_transmission_product] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[payment_transmission_product_c]'
GO
CREATE TABLE [dbo].[payment_transmission_product_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_payment_transmission_product] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payment_transmission_product_c] on [dbo].[payment_transmission_product_c]'
GO
ALTER TABLE [dbo].[payment_transmission_product_c] ADD CONSTRAINT [PK_payment_transmission_product_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payment_transmission_product_c] on [dbo].[payment_transmission_product_c]'
GO
CREATE NONCLUSTERED INDEX [IX_payment_transmission_product_c] ON [dbo].[payment_transmission_product_c] ([FK_rowid_payment_transmission_product], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[payout]'
GO
CREATE TABLE [dbo].[payout]
(
[rowid] [bigint] NOT NULL,
[postdate] [datetime] NULL,
[valuebal] [dbo].[balance] NULL,
[crint] [dbo].[balance] NULL,
[tax] [dbo].[balance] NULL,
[crint_pay_code] [int] NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_accsub] [int] NULL,
[crint_pay_away] [dbo].[balance] NULL,
[pnint] [dbo].[balance] NULL,
[drint] [dbo].[balance] NULL,
[drint_pay_code] [int] NULL,
[drint_pay_accno] [bigint] NULL,
[drint_pay_accsub] [int] NULL,
[drint_pay_away] [dbo].[balance] NULL,
[charge] [dbo].[balance] NULL,
[charge_pay_code] [int] NULL,
[charge_pay_accno] [bigint] NULL,
[charge_pay_accsub] [int] NULL,
[charge_pay_away] [dbo].[balance] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[total] [dbo].[balance] NULL,
[ewpenalty] [dbo].[balance] NULL,
[tfr_accno] [bigint] NULL,
[tfr_sortcode] [int] NULL,
[notice_period] [int] NULL,
[notice_given] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[close_acct] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[received] [dbo].[balance] NULL,
[eventdef1] [bigint] NULL,
[fee1] [dbo].[balance] NULL,
[eventdef2] [bigint] NULL,
[fee2] [dbo].[balance] NULL,
[eventdef3] [bigint] NULL,
[fee3] [dbo].[balance] NULL,
[eventdef4] [bigint] NULL,
[fee4] [dbo].[balance] NULL,
[eventdef5] [bigint] NULL,
[fee5] [dbo].[balance] NULL,
[redemption_fee] [dbo].[balance] NULL,
[extension_fee] [dbo].[balance] NULL,
[deeds_release_fee] [dbo].[balance] NULL,
[solicitors_fee] [dbo].[balance] NULL,
[accrued_interest] [dbo].[balance] NULL,
[interest_deposit_bal] [dbo].[balance] NULL,
[close_reason] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_loanred] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_payout] on [dbo].[payout]'
GO
ALTER TABLE [dbo].[payout] ADD CONSTRAINT [PK_payout] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_payout_bookdate] on [dbo].[payout]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_payout_bookdate] ON [dbo].[payout] ([FK_rowid_acct], [postdate], [rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[people_c]'
GO
CREATE TABLE [dbo].[people_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_people] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_people_c] on [dbo].[people_c]'
GO
ALTER TABLE [dbo].[people_c] ADD CONSTRAINT [PK_people_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_people_c] on [dbo].[people_c]'
GO
CREATE NONCLUSTERED INDEX [IX_people_c] ON [dbo].[people_c] ([FK_rowid_people], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[people_v]'
GO
CREATE TABLE [dbo].[people_v]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NOT NULL,
[timestamp] [datetime] NOT NULL,
[bookstamp] [datetime] NOT NULL,
[emplstamp] [int] NOT NULL,
[viewflags] [bigint] NOT NULL,
[FK_rowid_people] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_people_v] on [dbo].[people_v]'
GO
ALTER TABLE [dbo].[people_v] ADD CONSTRAINT [PK_people_v] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_people_v] on [dbo].[people_v]'
GO
CREATE NONCLUSTERED INDEX [IX_people_v] ON [dbo].[people_v] ([FK_rowid_people], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[plot]'
GO
CREATE TABLE [dbo].[plot]
(
[rowid] [bigint] NOT NULL,
[plot_number] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[house_type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[house_type_sub] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[build_stage] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[expected_finish_date] [datetime] NULL,
[actual_finish_date] [datetime] NULL,
[sales_stage] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[sales_amount] [dbo].[balance] NULL,
[asking_price] [dbo].[balance] NULL,
[value] [dbo].[balance] NULL,
[sales_proceeds_recd] [dbo].[balance] NULL,
[expected_completion_date] [datetime] NULL,
[comments] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[redemption_fees_recd] [dbo].[balance] NULL,
[status] [varchar] (9) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_development] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_plot] on [dbo].[plot]'
GO
ALTER TABLE [dbo].[plot] ADD CONSTRAINT [PK_plot] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[plot_c]'
GO
CREATE TABLE [dbo].[plot_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_plot] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_plot_c] on [dbo].[plot_c]'
GO
ALTER TABLE [dbo].[plot_c] ADD CONSTRAINT [PK_plot_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_plot_c] on [dbo].[plot_c]'
GO
CREATE NONCLUSTERED INDEX [IX_plot_c] ON [dbo].[plot_c] ([FK_rowid_plot], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[policy]'
GO
CREATE TABLE [dbo].[policy]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[policyno] [bigint] NULL,
[sumassured] [decimal] (18, 2) NULL,
[grosspremium] [decimal] (18, 0) NULL,
[netpremium] [decimal] (18, 0) NULL,
[collectioncode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[taxcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_security] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_policy] on [dbo].[policy]'
GO
ALTER TABLE [dbo].[policy] ADD CONSTRAINT [PK_policy] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[policy_c]'
GO
CREATE TABLE [dbo].[policy_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_policy] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_policy_c] on [dbo].[policy_c]'
GO
ALTER TABLE [dbo].[policy_c] ADD CONSTRAINT [PK_policy_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_policy_c] on [dbo].[policy_c]'
GO
CREATE NONCLUSTERED INDEX [IX_policy_c] ON [dbo].[policy_c] ([FK_rowid_policy], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[post]'
GO
CREATE TABLE [dbo].[post]
(
[rowid] [bigint] NOT NULL,
[index_FK_rowid_acct] [bigint] NULL,
[index_trandate] [datetime] NULL,
[index_voiddate] [datetime] NULL,
[index_sequence] [bigint] NULL,
[posttime] [datetime] NULL,
[voidtime] [datetime] NULL,
[contra_rowid] [bigint] NULL,
[ib_rowid] [bigint] NULL,
[ibc_rowid] [bigint] NULL,
[exch_rowid] [bigint] NULL,
[exchc_rowid] [bigint] NULL,
[txflags] [bigint] NULL,
[FK_rowid_empl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_post] on [dbo].[post]'
GO
ALTER TABLE [dbo].[post] ADD CONSTRAINT [PK_post] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_post_trandate] on [dbo].[post]'
GO
CREATE NONCLUSTERED INDEX [IX_post_trandate] ON [dbo].[post] ([index_trandate], [posttime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_post_voiddate] on [dbo].[post]'
GO
CREATE NONCLUSTERED INDEX [IX_post_voiddate] ON [dbo].[post] ([index_voiddate], [voidtime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[printer]'
GO
CREATE TABLE [dbo].[printer]
(
[rowid] [bigint] NOT NULL,
[category] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (127) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_printer] on [dbo].[printer]'
GO
ALTER TABLE [dbo].[printer] ADD CONSTRAINT [PK_printer] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[printer]'
GO
ALTER TABLE [dbo].[printer] ADD CONSTRAINT [IX_printer_model] UNIQUE NONCLUSTERED  ([FK_rowid_model], [category])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[printer_c]'
GO
CREATE TABLE [dbo].[printer_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_printer] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_printer_c] on [dbo].[printer_c]'
GO
ALTER TABLE [dbo].[printer_c] ADD CONSTRAINT [PK_printer_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_printer_c] on [dbo].[printer_c]'
GO
CREATE NONCLUSTERED INDEX [IX_printer_c] ON [dbo].[printer_c] ([FK_rowid_printer], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[priv_action]'
GO
CREATE TABLE [dbo].[priv_action]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[description] [varchar] (128) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_priv_action] on [dbo].[priv_action]'
GO
ALTER TABLE [dbo].[priv_action] ADD CONSTRAINT [PK_priv_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_priv_action_id] on [dbo].[priv_action]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_priv_action_id] ON [dbo].[priv_action] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[priv_action_c]'
GO
CREATE TABLE [dbo].[priv_action_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_priv_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_priv_action_c] on [dbo].[priv_action_c]'
GO
ALTER TABLE [dbo].[priv_action_c] ADD CONSTRAINT [PK_priv_action_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_priv_action_c] on [dbo].[priv_action_c]'
GO
CREATE NONCLUSTERED INDEX [IX_priv_action_c] ON [dbo].[priv_action_c] ([FK_rowid_priv_action], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[priv]'
GO
CREATE TABLE [dbo].[priv]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[descr] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_priv] on [dbo].[priv]'
GO
ALTER TABLE [dbo].[priv] ADD CONSTRAINT [PK_priv] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[priv]'
GO
ALTER TABLE [dbo].[priv] ADD CONSTRAINT [IX_priv_name] UNIQUE NONCLUSTERED  ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[priv_c]'
GO
CREATE TABLE [dbo].[priv_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_priv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_priv_c] on [dbo].[priv_c]'
GO
ALTER TABLE [dbo].[priv_c] ADD CONSTRAINT [PK_priv_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_priv_c] on [dbo].[priv_c]'
GO
CREATE NONCLUSTERED INDEX [IX_priv_c] ON [dbo].[priv_c] ([FK_rowid_priv], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privempl]'
GO
CREATE TABLE [dbo].[privempl]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_empl] [bigint] NULL,
[FK_rowid_priv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privempl] on [dbo].[privempl]'
GO
ALTER TABLE [dbo].[privempl] ADD CONSTRAINT [PK_privempl] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privempl_emplpriv] on [dbo].[privempl]'
GO
CREATE NONCLUSTERED INDEX [IX_privempl_emplpriv] ON [dbo].[privempl] ([FK_rowid_empl], [FK_rowid_priv], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privempl_c]'
GO
CREATE TABLE [dbo].[privempl_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_privempl] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privempl_c] on [dbo].[privempl_c]'
GO
ALTER TABLE [dbo].[privempl_c] ADD CONSTRAINT [PK_privempl_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privempl_c] on [dbo].[privempl_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privempl_c] ON [dbo].[privempl_c] ([FK_rowid_privempl], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privlimit]'
GO
CREATE TABLE [dbo].[privlimit]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_limit] [bigint] NULL,
[FK_rowid_priv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privlimit] on [dbo].[privlimit]'
GO
ALTER TABLE [dbo].[privlimit] ADD CONSTRAINT [PK_privlimit] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privlimit_limitpriv] on [dbo].[privlimit]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_privlimit_limitpriv] ON [dbo].[privlimit] ([FK_rowid_limit], [FK_rowid_priv], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privlimit_c]'
GO
CREATE TABLE [dbo].[privlimit_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_privlimit] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privlimit_c] on [dbo].[privlimit_c]'
GO
ALTER TABLE [dbo].[privlimit_c] ADD CONSTRAINT [PK_privlimit_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privlimit_c] on [dbo].[privlimit_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privlimit_c] ON [dbo].[privlimit_c] ([FK_rowid_privlimit], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privpriv_action]'
GO
CREATE TABLE [dbo].[privpriv_action]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_priv] [bigint] NULL,
[FK_rowid_priv_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privpriv_action] on [dbo].[privpriv_action]'
GO
ALTER TABLE [dbo].[privpriv_action] ADD CONSTRAINT [PK_privpriv_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privpriv_action_FKpriv] on [dbo].[privpriv_action]'
GO
CREATE NONCLUSTERED INDEX [IX_privpriv_action_FKpriv] ON [dbo].[privpriv_action] ([FK_rowid_priv])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privpriv_action_FKpriv_action] on [dbo].[privpriv_action]'
GO
CREATE NONCLUSTERED INDEX [IX_privpriv_action_FKpriv_action] ON [dbo].[privpriv_action] ([FK_rowid_priv_action])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privpriv_action_c]'
GO
CREATE TABLE [dbo].[privpriv_action_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_privpriv_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privpriv_action_c] on [dbo].[privpriv_action_c]'
GO
ALTER TABLE [dbo].[privpriv_action_c] ADD CONSTRAINT [PK_privpriv_action_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privpriv_action_c] on [dbo].[privpriv_action_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privpriv_action_c] ON [dbo].[privpriv_action_c] ([FK_rowid_privpriv_action], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privSDKdetail]'
GO
CREATE TABLE [dbo].[privSDKdetail]
(
[rowid] [bigint] NOT NULL,
[readonly] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_priv] [bigint] NULL,
[FK_rowid_SDKdetail] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privSDKdetail] on [dbo].[privSDKdetail]'
GO
ALTER TABLE [dbo].[privSDKdetail] ADD CONSTRAINT [PK_privSDKdetail] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[privSDKdetail]'
GO
ALTER TABLE [dbo].[privSDKdetail] ADD CONSTRAINT [IX_privSDKdetail_privSDKdetail] UNIQUE NONCLUSTERED  ([FK_rowid_priv], [FK_rowid_SDKdetail])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privSDKdetail_c]'
GO
CREATE TABLE [dbo].[privSDKdetail_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_privSDKdetail] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privSDKdetail_c] on [dbo].[privSDKdetail_c]'
GO
ALTER TABLE [dbo].[privSDKdetail_c] ADD CONSTRAINT [PK_privSDKdetail_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privSDKdetail_c] on [dbo].[privSDKdetail_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privSDKdetail_c] ON [dbo].[privSDKdetail_c] ([FK_rowid_privSDKdetail], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privSDKitem]'
GO
CREATE TABLE [dbo].[privSDKitem]
(
[rowid] [bigint] NOT NULL,
[readonly] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_SDKitem] [bigint] NULL,
[FK_rowid_priv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privSDKitem] on [dbo].[privSDKitem]'
GO
ALTER TABLE [dbo].[privSDKitem] ADD CONSTRAINT [PK_privSDKitem] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[privSDKitem]'
GO
ALTER TABLE [dbo].[privSDKitem] ADD CONSTRAINT [IX_privSDKitem_SDKitempriv] UNIQUE NONCLUSTERED  ([FK_rowid_SDKitem], [FK_rowid_priv])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privSDKitem_c]'
GO
CREATE TABLE [dbo].[privSDKitem_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_privSDKitem] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_privSDKitem_c] on [dbo].[privSDKitem_c]'
GO
ALTER TABLE [dbo].[privSDKitem_c] ADD CONSTRAINT [PK_privSDKitem_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privSDKitem_c] on [dbo].[privSDKitem_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privSDKitem_c] ON [dbo].[privSDKitem_c] ([FK_rowid_privSDKitem], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privtableaccess]'
GO
CREATE TABLE [dbo].[privtableaccess] (
    [rowid]			BIGINT		NOT NULL,
	[tablename]		VARCHAR		(50) NULL,
	[flag]			INT			NULL, 
    [createempl]	INT			NULL,
    [createdate]	DATETIME	NULL,
    [createtime]	DATETIME	NULL,
    [amendempl]		INT			NULL,
    [amenddate]		DATETIME	NULL,
    [amendtime]		DATETIME	NULL,
	[FK_rowid_priv]	BIGINT		NUll
    CONSTRAINT [PK_privtableaccess] PRIMARY KEY CLUSTERED ([rowid] ASC)
);
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privtableaccess]'
GO
ALTER TABLE [dbo].[privtableaccess] ADD CONSTRAINT [FK_privtableaccess_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privtableaccess_tablename_priv] on [dbo].[privtableaccess]'
GO
CREATE NONCLUSTERED INDEX [IX_privtableaccess_tablename_priv] ON [dbo].[privtableaccess] ([FK_rowid_priv], [tablename])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[privtableaccess_c]'
GO
CREATE TABLE [dbo].[privtableaccess_c] (
    [rowid]         BIGINT         NOT NULL,
    [fieldname]     VARCHAR (50)   NULL,
    [oldvalue]      VARCHAR (2048) NULL,
    [newvalue]      VARCHAR (2048) NULL,
    [datestamp]     DATETIME       NULL,
    [timestamp]     DATETIME       NULL,
    [emplstamp]     INT            NULL,
    [FK_rowid_privtableaccess] BIGINT         NULL,
    CONSTRAINT [PK_privtableaccess_c] PRIMARY KEY CLUSTERED ([rowid] ASC),
);
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privtableaccess_c]'
GO
ALTER TABLE [dbo].[privtableaccess_c] ADD CONSTRAINT [FK_privtableaccess_c_privtableaccess] FOREIGN KEY ([FK_rowid_privtableaccess]) REFERENCES [dbo].[privtableaccess] ([rowid]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privtableaccess_c] on [dbo].[privtableaccess_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privtableaccess_c] ON [dbo].[privtableaccess_c] ([FK_rowid_privtableaccess], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_privtableaccess_c_Fk_rowid_privtableaccess] on [dbo].[privtableaccess_c]'
GO
CREATE NONCLUSTERED INDEX [IX_privtableaccess_c_Fk_rowid_privtableaccess] ON [dbo].[privtableaccess_c] ([FK_rowid_privtableaccess])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prod_c]'
GO
CREATE TABLE [dbo].[prod_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prod_c] on [dbo].[prod_c]'
GO
ALTER TABLE [dbo].[prod_c] ADD CONSTRAINT [PK_prod_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prod_c] on [dbo].[prod_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prod_c] ON [dbo].[prod_c] ([FK_rowid_prod], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodbase]'
GO
CREATE TABLE [dbo].[prodbase]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[ratetype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_base] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodbase] on [dbo].[prodbase]'
GO
ALTER TABLE [dbo].[prodbase] ADD CONSTRAINT [PK_prodbase] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbase_unique] on [dbo].[prodbase]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_prodbase_unique] ON [dbo].[prodbase] ([FK_rowid_base], [FK_rowid_prod], [ratetype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbase_FK_rowid_base] on [dbo].[prodbase]'
GO
CREATE NONCLUSTERED INDEX [IX_prodbase_FK_rowid_base] ON [dbo].[prodbase] ([FK_rowid_base], [ratetype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbase_FK_rowid_prod] on [dbo].[prodbase]'
GO
CREATE NONCLUSTERED INDEX [IX_prodbase_FK_rowid_prod] ON [dbo].[prodbase] ([FK_rowid_prod])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodbase_c]'
GO
CREATE TABLE [dbo].[prodbase_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodbase] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodbase_c] on [dbo].[prodbase_c]'
GO
ALTER TABLE [dbo].[prodbase_c] ADD CONSTRAINT [PK_prodbase_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbase_c] on [dbo].[prodbase_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodbase_c] ON [dbo].[prodbase_c] ([FK_rowid_prodbase], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodbook]'
GO
CREATE TABLE [dbo].[prodbook]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_bookdef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodbook] on [dbo].[prodbook]'
GO
ALTER TABLE [dbo].[prodbook] ADD CONSTRAINT [PK_prodbook] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbook_FKbookdef] on [dbo].[prodbook]'
GO
CREATE NONCLUSTERED INDEX [IX_prodbook_FKbookdef] ON [dbo].[prodbook] ([FK_rowid_prod], [FK_rowid_bookdef], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodbook_c]'
GO
CREATE TABLE [dbo].[prodbook_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodbook] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodbook_c] on [dbo].[prodbook_c]'
GO
ALTER TABLE [dbo].[prodbook_c] ADD CONSTRAINT [PK_prodbook_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodbook_c] on [dbo].[prodbook_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodbook_c] ON [dbo].[prodbook_c] ([FK_rowid_prodbook], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodcarddef]'
GO
CREATE TABLE [dbo].[prodcarddef]
(
[rowid] [bigint] NOT NULL,
[withdrawallimit] [dbo].[balance] NULL,
[withdrawallimitoverride] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[balancelimit] [dbo].[balance] NULL,
[balancelimitoverride] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[disburselimit] [dbo].[balance] NULL,
[disburselimitoverride] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_carddef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodcarddef] on [dbo].[prodcarddef]'
GO
ALTER TABLE [dbo].[prodcarddef] ADD CONSTRAINT [PK_prodcarddef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodcarddef_FKcarddef] on [dbo].[prodcarddef]'
GO
CREATE NONCLUSTERED INDEX [IX_prodcarddef_FKcarddef] ON [dbo].[prodcarddef] ([FK_rowid_prod], [FK_rowid_carddef], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodcarddef_c]'
GO
CREATE TABLE [dbo].[prodcarddef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodcarddef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodcarddef_c] on [dbo].[prodcarddef_c]'
GO
ALTER TABLE [dbo].[prodcarddef_c] ADD CONSTRAINT [PK_prodcarddef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodcarddef_c] on [dbo].[prodcarddef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodcarddef_c] ON [dbo].[prodcarddef_c] ([FK_rowid_prodcarddef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodccy]'
GO
CREATE TABLE [dbo].[prodccy]
(
[rowid] [bigint] NOT NULL,
[intcode] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodccy] on [dbo].[prodccy]'
GO
ALTER TABLE [dbo].[prodccy] ADD CONSTRAINT [PK_prodccy] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[prodccy]'
GO
ALTER TABLE [dbo].[prodccy] ADD CONSTRAINT [IX_prodccy_FKprod] UNIQUE NONCLUSTERED  ([FK_rowid_prod], [intcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodccy_c]'
GO
CREATE TABLE [dbo].[prodccy_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodccy] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodccy_c] on [dbo].[prodccy_c]'
GO
ALTER TABLE [dbo].[prodccy_c] ADD CONSTRAINT [PK_prodccy_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodccy_c] on [dbo].[prodccy_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodccy_c] ON [dbo].[prodccy_c] ([FK_rowid_prodccy], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodcondition]'
GO
CREATE TABLE [dbo].[prodcondition]
(
[rowid] [bigint] NOT NULL,
[condition] [int] NULL,
[truth] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodcondition] on [dbo].[prodcondition]'
GO
ALTER TABLE [dbo].[prodcondition] ADD CONSTRAINT [PK_prodcondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodcondition_c]'
GO
CREATE TABLE [dbo].[prodcondition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodcondition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodcondition_c] on [dbo].[prodcondition_c]'
GO
ALTER TABLE [dbo].[prodcondition_c] ADD CONSTRAINT [PK_prodcondition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodcondition_c] on [dbo].[prodcondition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodcondition_c] ON [dbo].[prodcondition_c] ([FK_rowid_prodcondition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodloanelement]'
GO
CREATE TABLE [dbo].[prodloanelement]
(
[rowid] [bigint] NOT NULL,
[priority] [int] NULL,
[activates_loan] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_loanelement] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodloanelement] on [dbo].[prodloanelement]'
GO
ALTER TABLE [dbo].[prodloanelement] ADD CONSTRAINT [PK_prodloanelement] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodloanelement_FK_rowid_loanelement] on [dbo].[prodloanelement]'
GO
CREATE NONCLUSTERED INDEX [IX_prodloanelement_FK_rowid_loanelement] ON [dbo].[prodloanelement] ([FK_rowid_loanelement])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodloanelement_FK_rowid_prod] on [dbo].[prodloanelement]'
GO
CREATE NONCLUSTERED INDEX [IX_prodloanelement_FK_rowid_prod] ON [dbo].[prodloanelement] ([FK_rowid_prod])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodloanelement_c]'
GO
CREATE TABLE [dbo].[prodloanelement_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodloanelement] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodloanelement_c] on [dbo].[prodloanelement_c]'
GO
ALTER TABLE [dbo].[prodloanelement_c] ADD CONSTRAINT [PK_prodloanelement_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodloanelement_c] on [dbo].[prodloanelement_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodloanelement_c] ON [dbo].[prodloanelement_c] ([FK_rowid_prodloanelement], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodmodel]'
GO
CREATE TABLE [dbo].[prodmodel]
(
[rowid] [bigint] NOT NULL,
[code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodmodel] on [dbo].[prodmodel]'
GO
ALTER TABLE [dbo].[prodmodel] ADD CONSTRAINT [PK_prodmodel] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[prodmodel]'
GO
ALTER TABLE [dbo].[prodmodel] ADD CONSTRAINT [IX_prodmodel_model] UNIQUE NONCLUSTERED  ([code], [FK_rowid_prod])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[prodmodel]'
GO
ALTER TABLE [dbo].[prodmodel] ADD CONSTRAINT [IX_prodmodel_prod] UNIQUE NONCLUSTERED  ([FK_rowid_prod], [code])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodmodel_c]'
GO
CREATE TABLE [dbo].[prodmodel_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodmodel] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodmodel_c] on [dbo].[prodmodel_c]'
GO
ALTER TABLE [dbo].[prodmodel_c] ADD CONSTRAINT [PK_prodmodel_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodmodel_c] on [dbo].[prodmodel_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodmodel_c] ON [dbo].[prodmodel_c] ([FK_rowid_prodmodel], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodprograte]'
GO
CREATE TABLE [dbo].[prodprograte]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[ratetype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_prograte] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodprograte] on [dbo].[prodprograte]'
GO
ALTER TABLE [dbo].[prodprograte] ADD CONSTRAINT [PK_prodprograte] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodprograte_unique] on [dbo].[prodprograte]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_prodprograte_unique] ON [dbo].[prodprograte] ([FK_rowid_prod], [FK_rowid_prograte], [ratetype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodprograte_FK_rowid_prod] on [dbo].[prodprograte]'
GO
CREATE NONCLUSTERED INDEX [IX_prodprograte_FK_rowid_prod] ON [dbo].[prodprograte] ([FK_rowid_prod], [ratetype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodprograte_FK_rowid_prograte] on [dbo].[prodprograte]'
GO
CREATE NONCLUSTERED INDEX [IX_prodprograte_FK_rowid_prograte] ON [dbo].[prodprograte] ([FK_rowid_prograte], [ratetype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prodprograte_c]'
GO
CREATE TABLE [dbo].[prodprograte_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prodprograte] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prodprograte_c] on [dbo].[prodprograte_c]'
GO
ALTER TABLE [dbo].[prodprograte_c] ADD CONSTRAINT [PK_prodprograte_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prodprograte_c] on [dbo].[prodprograte_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prodprograte_c] ON [dbo].[prodprograte_c] ([FK_rowid_prodprograte], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prograte]'
GO
CREATE TABLE [dbo].[prograte]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_yn] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[drint_yn] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prograte] on [dbo].[prograte]'
GO
ALTER TABLE [dbo].[prograte] ADD CONSTRAINT [PK_prograte] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[prograte]'
GO
ALTER TABLE [dbo].[prograte] ADD CONSTRAINT [IX_prograte_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[prograte_c]'
GO
CREATE TABLE [dbo].[prograte_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_prograte] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_prograte_c] on [dbo].[prograte_c]'
GO
ALTER TABLE [dbo].[prograte_c] ADD CONSTRAINT [PK_prograte_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_prograte_c] on [dbo].[prograte_c]'
GO
CREATE NONCLUSTERED INDEX [IX_prograte_c] ON [dbo].[prograte_c] ([FK_rowid_prograte], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[proof]'
GO
CREATE TABLE [dbo].[proof]
(
[rowid] [bigint] NOT NULL,
[dateadded] [datetime] NULL,
[image] [image] NULL,
[type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[accno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_proof] on [dbo].[proof]'
GO
ALTER TABLE [dbo].[proof] ADD CONSTRAINT [PK_proof] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_proof_acct] on [dbo].[proof]'
GO
CREATE NONCLUSTERED INDEX [IX_proof_acct] ON [dbo].[proof] ([FK_rowid_acct], [accno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_proof_contact] on [dbo].[proof]'
GO
CREATE NONCLUSTERED INDEX [IX_proof_contact] ON [dbo].[proof] ([FK_rowid_contact], [accno], [type], [status], [createdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_proof_nonpers] on [dbo].[proof]'
GO
CREATE NONCLUSTERED INDEX [IX_proof_nonpers] ON [dbo].[proof] ([FK_rowid_nonpers], [accno], [type], [status], [createdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_proof_people] on [dbo].[proof]'
GO
CREATE NONCLUSTERED INDEX [IX_proof_people] ON [dbo].[proof] ([FK_rowid_people], [accno], [type], [status], [createdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[proof_c]'
GO
CREATE TABLE [dbo].[proof_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_proof] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_proof_c] on [dbo].[proof_c]'
GO
ALTER TABLE [dbo].[proof_c] ADD CONSTRAINT [PK_proof_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_proof_c] on [dbo].[proof_c]'
GO
CREATE NONCLUSTERED INDEX [IX_proof_c] ON [dbo].[proof_c] ([FK_rowid_proof], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[property_c]'
GO
CREATE TABLE [dbo].[property_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_property] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_property_c] on [dbo].[property_c]'
GO
ALTER TABLE [dbo].[property_c] ADD CONSTRAINT [PK_property_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_property_c] on [dbo].[property_c]'
GO
CREATE NONCLUSTERED INDEX [IX_property_c] ON [dbo].[property_c] ([FK_rowid_property], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[rate]'
GO
CREATE TABLE [dbo].[rate]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[method] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[level0] [decimal] (10, 0) NULL,
[level1] [decimal] (10, 0) NULL,
[level2] [decimal] (10, 0) NULL,
[level3] [decimal] (10, 0) NULL,
[level4] [decimal] (10, 0) NULL,
[level5] [decimal] (10, 0) NULL,
[level6] [decimal] (10, 0) NULL,
[level7] [decimal] (10, 0) NULL,
[rate0] [decimal] (8, 6) NULL,
[rate1] [decimal] (8, 6) NULL,
[rate2] [decimal] (8, 6) NULL,
[rate3] [decimal] (8, 6) NULL,
[rate4] [decimal] (8, 6) NULL,
[rate5] [decimal] (8, 6) NULL,
[rate6] [decimal] (8, 6) NULL,
[rate7] [decimal] (8, 6) NULL,
[base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[cap] [decimal] (8, 6) NULL,
[floor] [decimal] (8, 6) NULL,
[unauth_type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[unauth_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[unauth_rate] [decimal] (8, 6) NULL,
[switch_level] [int] NULL,
[use_level] [int] NULL,
[rate0_fixed] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_prograte] [bigint] NULL,
[FK_rowid_acctgroup] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_rate] on [dbo].[rate]'
GO
ALTER TABLE [dbo].[rate] ADD CONSTRAINT [PK_rate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rate_FKacct] on [dbo].[rate]'
GO
CREATE NONCLUSTERED INDEX [IX_rate_FKacct] ON [dbo].[rate] ([FK_rowid_acct] DESC, [type] DESC, [startdate] DESC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rate_FKacctgroup] on [dbo].[rate]'
GO
CREATE NONCLUSTERED INDEX [IX_rate_FKacctgroup] ON [dbo].[rate] ([FK_rowid_acctgroup] DESC, [type] DESC, [startdate] DESC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rate_FKprod] on [dbo].[rate]'
GO
CREATE NONCLUSTERED INDEX [IX_rate_FKprod] ON [dbo].[rate] ([FK_rowid_prod] DESC, [type] DESC, [startdate] DESC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rate_FKprograte] on [dbo].[rate]'
GO
CREATE NONCLUSTERED INDEX [IX_rate_FKprograte] ON [dbo].[rate] ([FK_rowid_prograte] DESC, [type] DESC, [startdate] DESC)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[rate_c]'
GO
CREATE TABLE [dbo].[rate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_rate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_rate_c] on [dbo].[rate_c]'
GO
ALTER TABLE [dbo].[rate_c] ADD CONSTRAINT [PK_rate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rate_c] on [dbo].[rate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_rate_c] ON [dbo].[rate_c] ([FK_rowid_rate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[rateused]'
GO
CREATE TABLE [dbo].[rateused]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[rate] [decimal] (8, 6) NULL,
[method] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[unauth] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_rate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_rateused] on [dbo].[rateused]'
GO
ALTER TABLE [dbo].[rateused] ADD CONSTRAINT [PK_rateused] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[rateused]'
GO
ALTER TABLE [dbo].[rateused] ADD CONSTRAINT [IX_rateused_FKacct] UNIQUE NONCLUSTERED  ([FK_rowid_acct], [startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[relate]'
GO
CREATE TABLE [dbo].[relate]
(
[rowid] [bigint] NOT NULL,
[FK_rowid_nonpers] [bigint] NULL,
[relnonpers] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_people] [bigint] NULL,
[relpeople] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_acct] [bigint] NULL,
[relacct] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_securities] [bigint] NULL,
[relsecurity] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_relate2] [bigint] NULL,
[relrelate2] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[relparent] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[reltype] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[relpri] [int] NULL,
[other_description] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_exemption] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[signeddate] [datetime] NULL,
[cancelleddate] [datetime] NULL,
[cancelledtime] [datetime] NULL,
[cancelledempl] [int] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_relate] on [dbo].[relate]'
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [PK_relate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_FKacct] on [dbo].[relate]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_FKacct] ON [dbo].[relate] ([FK_rowid_acct], [relpri], [reltype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_FKnonpers] on [dbo].[relate]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_FKnonpers] ON [dbo].[relate] ([FK_rowid_nonpers], [relpri], [reltype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_FKpeople] on [dbo].[relate]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_FKpeople] ON [dbo].[relate] ([FK_rowid_people], [relpri], [reltype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_FK_rowid_relate2] on [dbo].[relate]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_FK_rowid_relate2] ON [dbo].[relate] ([FK_rowid_relate2])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_FKsecurities] on [dbo].[relate]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_FKsecurities] ON [dbo].[relate] ([FK_rowid_securities], [relpri], [reltype])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[relate_c]'
GO
CREATE TABLE [dbo].[relate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_relate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_relate_c] on [dbo].[relate_c]'
GO
ALTER TABLE [dbo].[relate_c] ADD CONSTRAINT [PK_relate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relate_c] on [dbo].[relate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_relate_c] ON [dbo].[relate_c] ([FK_rowid_relate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[relate2]'
GO
CREATE TABLE [dbo].[relate2]
(
[rowid] [bigint] NOT NULL,
[FK_rowid_nonpers] [bigint] NULL,
[relnonpers] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_people] [bigint] NULL,
[relpeople] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_acct] [bigint] NULL,
[relacct] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_securities] [bigint] NULL,
[relsecurity] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_relate2] on [dbo].[relate2]'
GO
ALTER TABLE [dbo].[relate2] ADD CONSTRAINT [PK_relate2] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[relateextra]'
GO
CREATE TABLE [dbo].[relateextra]
(
[rowid] [bigint] NOT NULL,
[position] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[employmentdate] [datetime] NULL,
[guaranteetype] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[guaranteesigneddate] [datetime] NULL,
[guaranteestatus] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[expirydate] [datetime] NULL,
[financial_limit] [dbo].[balance] NULL,
[financial_pcent] [decimal] (5, 2) NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[createempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[amendempl] [int] NULL,
[FK_rowid_relate] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_relateextra] on [dbo].[relateextra]'
GO
ALTER TABLE [dbo].[relateextra] ADD CONSTRAINT [PK_relateextra] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[relateextra]'
GO
ALTER TABLE [dbo].[relateextra] ADD CONSTRAINT [IX_relateextra_FKrelate] UNIQUE NONCLUSTERED  ([FK_rowid_relate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[relateextra_c]'
GO
CREATE TABLE [dbo].[relateextra_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_relateextra] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_relateextra_c] on [dbo].[relateextra_c]'
GO
ALTER TABLE [dbo].[relateextra_c] ADD CONSTRAINT [PK_relateextra_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_relateextra_c] on [dbo].[relateextra_c]'
GO
CREATE NONCLUSTERED INDEX [IX_relateextra_c] ON [dbo].[relateextra_c] ([FK_rowid_relateextra], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnktxns]'
GO
CREATE TABLE [dbo].[ibnktxns]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_ibnkuser_submitter] [bigint] NULL,
[txncode] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[amount] [dbo].[balance] NULL,
[ccy] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bookdate] [datetime] NULL,
[startdate] [datetime] NULL,
[description] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (31) COLLATE Latin1_General_CI_AS NULL,
[bentitle] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[layout] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[format] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[search_options] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[origrowid] [bigint] NULL,
[expire] [datetime] NULL,
[every] [int] NULL,
[freq] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[numpymts] [int] NULL,
[day] [int] NULL,
[from_sortcode] [int] NULL,
[from_accno] [bigint] NULL,
[to_sortcode] [int] NULL,
[to_accno] [bigint] NULL,
[errmsg1] [varchar] (512) COLLATE Latin1_General_CI_AS NULL,
[errmsg2] [varchar] (512) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[logid] [bigint] NULL,
[id] [int] NULL,
[autopyinrowid] [bigint] NULL,
[payasap] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[guid] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[checked] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[submit_date] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser] [bigint] NULL,
[auth_date] [datetime] NULL,
[auth_time] [datetime] NULL,
[authorise_date] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser1] [bigint] NULL,
[auth_date1] [datetime] NULL,
[auth_time1] [datetime] NULL,
[authorise_date1] [datetime] NULL,
[accountownerrowid] [bigint] NULL,
[txn_limit] [dbo].[balance] NULL,
[daily_txn_limit] [dbo].[balance] NULL,
[submission_token] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[bulk_total] [int] NULL,
[bulk_posted] [int] NULL,
[bulk_rejected] [int] NULL,
[bulk_errored] [int] NULL,
[bulk_cancelled] [int] NULL,
[bulk_charged] [int] NULL,
[create_date] [datetime] NULL,
[create_time] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnktxns] on [dbo].[ibnktxns]'
GO
ALTER TABLE [dbo].[ibnktxns] ADD CONSTRAINT [PK_ibnktxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_accountownerrowid] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_accountownerrowid] ON [dbo].[ibnktxns] ([accountownerrowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_checked] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_checked] ON [dbo].[ibnktxns] ([checked], [from_sortcode], [from_accno])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_auth] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_auth] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_authoriser], [auth_date], [auth_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_auth1] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_auth1] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_authoriser1], [auth_date1], [auth_time1])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_autopyinrowid] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_autopyinrowid] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_submitter], [autopyinrowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_username] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_username] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_submitter], [create_date], [create_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_logid] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_logid] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_submitter], [logid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_origrowid] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_origrowid] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_submitter], [origrowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_usernamestatus] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_usernamestatus] ON [dbo].[ibnktxns] ([FK_rowid_ibnkuser_submitter], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_submission_token] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_submission_token] ON [dbo].[ibnktxns] ([submission_token])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_toacct] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_toacct] ON [dbo].[ibnktxns] ([to_accno], [to_sortcode], [type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_status] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_status] ON [dbo].[ibnktxns] ([type], [bookdate], [create_time], [from_sortcode], [from_accno], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_type] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_type] ON [dbo].[ibnktxns] ([type], [description], [status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_ibnktxns_guid] on [dbo].[ibnktxns]'
GO
CREATE NONCLUSTERED INDEX [IX_ibnktxns_guid] ON [dbo].[ibnktxns] ([guid])
WHERE guid != '';
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txnsextra]'
GO
CREATE TABLE [dbo].[txnsextra]
(
[rowid] [bigint] NOT NULL,
[reject_reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[void_reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[authorise_reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[return_reason] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[advice_reason] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[return_fee] [bigint] NULL,
[returntime] [datetime] NULL,
[returndate] [datetime] NULL,
[returnsortcode] [int] NULL,
[returnacctno] [bigint] NULL,
[adviceempl] [int] NULL,
[advicedate] [datetime] NULL,
[advicetime] [datetime] NULL,
[advicesortcode] [int] NULL,
[adviceacctno] [bigint] NULL,
[FK_rowid_ibnkuser_submitter] [bigint] NULL,
[ibnksubmitdate] [datetime] NULL,
[ibnksubmittime] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser] [bigint] NULL,
[ibnkauthorisedate] [datetime] NULL,
[ibnkauthorisetime] [datetime] NULL,
[FK_rowid_ibnkuser_authoriser2] [bigint] NULL,
[ibnkauthorisedate2] [datetime] NULL,
[ibnkauthorisetime2] [datetime] NULL,
[penalty_to_charge] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_txns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txnsextra] on [dbo].[txnsextra]'
GO
ALTER TABLE [dbo].[txnsextra] ADD CONSTRAINT [PK_txnsextra] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[txnsextra]'
GO
ALTER TABLE [dbo].[txnsextra] ADD CONSTRAINT [IX_txnsextra_FK_rowid_txns] UNIQUE NONCLUSTERED  ([FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[rules]'
GO
CREATE TABLE [dbo].[rules]
(
[rowid] [bigint] NOT NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[source] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[source_type] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[source_account] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[source_code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source_ledger] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source_ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source_ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source_ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[source_lookup] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_type] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[contra_account] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[contra_code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_ledger] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[contra_lookup] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[chgtype] [int] NULL,
[chgtype_contra] [int] NULL,
[fee_id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[cr_turnover] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dr_turnover] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cr_item_count] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[dr_item_count] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[post_blocked] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_txndef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_rules] on [dbo].[rules]'
GO
ALTER TABLE [dbo].[rules] ADD CONSTRAINT [PK_rules] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rules_txndef] on [dbo].[rules]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_rules_txndef] ON [dbo].[rules] ([FK_rowid_txndef], [source], [startdate] desc)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[rules_c]'
GO
CREATE TABLE [dbo].[rules_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_rules] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_rules_c] on [dbo].[rules_c]'
GO
ALTER TABLE [dbo].[rules_c] ADD CONSTRAINT [PK_rules_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_rules_c] on [dbo].[rules_c]'
GO
CREATE NONCLUSTERED INDEX [IX_rules_c] ON [dbo].[rules_c] ([FK_rowid_rules], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txndef]'
GO
CREATE TABLE [dbo].[txndef]
(
[rowid] [bigint] NOT NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[txnconv] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[txnclrcode] [dbo].[txnclrcode] NULL,
[txndesc] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[txnusage] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[txncategory] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[reference] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqserialno] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqpayee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[book] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stop] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[txntype] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[forvaldays] [int] NULL,
[holddays] [int] NULL,
[exchange] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[instrument] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[notice_given] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[loan_drawdown] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[activity] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[loan_payment] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[vat_rate] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[term_deposit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bacsdcout] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[isdirectdebit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[isbanktransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[isinternational] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ischeque] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[iscash] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[isdomestic] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ischaps] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payment_service] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[paperwork_paymentslip] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[paperwork_adviceletter] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[adjust] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[allow_call] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_loan] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_term] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_gl] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[supplist] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payout] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fee_suspense] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[allow_taxfree_product] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[ignore_taxfree_limit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[bad_debt_provision] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[facility_limit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[auth_levels] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[pre_advance_credit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[substitute_referred] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[substitute_txnclrcode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txndef] on [dbo].[txndef]'
GO
ALTER TABLE [dbo].[txndef] ADD CONSTRAINT [PK_txndef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txndef_txnclrcode] on [dbo].[txndef]'
GO
CREATE NONCLUSTERED INDEX [IX_txndef_txnclrcode] ON [dbo].[txndef] ([txnclrcode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[txndef]'
GO
ALTER TABLE [dbo].[txndef] ADD CONSTRAINT [IX_txndef_txncode] UNIQUE NONCLUSTERED  ([txncode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[txndef]'
GO
ALTER TABLE [dbo].[txndef] ADD CONSTRAINT [IX_txndef_txnconv] UNIQUE NONCLUSTERED  ([txnconv])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKLogin]'
GO
CREATE TABLE [dbo].[SDKLogin]
(
[rowid] [bigint] NOT NULL,
[username] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[password] [varbinary] (256) NULL,
[userid] [int] NULL,
[locked] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKLogin] on [dbo].[SDKLogin]'
GO
ALTER TABLE [dbo].[SDKLogin] ADD CONSTRAINT [PK_SDKLogin] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKLogin]'
GO
ALTER TABLE [dbo].[SDKLogin] ADD CONSTRAINT [useridix] UNIQUE NONCLUSTERED  ([userid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKLogin]'
GO
ALTER TABLE [dbo].[SDKLogin] ADD CONSTRAINT [usernameix] UNIQUE NONCLUSTERED  ([username])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKLogin_c]'
GO
CREATE TABLE [dbo].[SDKLogin_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_SDKLogin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKLogin_c] on [dbo].[SDKLogin_c]'
GO
ALTER TABLE [dbo].[SDKLogin_c] ADD CONSTRAINT [PK_SDKLogin_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_SDKLogin_c] on [dbo].[SDKLogin_c]'
GO
CREATE NONCLUSTERED INDEX [IX_SDKLogin_c] ON [dbo].[SDKLogin_c] ([FK_rowid_SDKLogin], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKpossiblevalues]'
GO
CREATE TABLE [dbo].[SDKpossiblevalues]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[value] [varchar] (50) COLLATE Latin1_General_CI_AS NOT NULL,
[FK_rowid_SDKdetail] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [SDKpossiblevaluesix] on [dbo].[SDKpossiblevalues]'
GO
CREATE CLUSTERED INDEX [SDKpossiblevaluesix] ON [dbo].[SDKpossiblevalues] ([FK_rowid_SDKdetail], [no])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKpossiblevalues] on [dbo].[SDKpossiblevalues]'
GO
ALTER TABLE [dbo].[SDKpossiblevalues] ADD CONSTRAINT [PK_SDKpossiblevalues] PRIMARY KEY NONCLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDKLoginSDKitem]'
GO
CREATE TABLE [dbo].[SDKLoginSDKitem]
(
[rowid] [bigint] NOT NULL,
[FK_rowid_SDKitem] [bigint] NULL,
[FK_rowid_SDKlogin] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SDKLoginSDKitem] on [dbo].[SDKLoginSDKitem]'
GO
ALTER TABLE [dbo].[SDKLoginSDKitem] ADD CONSTRAINT [PK_SDKLoginSDKitem] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SDKLoginSDKitem]'
GO
ALTER TABLE [dbo].[SDKLoginSDKitem] ADD CONSTRAINT [IX_SDKLoginSDKitem] UNIQUE NONCLUSTERED  ([FK_rowid_SDKitem], [FK_rowid_SDKlogin])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[securities_c]'
GO
CREATE TABLE [dbo].[securities_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_securities_c] on [dbo].[securities_c]'
GO
ALTER TABLE [dbo].[securities_c] ADD CONSTRAINT [PK_securities_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_securities_c] on [dbo].[securities_c]'
GO
CREATE NONCLUSTERED INDEX [IX_securities_c] ON [dbo].[securities_c] ([FK_rowid_securities], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[securities_comment]'
GO
CREATE TABLE [dbo].[securities_comment]
(
[rowid] [bigint] NOT NULL,
[title] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[line5] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[comment_date] [datetime] NULL,
[comment_time] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_securities_comment] on [dbo].[securities_comment]'
GO
ALTER TABLE [dbo].[securities_comment] ADD CONSTRAINT [PK_securities_comment] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_securities_comment_date] on [dbo].[securities_comment]'
GO
CREATE NONCLUSTERED INDEX [IX_securities_comment_date] ON [dbo].[securities_comment] ([FK_rowid_securities], [comment_date], [comment_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[securities_comment_c]'
GO
CREATE TABLE [dbo].[securities_comment_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_securities_comment] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_securities_comment_c] on [dbo].[securities_comment_c]'
GO
ALTER TABLE [dbo].[securities_comment_c] ADD CONSTRAINT [PK_securities_comment_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_securities_comment_c] on [dbo].[securities_comment_c]'
GO
CREATE NONCLUSTERED INDEX [IX_securities_comment_c] ON [dbo].[securities_comment_c] ([FK_rowid_securities_comment], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[sequence]'
GO
CREATE TABLE [dbo].[sequence]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[last_number] [bigint] NULL,
[end_range] [bigint] NULL,
[start_range] [bigint] NULL,
[algorithm] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[predefined_weight] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[digits] [int] NULL,
[sortcode_weight] [int] NULL,
[number_weight] [bigint] NULL,
[use_digit0] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[weight_threshold] [int] NULL,
[subtract] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_sequence] on [dbo].[sequence]'
GO
ALTER TABLE [dbo].[sequence] ADD CONSTRAINT [PK_sequence] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_sequence_ranges] on [dbo].[sequence]'
GO
CREATE NONCLUSTERED INDEX [IX_sequence_ranges] ON [dbo].[sequence] ([start_range], [FK_rowid_model])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[sequence]'
GO
ALTER TABLE [dbo].[sequence] ADD CONSTRAINT [IX_sequence_type] UNIQUE NONCLUSTERED  ([type], [FK_rowid_model])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[sequence_c]'
GO
CREATE TABLE [dbo].[sequence_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_sequence] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_sequence_c] on [dbo].[sequence_c]'
GO
ALTER TABLE [dbo].[sequence_c] ADD CONSTRAINT [PK_sequence_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_sequence_c] on [dbo].[sequence_c]'
GO
CREATE NONCLUSTERED INDEX [IX_sequence_c] ON [dbo].[sequence_c] ([FK_rowid_sequence], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[sigdetail]'
GO
CREATE TABLE [dbo].[sigdetail]
(
[rowid] [bigint] NOT NULL,
[comment1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[comment2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[comment3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[comment4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_call] [bigint] NULL,
[FK_rowid_term] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_sigdetails] on [dbo].[sigdetail]'
GO
ALTER TABLE [dbo].[sigdetail] ADD CONSTRAINT [PK_sigdetails] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_sigdetail_FKcall] on [dbo].[sigdetail]'
GO
CREATE NONCLUSTERED INDEX [IX_sigdetail_FKcall] ON [dbo].[sigdetail] ([FK_rowid_call])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_sigdetail_FKterm] on [dbo].[sigdetail]'
GO
CREATE NONCLUSTERED INDEX [IX_sigdetail_FKterm] ON [dbo].[sigdetail] ([FK_rowid_term])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[sigdetail_c]'
GO
CREATE TABLE [dbo].[sigdetail_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_sigdetail] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_sigdetail_c] on [dbo].[sigdetail_c]'
GO
ALTER TABLE [dbo].[sigdetail_c] ADD CONSTRAINT [PK_sigdetail_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_sigdetail_c] on [dbo].[sigdetail_c]'
GO
CREATE NONCLUSTERED INDEX [IX_sigdetail_c] ON [dbo].[sigdetail_c] ([FK_rowid_sigdetail], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[term]'
GO
CREATE TABLE [dbo].[term]
(
[rowid] [bigint] NOT NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[signers] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[term] [int] NULL,
[termfreq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[startbookdate] [datetime] NULL,
[crint_IRreportable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_gross] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_split_pcent] [decimal] (10, 7) NULL,
[crint_gross_IRreportable_yes_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_IRreportable_no_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_next] [datetime] NULL,
[crint_pay_by] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_pcent] [decimal] (5, 2) NULL,
[crint_pay_sortcode] [int] NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_accsub] [int] NULL,
[crint_accr] [dbo].[accrual] NULL,
[pnint_accr] [dbo].[accrual] NULL,
[crint_paid_td] [dbo].[balance] NULL,
[tax_paid_td] [dbo].[balance] NULL,
[total_crint_expected] [dbo].[balance] NULL,
[total_crint_expected_status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[maturitydate] [datetime] NULL,
[maturitydate_increment_days] [int] NULL,
[closed] [datetime] NULL,
[mat_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[mat_pay_sortcode] [int] NULL,
[mat_pay_accno] [bigint] NULL,
[mat_pay_accsub] [int] NULL,
[mat_rollover_product] [bigint] NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_valuebal] [dbo].[balance] NULL,
[eod_bookbal] [dbo].[balance] NULL,
[eod_intrate] [decimal] (8, 6) NULL,
[regulatory_dormant] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regulatory_last_activity] [datetime] NULL,
[last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[last_savepoint] [datetime] NULL,
[product] [bigint] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[close_reason] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[deposit] [dbo].[balance] NULL,
[deposit_previous] [dbo].[balance] NULL,
[conversion] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[mm_autorollover] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mm_autorolloverday] [int] NULL,
[mm_autorollovertype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[mm_onmaturity] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[mm_valuedate] [datetime] NULL,
[mm_contra_sortcode] [int] NULL,
[mm_contra_accno] [bigint] NULL,
[mm_contra_sub] [int] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[initial_deposit_date] [datetime] NULL,
[initial_deposit_valuedate] [datetime] NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[fscs_exclusiontype] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[fscs_product_type] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[FK_rowid_mmperiod] [bigint] NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL,
[eod_pnint] [dbo].[accrual] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_term] on [dbo].[term]'
GO
ALTER TABLE [dbo].[term] ADD CONSTRAINT [PK_term] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[term]'
GO
ALTER TABLE [dbo].[term] ADD CONSTRAINT [IX_term_FKacct] UNIQUE NONCLUSTERED  ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_term_total_crint_expected_status] on [dbo].[term]'
GO
CREATE NONCLUSTERED INDEX [IX_term_total_crint_expected_status] ON [dbo].[term] ([total_crint_expected_status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[source]'
GO
CREATE TABLE [dbo].[source]
(
[rowid] [bigint] NOT NULL,
[source] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (70) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_source] on [dbo].[source]'
GO
ALTER TABLE [dbo].[source] ADD CONSTRAINT [PK_source] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[source]'
GO
ALTER TABLE [dbo].[source] ADD CONSTRAINT [IX_source_source] UNIQUE NONCLUSTERED  ([source])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[source_c]'
GO
CREATE TABLE [dbo].[source_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_source] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_source_c] on [dbo].[source_c]'
GO
ALTER TABLE [dbo].[source_c] ADD CONSTRAINT [PK_source_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_source_c] on [dbo].[source_c]'
GO
CREATE NONCLUSTERED INDEX [IX_source_c] ON [dbo].[source_c] ([FK_rowid_source], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stats]'
GO
CREATE TABLE [dbo].[stats]
(
[rowid] [bigint] NOT NULL,
[fromdate] [datetime] NULL,
[todate] [datetime] NULL,
[min_bal] [dbo].[balance] NULL,
[max_bal] [dbo].[balance] NULL,
[avg_bal] [dbo].[balance] NULL,
[cr_days] [int] NULL,
[dr_days] [int] NULL,
[cr_tover] [dbo].[balance] NULL,
[dr_tover] [dbo].[balance] NULL,
[cr_avg_bal] [dbo].[balance] NULL,
[dr_avg_bal] [dbo].[balance] NULL,
[cr_manual] [int] NULL,
[dr_manual] [int] NULL,
[cr_auto] [int] NULL,
[dr_auto] [int] NULL,
[cr_system] [int] NULL,
[dr_system] [int] NULL,
[cr_sysapp] [int] NULL,
[dr_sysapp] [int] NULL,
[cr_employee] [int] NULL,
[dr_employee] [int] NULL,
[cr_clearings] [int] NULL,
[dr_clearings] [int] NULL,
[cr_bacs] [int] NULL,
[dr_bacs] [int] NULL,
[cr_bacsfp] [int] NULL,
[dr_bacsfp] [int] NULL,
[cr_internet] [int] NULL,
[dr_internet] [int] NULL,
[cr_other] [int] NULL,
[dr_other] [int] NULL,
[crint] [dbo].[balance] NULL,
[pnint] [dbo].[balance] NULL,
[drint] [dbo].[balance] NULL,
[tax] [dbo].[balance] NULL,
[charge] [dbo].[balance] NULL,
[stmt_count] [int] NULL,
[supp_count] [int] NULL,
[cheque_count] [int] NULL,
[payin_count] [int] NULL,
[cr_ics] [int] NULL,
[dr_ics] [int] NULL,
[cr_girobank] [int] NULL,

[dr_girobank] [int] NULL,[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stats] on [dbo].[stats]'
GO
ALTER TABLE [dbo].[stats] ADD CONSTRAINT [PK_stats] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stats_FKacct] on [dbo].[stats]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_stats_FKacct] ON [dbo].[stats] ([FK_rowid_acct], [fromdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmthdr]'
GO
CREATE TABLE [dbo].[stmthdr]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[prenotify] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmtevery] [int] NULL,
[stmtfreq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[stmtday] [int] NULL,
[supplist] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[list_only] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[reconciliation] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[recon_file] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[recon_serialno] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[supporder] [varchar] (9) COLLATE Latin1_General_CI_AS NULL,
[adhoc_from] [datetime] NULL,
[adhoc_to] [datetime] NULL,
[prev_from] [datetime] NULL,
[prev_to] [datetime] NULL,
[prev_openbal] [decimal] (19, 2) NULL,
[prev_closebal] [decimal] (19, 2) NULL,
[pn_drint_from] [datetime] NULL,
[pn_drint_to] [datetime] NULL,
[pn_drint_apply] [datetime] NULL,
[pn_drint] [decimal] (18, 2) NULL,
[pn_charge_from] [datetime] NULL,
[pn_charge_to] [datetime] NULL,
[pn_charge_apply] [datetime] NULL,
[pn_charge] [decimal] (18, 2) NULL,
[nextdate] [datetime] NULL,
[nextnum] [int] NULL,
[next_save] [datetime] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[showinternet] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internetdescription] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL,
[fscs_insert_required] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmthdr] on [dbo].[stmthdr]'
GO
ALTER TABLE [dbo].[stmthdr] ADD CONSTRAINT [PK_stmthdr] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmthdr_FKacct] on [dbo].[stmthdr]'
GO
CREATE NONCLUSTERED INDEX [IX_stmthdr_FKacct] ON [dbo].[stmthdr] ([FK_rowid_acct])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmt]'
GO
CREATE TABLE [dbo].[stmt]
(
[rowid] [bigint] NOT NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[notification_type] [varchar] (25) NULL,
[type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[number] [int] NULL,
[fromdate] [datetime] NULL,
[todate] [datetime] NULL,
[duplicate] [varchar] (4) COLLATE Latin1_General_CI_AS NULL,
[openingbal] [decimal] (19, 2) NULL,
[closingbal] [decimal] (19, 2) NULL,
[movement] [decimal] (19, 2) NULL,
[format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[pn_drint_from] [datetime] NULL,
[pn_drint_to] [datetime] NULL,
[pn_drint_apply] [datetime] NULL,
[pn_drint] [decimal] (18, 2) NULL,
[pn_charge_from] [datetime] NULL,
[pn_charge_to] [datetime] NULL,
[pn_charge_apply] [datetime] NULL,
[pn_charge] [decimal] (18, 2) NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_stmthdr] [bigint] NULL,
[fscs_insert_requested] [varchar] (3) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmt] on [dbo].[stmt]'
GO
ALTER TABLE [dbo].[stmt] ADD CONSTRAINT [PK_stmt] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmt_createdate] on [dbo].[stmt]'
GO
CREATE NONCLUSTERED INDEX [IX_stmt_createdate] ON [dbo].[stmt] ([FK_rowid_stmthdr], [createdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtrecipient]'
GO
CREATE TABLE [dbo].[stmtrecipient]
(
[rowid] [bigint] NOT NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[deliverymeth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[emailno] [int] NULL,
[all_owners] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[notification] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_stmthdr] [bigint] NULL,
[FK_rowid_contact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtrecipient] on [dbo].[stmtrecipient]'
GO
ALTER TABLE [dbo].[stmtrecipient] ADD CONSTRAINT [PK_stmtrecipient] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtrecipient_FKcontact] on [dbo].[stmtrecipient]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtrecipient_FKcontact] ON [dbo].[stmtrecipient] ([FK_rowid_contact])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtrecipient_FKstmthdr] on [dbo].[stmtrecipient]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtrecipient_FKstmthdr] ON [dbo].[stmtrecipient] ([FK_rowid_stmthdr])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtcontact]'
GO
CREATE TABLE [dbo].[stmtcontact]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[datesent] [datetime] NULL,
[deliverymeth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[addressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[addr5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[postcode] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[email] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_stmtrecipient] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtcontact] on [dbo].[stmtcontact]'
GO
ALTER TABLE [dbo].[stmtcontact] ADD CONSTRAINT [PK_stmtcontact] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtcontact_FKstmtrecipient] on [dbo].[stmtcontact]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_stmtcontact_FKstmtrecipient] ON [dbo].[stmtcontact] ([FK_rowid_stmtrecipient], [id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmthdr_c]'
GO
CREATE TABLE [dbo].[stmthdr_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_stmthdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmthdr_c] on [dbo].[stmthdr_c]'
GO
ALTER TABLE [dbo].[stmthdr_c] ADD CONSTRAINT [PK_stmthdr_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmthdr_c] on [dbo].[stmthdr_c]'
GO
CREATE NONCLUSTERED INDEX [IX_stmthdr_c] ON [dbo].[stmthdr_c] ([FK_rowid_stmthdr], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtmssg]'
GO
CREATE TABLE [dbo].[stmtmssg]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[littlemess] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[line1] [varchar] (90) COLLATE Latin1_General_CI_AS NULL,
[line2] [varchar] (90) COLLATE Latin1_General_CI_AS NULL,
[line3] [varchar] (90) COLLATE Latin1_General_CI_AS NULL,
[line4] [varchar] (90) COLLATE Latin1_General_CI_AS NULL,
[line5] [varchar] (90) COLLATE Latin1_General_CI_AS NULL,
[line6] [varchar] (90) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtmssg] on [dbo].[stmtmssg]'
GO
ALTER TABLE [dbo].[stmtmssg] ADD CONSTRAINT [PK_stmtmssg] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[stmtmssg]'
GO
ALTER TABLE [dbo].[stmtmssg] ADD CONSTRAINT [IX_stmtmssg_type] UNIQUE NONCLUSTERED  ([type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtmssg_c]'
GO
CREATE TABLE [dbo].[stmtmssg_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_stmtmssg] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtmssg_c] on [dbo].[stmtmssg_c]'
GO
ALTER TABLE [dbo].[stmtmssg_c] ADD CONSTRAINT [PK_stmtmssg_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtmssg_c] on [dbo].[stmtmssg_c]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtmssg_c] ON [dbo].[stmtmssg_c] ([FK_rowid_stmtmssg], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtrecipient_c]'
GO
CREATE TABLE [dbo].[stmtrecipient_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_stmtrecipient] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtrecipient_c] on [dbo].[stmtrecipient_c]'
GO
ALTER TABLE [dbo].[stmtrecipient_c] ADD CONSTRAINT [PK_stmtrecipient_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtrecipient_c] on [dbo].[stmtrecipient_c]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtrecipient_c] ON [dbo].[stmtrecipient_c] ([FK_rowid_stmtrecipient], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtsent]'
GO
CREATE TABLE [dbo].[stmtsent]
(
[rowid] [bigint] NOT NULL,
[datesent] [datetime] NULL,
[FK_rowid_stmt] [bigint] NULL,
[FK_rowid_stmtcontact] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtsent] on [dbo].[stmtsent]'
GO
ALTER TABLE [dbo].[stmtsent] ADD CONSTRAINT [PK_stmtsent] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtsent_datesent] on [dbo].[stmtsent]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtsent_datesent] ON [dbo].[stmtsent] ([datesent])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmtsent_FKstmt] on [dbo].[stmtsent]'
GO
CREATE NONCLUSTERED INDEX [IX_stmtsent_FKstmt] ON [dbo].[stmtsent] ([FK_rowid_stmt])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmttxns]'
GO
CREATE TABLE [dbo].[stmttxns]
(
[rowid] [bigint] NOT NULL,
[txndate] [datetime] NULL,
[txnorder] [int] NULL,
[sequence] [bigint] NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[txndesc] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[txndesc2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[amount] [decimal] (21, 2) NULL,
[serialno] [bigint] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_stmt] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmttxns] on [dbo].[stmttxns]'
GO
ALTER TABLE [dbo].[stmttxns] ADD CONSTRAINT [PK_stmttxns] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_stmttxns] on [dbo].[stmttxns]'
GO
CREATE NONCLUSTERED INDEX [IX_stmttxns] ON [dbo].[stmttxns] ([FK_rowid_stmt], [txndate], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[suppitem]'
GO
CREATE TABLE [dbo].[suppitem]
(
[rowid] [bigint] NOT NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[condition] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[suppcode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[reconcode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_stmthdr] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_suppitem] on [dbo].[suppitem]'
GO
ALTER TABLE [dbo].[suppitem] ADD CONSTRAINT [PK_suppitem] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[suppitem]'
GO
ALTER TABLE [dbo].[suppitem] ADD CONSTRAINT [IX_suppitem_txncode] UNIQUE NONCLUSTERED  ([FK_rowid_stmthdr], [txncode], [condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[suppitem_c]'
GO
CREATE TABLE [dbo].[suppitem_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_suppitem] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_suppitem_c] on [dbo].[suppitem_c]'
GO
ALTER TABLE [dbo].[suppitem_c] ADD CONSTRAINT [PK_suppitem_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_suppitem_c] on [dbo].[suppitem_c]'
GO
CREATE NONCLUSTERED INDEX [IX_suppitem_c] ON [dbo].[suppitem_c] ([FK_rowid_suppitem], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[taxfreelimitdetails]'
GO
CREATE TABLE [dbo].[taxfreelimitdetails]
(
[rowid] [bigint] NOT NULL,
[start_date] [datetime] NULL,
[limit] [dbo].[balance] NULL,
[next_date] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_taxfreelimitheader] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_taxfreelimitdetails] on [dbo].[taxfreelimitdetails]'
GO
ALTER TABLE [dbo].[taxfreelimitdetails] ADD CONSTRAINT [PK_taxfreelimitdetails] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_taxfreedetails_FK_rowid_taxfreelimitheader] on [dbo].[taxfreelimitdetails]'
GO
CREATE NONCLUSTERED INDEX [IX_taxfreedetails_FK_rowid_taxfreelimitheader] ON [dbo].[taxfreelimitdetails] ([FK_rowid_taxfreelimitheader], [start_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[taxfreelimitdetails_c]'
GO
CREATE TABLE [dbo].[taxfreelimitdetails_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_taxfreelimitdetails] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_taxfreedetails_c] on [dbo].[taxfreelimitdetails_c]'
GO
ALTER TABLE [dbo].[taxfreelimitdetails_c] ADD CONSTRAINT [PK_taxfreedetails_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_taxfreedetails_c] on [dbo].[taxfreelimitdetails_c]'
GO
CREATE NONCLUSTERED INDEX [IX_taxfreedetails_c] ON [dbo].[taxfreelimitdetails_c] ([FK_rowid_taxfreelimitdetails], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[taxfreelimitheader]'
GO
CREATE TABLE [dbo].[taxfreelimitheader]
(
[rowid] [bigint] NOT NULL,
[id] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[reg_shortcode] [varchar] (1) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_taxfreelimitheader] on [dbo].[taxfreelimitheader]'
GO
ALTER TABLE [dbo].[taxfreelimitheader] ADD CONSTRAINT [PK_taxfreelimitheader] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_taxfreelimitheader_id] on [dbo].[taxfreelimitheader]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_taxfreelimitheader_id] ON [dbo].[taxfreelimitheader] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[taxfreelimitheader_c]'
GO
CREATE TABLE [dbo].[taxfreelimitheader_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_taxfreelimitheader] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_taxfreelimitheader_c] on [dbo].[taxfreelimitheader_c]'
GO
ALTER TABLE [dbo].[taxfreelimitheader_c] ADD CONSTRAINT [PK_taxfreelimitheader_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_taxfreelimitheader_c] on [dbo].[taxfreelimitheader_c]'
GO
CREATE NONCLUSTERED INDEX [IX_taxfreelimitheader_c] ON [dbo].[taxfreelimitheader_c] ([FK_rowid_taxfreelimitheader], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[term_c]'
GO
CREATE TABLE [dbo].[term_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[bookstamp] [datetime] NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[sequence] [bigint] NOT NULL IDENTITY(1, 1),
[emplstamp] [int] NULL,
[FK_rowid_term] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_term_c] on [dbo].[term_c]'
GO
ALTER TABLE [dbo].[term_c] ADD CONSTRAINT [PK_term_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_term_c] on [dbo].[term_c]'
GO
CREATE NONCLUSTERED INDEX [IX_term_c] ON [dbo].[term_c] ([FK_rowid_term], [bookstamp], [timestamp], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[term_s]'
GO
CREATE TABLE [dbo].[term_s]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[bookstamp] [datetime] NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[opened] [datetime] NULL,
[amount] [dbo].[balance] NULL,
[signers] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[term] [int] NULL,
[termfreq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[startdate] [datetime] NULL,
[startbookdate] [datetime] NULL,
[crint_IRreportable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_gross] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_split_pcent] [decimal] (10, 7) NULL,
[crint_gross_IRreportable_yes_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_gross_IRreportable_no_reason] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[crint_type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_next] [datetime] NULL,
[crint_pay_by] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[crint_pay_pcent] [decimal] (5, 2) NULL,
[crint_pay_sortcode] [int] NULL,
[crint_pay_accno] [bigint] NULL,
[crint_pay_accsub] [int] NULL,
[crint_accr] [dbo].[accrual] NULL,
[pnint_accr] [dbo].[accrual] NULL,
[crint_paid_td] [dbo].[balance] NULL,
[tax_paid_td] [dbo].[balance] NULL,
[maturitydate] [datetime] NULL,
[maturitydate_increment_days] [int] NULL,
[closed] [datetime] NULL,
[mat_pay_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[mat_pay_sortcode] [int] NULL,
[mat_pay_accno] [bigint] NULL,
[mat_pay_accsub] [int] NULL,
[mat_rollover_product] [bigint] NULL,
[eod_accrual] [dbo].[accrual] NULL,
[eod_valuebal] [dbo].[balance] NULL,
[eod_bookbal] [dbo].[balance] NULL,
[eod_intrate] [decimal] (8, 6) NULL,
[regulatory_dormant] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[regulatory_last_activity] [datetime] NULL,
[last_activity] [datetime] NULL,
[last_statement] [datetime] NULL,
[product] [bigint] NULL,
[bookbal] [dbo].[balance] NULL,
[clearbal] [dbo].[balance] NULL,
[valuebal] [dbo].[balance] NULL,
[saveflags] [int] NULL,
[txns_status] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[last_savepoint] [datetime] NULL,
[close_reason] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[deposit] [dbo].[balance] NULL,
[deposit_previous] [dbo].[balance] NULL,
[mm_autorollover] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mm_autorolloverday] [int] NULL,
[mm_autorollovertype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[mm_onmaturity] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[mm_valuedate] [datetime] NULL,
[mm_contra_sortcode] [int] NULL,
[mm_contra_accno] [bigint] NULL,
[mm_contra_sub] [int] NULL,
[combined_signatories_at] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[initial_deposit_date] [datetime] NULL,
[initial_deposit_valuedate] [datetime] NULL,
[fscseligible] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[prevent_entity_deletion] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[FK_rowid_term] [bigint] NULL,
[changeofsigs_request] [datetime] NULL,
[changeofsigs_complete] [datetime] NULL,
[eod_pnint] [dbo].[accrual] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_term_s] on [dbo].[term_s]'
GO
ALTER TABLE [dbo].[term_s] ADD CONSTRAINT [PK_term_s] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_bookstamp] on [dbo].[term_s]'
GO
CREATE NONCLUSTERED INDEX [IX_bookstamp] ON [dbo].[term_s] ([FK_rowid_term], [bookstamp], [saveflags])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[term_v]'
GO
CREATE TABLE [dbo].[term_v]
(
[rowid] [bigint] NOT NULL,
[datestamp] [datetime] NOT NULL,
[timestamp] [datetime] NOT NULL,
[bookstamp] [datetime] NOT NULL,
[emplstamp] [int] NOT NULL,
[viewflags] [bigint] NOT NULL,
[FK_rowid_term] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_term_v] on [dbo].[term_v]'
GO
ALTER TABLE [dbo].[term_v] ADD CONSTRAINT [PK_term_v] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_term_v] on [dbo].[term_v]'
GO
CREATE NONCLUSTERED INDEX [IX_term_v] ON [dbo].[term_v] ([FK_rowid_term], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[termdef]'
GO
CREATE TABLE [dbo].[termdef]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[id] [dbo].[product_id] NULL,
[startdate] [datetime] NULL,
[nextdate] [datetime] NULL,
[enddate] [datetime] NULL,
[yearend] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[backdate_unauthorised] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[min_term] [int] NULL,
[min_termfreq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[max_term] [int] NULL,
[max_termfreq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[min_dep] [dbo].[balance] NULL,
[max_dep] [dbo].[balance] NULL,
[min_initial_deposit] [dbo].[balance] NULL,
[withdrawal] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[deposits] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[sub_accounts] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_acct_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_prod_base] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_flat_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_split_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_stamped_step_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_every] [int] NULL,
[crint_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[crint_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_day] [int] NULL,
[crint_month] [int] NULL,
[crint_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_min_post] [dbo].[balance] NULL,
[crint_compound] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_inttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_exttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[crint_maturity] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[notice_type] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[notice_period] [int] NULL,
[notice_action] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[notice_limit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[payout_penalty_balance_only] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_rollover] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_inttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_exttransfer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_cheque] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_date] [datetime] NULL,
[mat_notification_days] [int] NULL,
[mat_restrict_days] [int] NULL,
[mat_adjust_date_on_deposit] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[mat_maturityday] [int] NULL,
[mat_rollover_into_allowed] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[issue_no] [int] NULL,
[issue_name] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[divisor] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[stmt_yn] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_every] [int] NULL,
[stmt_freq] [varchar] (6) COLLATE Latin1_General_CI_AS NULL,
[stmt_on_account_opening] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_day] [int] NULL,
[stmt_month] [int] NULL,
[stmt_cycle_fix] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[stmt_deliverymeth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[stmt_format] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[months_to_regulatory_dormant] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_prod] [bigint] NULL,
[aer] [decimal] (18, 6) NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_termdef] on [dbo].[termdef]'
GO
ALTER TABLE [dbo].[termdef] ADD CONSTRAINT [PK_termdef] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_termdef_startdate] on [dbo].[termdef]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_termdef_startdate] ON [dbo].[termdef] ([FK_rowid_prod], [startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[termdef_c]'
GO
CREATE TABLE [dbo].[termdef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_termdef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_termdef_c] on [dbo].[termdef_c]'
GO
ALTER TABLE [dbo].[termdef_c] ADD CONSTRAINT [PK_termdef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_termdef_c] on [dbo].[termdef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_termdef_c] ON [dbo].[termdef_c] ([FK_rowid_termdef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[territory]'
GO
CREATE TABLE [dbo].[territory]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[IRreportable] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[address_match] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[match_text] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_ctry] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_territory] on [dbo].[territory]'
GO
ALTER TABLE [dbo].[territory] ADD CONSTRAINT [PK_territory] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_territory] on [dbo].[territory]'
GO
CREATE NONCLUSTERED INDEX [IX_territory] ON [dbo].[territory] ([FK_rowid_ctry], [name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[territory_c]'
GO
CREATE TABLE [dbo].[territory_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_territory] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_territory_c] on [dbo].[territory_c]'
GO
ALTER TABLE [dbo].[territory_c] ADD CONSTRAINT [PK_territory_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_territory_c] on [dbo].[territory_c]'
GO
CREATE NONCLUSTERED INDEX [IX_territory_c] ON [dbo].[territory_c] ([FK_rowid_territory], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[tfrbank]'
GO
CREATE TABLE [dbo].[tfrbank]
(
[rowid] [bigint] NOT NULL,
[accno] [bigint] NULL,
[sortcode] [int] NULL,
[subbranch] [int] NULL,
[status] [varchar] (12) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_call] [bigint] NULL,
[letter_returned] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_tfrbank] on [dbo].[tfrbank]'
GO
ALTER TABLE [dbo].[tfrbank] ADD CONSTRAINT [PK_tfrbank] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_tfrbank_FKcall] on [dbo].[tfrbank]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_tfrbank_FKcall] ON [dbo].[tfrbank] ([FK_rowid_call], [accno], [sortcode], [subbranch])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[tfrbank_c]'
GO
CREATE TABLE [dbo].[tfrbank_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_tfrbank] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_tfrbank_c] on [dbo].[tfrbank_c]'
GO
ALTER TABLE [dbo].[tfrbank_c] ADD CONSTRAINT [PK_tfrbank_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_tfrbank_c] on [dbo].[tfrbank_c]'
GO
CREATE NONCLUSTERED INDEX [IX_tfrbank_c] ON [dbo].[tfrbank_c] ([FK_rowid_tfrbank], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txndef_c]'
GO
CREATE TABLE [dbo].[txndef_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_txndef] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txndef_c] on [dbo].[txndef_c]'
GO
ALTER TABLE [dbo].[txndef_c] ADD CONSTRAINT [PK_txndef_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txndef_c] on [dbo].[txndef_c]'
GO
CREATE NONCLUSTERED INDEX [IX_txndef_c] ON [dbo].[txndef_c] ([FK_rowid_txndef], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txns_post]'
GO
CREATE TABLE [dbo].[txns_post]
(
[rowid] [bigint] NOT NULL,
[category] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txns_post] on [dbo].[txns_post]'
GO
ALTER TABLE [dbo].[txns_post] ADD CONSTRAINT [PK_txns_post] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txns_post_category] on [dbo].[txns_post]'
GO
CREATE NONCLUSTERED INDEX [IX_txns_post_category] ON [dbo].[txns_post] ([FK_rowid_acct], [category], [source])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txns_post_txncode] on [dbo].[txns_post]'
GO
CREATE NONCLUSTERED INDEX [IX_txns_post_txncode] ON [dbo].[txns_post] ([FK_rowid_acct], [txncode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txns_post_c]'
GO
CREATE TABLE [dbo].[txns_post_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_txns_post] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txns_post_c] on [dbo].[txns_post_c]'
GO
ALTER TABLE [dbo].[txns_post_c] ADD CONSTRAINT [PK_txns_post_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txns_post_c] on [dbo].[txns_post_c]'
GO
CREATE NONCLUSTERED INDEX [IX_txns_post_c] ON [dbo].[txns_post_c] ([FK_rowid_txns_post], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txnsextra_c]'
GO
CREATE TABLE [dbo].[txnsextra_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_txnsextra] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txnsextra_c] on [dbo].[txnsextra_c]'
GO
ALTER TABLE [dbo].[txnsextra_c] ADD CONSTRAINT [PK_txnsextra_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnsextra_c] on [dbo].[txnsextra_c]'
GO
CREATE NONCLUSTERED INDEX [IX_txnsextra_c] ON [dbo].[txnsextra_c] ([FK_rowid_txnsextra], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txnsibnkuser]'
GO
CREATE TABLE [dbo].[txnsibnkuser]
(
[rowid] [bigint] NOT NULL,
[FK_rowid_ibnkuser] [bigint] NOT NULL,
[FK_rowid_txns] [bigint] NOT NULL,
[FK_rowid_ibnktxns] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txnsibnkuser] on [dbo].[txnsibnkuser]'
GO
ALTER TABLE [dbo].[txnsibnkuser] ADD CONSTRAINT [PK_txnsibnkuser] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnsibnkuser_FKtxns] on [dbo].[txnsibnkuser]'
GO
CREATE NONCLUSTERED INDEX [IX_txnsibnkuser_FKtxns] ON [dbo].[txnsibnkuser] ([FK_rowid_ibnkuser], [FK_rowid_txns])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txnstop]'
GO
CREATE TABLE [dbo].[txnstop]
(
[rowid] [bigint] NOT NULL,
[identifier] [int] NULL,
[startdate] [datetime] NULL,
[reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[txncode] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[trandate] [datetime] NULL,
[trandateto] [datetime] NULL,
[amount] [decimal] (18, 2) NULL,
[amountto] [decimal] (18, 2) NULL,
[serialno] [bigint] NULL,
[serialnoto] [bigint] NULL,
[reference] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[partref] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[txnsource] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[expirydate] [datetime] NULL,
[status] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[comments1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments3] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[comments4] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[applyfee] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[applyfeeid] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[document] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[source] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ibnk_submitted] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ibnk_submit_date] [datetime] NULL,
[ibnk_submit_time] [datetime] NULL,
[ibnk_authorised] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[ibnk_authorise_date] [datetime] NULL,
[ibnk_authorise_time] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txnstop] on [dbo].[txnstop]'
GO
ALTER TABLE [dbo].[txnstop] ADD CONSTRAINT [PK_txnstop] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_identifier] on [dbo].[txnstop]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_txnstop_identifier] ON [dbo].[txnstop] ([FK_rowid_acct], [identifier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_amount] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_amount] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [amount], [amountto])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [reference])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_serialno] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_serialno] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [serialno], [serialnoto])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_source] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_source] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [source])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_startdate] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_startdate] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [startdate], [expirydate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_trandate] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_trandate] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [trandate], [trandateto])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_txncode] on [dbo].[txnstop]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_txncode] ON [dbo].[txnstop] ([FK_rowid_acct], [status], [txncode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[txnstop_c]'
GO
CREATE TABLE [dbo].[txnstop_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_txnstop] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_txnstop_c] on [dbo].[txnstop_c]'
GO
ALTER TABLE [dbo].[txnstop_c] ADD CONSTRAINT [PK_txnstop_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_txnstop_c] on [dbo].[txnstop_c]'
GO
CREATE NONCLUSTERED INDEX [IX_txnstop_c] ON [dbo].[txnstop_c] ([FK_rowid_txnstop], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[user_dv]'
GO
CREATE TABLE [dbo].[user_dv]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_user_dv] on [dbo].[user_dv]'
GO
ALTER TABLE [dbo].[user_dv] ADD CONSTRAINT [PK_user_dv] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[user_dv]'
GO
ALTER TABLE [dbo].[user_dv] ADD CONSTRAINT [IX_user_dv_no] UNIQUE NONCLUSTERED  ([no])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[user_dv_c]'
GO
CREATE TABLE [dbo].[user_dv_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_user_dv] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_user_dv_c] on [dbo].[user_dv_c]'
GO
ALTER TABLE [dbo].[user_dv_c] ADD CONSTRAINT [PK_user_dv_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_user_dv_c] on [dbo].[user_dv_c]'
GO
CREATE NONCLUSTERED INDEX [IX_user_dv_c] ON [dbo].[user_dv_c] ([FK_rowid_user_dv], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[user_dvvalue]'
GO
CREATE TABLE [dbo].[user_dvvalue]
(
[rowid] [bigint] NOT NULL,
[no] [int] NULL,
[value] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[helpdesc] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[external_value] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[external_value2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[external_value3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[internet_enabled] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_user_dv] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[user_dvvalue]'
GO
ALTER TABLE [dbo].[user_dvvalue] ADD CONSTRAINT [IX_user_dvvalue_status] UNIQUE CLUSTERED  ([FK_rowid_user_dv], [status], [no])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_user_dvvalue] on [dbo].[user_dvvalue]'
GO
ALTER TABLE [dbo].[user_dvvalue] ADD CONSTRAINT [PK_user_dvvalue] PRIMARY KEY NONCLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_user_dvvalue_external_value] on [dbo].[user_dvvalue]'
GO
CREATE NONCLUSTERED INDEX [IX_user_dvvalue_external_value] ON [dbo].[user_dvvalue] ([FK_rowid_user_dv], [external_value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[user_dvvalue_c]'
GO
CREATE TABLE [dbo].[user_dvvalue_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_user_dvvalue] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_user_dvvalue_c] on [dbo].[user_dvvalue_c]'
GO
ALTER TABLE [dbo].[user_dvvalue_c] ADD CONSTRAINT [PK_user_dvvalue_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_user_dvvalue_c] on [dbo].[user_dvvalue_c]'
GO
CREATE NONCLUSTERED INDEX [IX_user_dvvalue_c] ON [dbo].[user_dvvalue_c] ([FK_rowid_user_dvvalue], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[additionalfields_table]'
GO
CREATE TABLE [dbo].[additionalfields_table]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_additionalfields_table] on [dbo].[additionalfields_table]'
GO
ALTER TABLE [dbo].[additionalfields_table] ADD CONSTRAINT [PK_additionalfields_table] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_additionalfields_table_name] on [dbo].[additionalfields_table]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_additionalfields_table_name] ON [dbo].[additionalfields_table] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[additionalfields_value]'
GO
CREATE TABLE [dbo].[additionalfields_value]
(
[rowid] [bigint] NOT NULL,
[linkrow] [bigint] NULL,
[valueint] [int] NULL,
[valuebigint] [bigint] NULL,
[valuedecimal] [decimal] (23, 5) NULL,
[valuestring] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[valuedate] [datetime] NULL,
[valuetime] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_additionalfields_field] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_additionalfields_value] on [dbo].[additionalfields_value]'
GO
ALTER TABLE [dbo].[additionalfields_value] ADD CONSTRAINT [PK_additionalfields_value] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_additionalfields_value_linkrow] on [dbo].[additionalfields_value]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_additionalfields_value_linkrow] ON [dbo].[additionalfields_value] ([FK_rowid_additionalfields_field], [linkrow])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[vehicle]'
GO
CREATE TABLE [dbo].[vehicle]
(
[rowid] [bigint] NOT NULL,
[make] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[model] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[serial] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[registration] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[year_of_manufacture] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_securities] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_vehicle] on [dbo].[vehicle]'
GO
ALTER TABLE [dbo].[vehicle] ADD CONSTRAINT [PK_vehicle] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_vehicle_securities] on [dbo].[vehicle]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_vehicle_securities] ON [dbo].[vehicle] ([FK_rowid_securities])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_vehicle_registration] on [dbo].[vehicle]'
GO
CREATE NONCLUSTERED INDEX [IX_vehicle_registration] ON [dbo].[vehicle] ([registration])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[vehicle_c]'
GO
CREATE TABLE [dbo].[vehicle_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_vehicle] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_vehicle_c] on [dbo].[vehicle_c]'
GO
ALTER TABLE [dbo].[vehicle_c] ADD CONSTRAINT [PK_vehicle_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_vehicle_c] on [dbo].[vehicle_c]'
GO
CREATE NONCLUSTERED INDEX [IX_vehicle_c] ON [dbo].[vehicle_c] ([FK_rowid_vehicle], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[webservice_update]'
GO
CREATE TABLE [dbo].[webservice_update]
(
[rowid] [bigint] NOT NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_webservice_update] on [dbo].[webservice_update]'
GO
ALTER TABLE [dbo].[webservice_update] ADD CONSTRAINT [PK_webservice_update] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[webservice_item]'
GO
CREATE TABLE [dbo].[webservice_item]
(
[rowid] [bigint] NOT NULL,
[item_number] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_webservice_update] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_webservice_item] on [dbo].[webservice_item]'
GO
ALTER TABLE [dbo].[webservice_item] ADD CONSTRAINT [PK_webservice_item] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_FK_rowid_webservice_update] on [dbo].[webservice_item]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_FK_rowid_webservice_update] ON [dbo].[webservice_item] ([FK_rowid_webservice_update], [item_number])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_action]'
GO
CREATE TABLE [dbo].[work_action]
(
[rowid] [bigint] NOT NULL,
[after_status_change] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[priority] [int] NULL,
[coded_action_id] [int] NULL,
[data_action_id] [int] NULL,
[work_template_id] [int] NULL,
[dataselector_id] [int] NULL,
[postpone_days] [int] NULL,
[keep_employee] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_action] on [dbo].[work_action]'
GO
ALTER TABLE [dbo].[work_action] ADD CONSTRAINT [PK_work_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_coded_action_id] on [dbo].[work_action]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_coded_action_id] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [coded_action_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_data_action_id] on [dbo].[work_action]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_data_action_id] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [data_action_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_dataselector_id] on [dbo].[work_action]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_dataselector_id] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [dataselector_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_priority] on [dbo].[work_action]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_priority] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_unique] on [dbo].[work_action]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_action_unique] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_id] on [dbo].[work_action]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_id] ON [dbo].[work_action] ([FK_rowid_work_template], [after_status_change], [work_template_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_action_c]'
GO
CREATE TABLE [dbo].[work_action_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_action_c] on [dbo].[work_action_c]'
GO
ALTER TABLE [dbo].[work_action_c] ADD CONSTRAINT [PK_work_action_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_action_c] on [dbo].[work_action_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_action_c] ON [dbo].[work_action_c] ([FK_rowid_work_action], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_template]'
GO
CREATE TABLE [dbo].[work_template]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[proxy_for_id] [int] NULL,
[prepopulated_attributes_id] [int] NULL,
[prepopulated_attributes_table] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[initialise_event] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[initialise_event_description_formula_id] [int] NULL,
[category] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[priority] [int] NULL,
[future_days] [int] NULL,
[reschedule_days] [int] NULL,
[reschedule_maxtimes] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[document_id] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[email_subject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[email_from_address] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[emailserver] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[dm_level0] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dm_section] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dm_subsection] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[printer_category] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[duplex] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[emaildocument] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[document_format] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[document_instructions] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[assignfailure_change] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[assignfailure_waitdays] [int] NULL,
[escalation_after_between] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[escalation_minutes] [int] NULL,
[escalation_time] [datetime] NULL,
[escalation_time_until] [datetime] NULL,
[prevent_refer] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[prevent_complete] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[enforce_refer_reason] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[enforce_complete_reason] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[refer_button_prompt] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[complete_button_prompt] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[print_button_prompt] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[refer_button_comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[complete_button_comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[print_button_comment] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[autocomplete] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[restrict_to_branch] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[email] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[peer_review] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[default_addressee] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[work_category] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[linktable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[output_signatures] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_link_to_acct] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_link_to_people] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_link_to_nonpers] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_acct_creation] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_people_creation] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_nonpers_creation] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[cycle_every] [int] NULL,
[cycle_freq] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[cycle_day] [int] NULL,
[allow_cycle] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_cycle_modify] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[allow_cycle_cancel] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[has_assign_conditions] [int] NULL,
[messagesalutation] [int] NULL,
[messagesignoff] [int] NULL,
[internet_available] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_display_name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[internet_notification_email] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[internet_notification_email_template] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[internet_notification_email_subject] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[internet_notification_email_server] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[internet_notification_email_from_address] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[composer_template_path] [varchar] (1024) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_template] on [dbo].[work_template]'
GO
ALTER TABLE [dbo].[work_template] ADD CONSTRAINT [PK_work_template] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_template_id] on [dbo].[work_template]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_template_id] ON [dbo].[work_template] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_template_initialise_event] on [dbo].[work_template]'
GO
CREATE NONCLUSTERED INDEX [IX_work_template_initialise_event] ON [dbo].[work_template] ([initialise_event])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_template]'
GO
ALTER TABLE [dbo].[work_template] ADD CONSTRAINT [IX_work_template_category_id] UNIQUE NONCLUSTERED  ([rowid], [category], [id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_template_rowid_category] on [dbo].[work_template]'
GO
CREATE NONCLUSTERED INDEX [IX_work_template_rowid_category] ON [dbo].[work_template] ([rowid], [category], [id]) INCLUDE ([amenddate], [amendempl], [amendtime], [assignfailure_change], [assignfailure_waitdays], [autocomplete], [createdate], [createempl], [createtime], [default_addressee], [description], [document_id], [document_instructions], [documentprofile1], [documentprofile2], [documentprofile3], [documentprofile4], [documentprofile5], [documentprofile6], [duplex], [email], [emaildocument], [enforce_complete_reason], [enforce_refer_reason], [escalation_after_between], [escalation_minutes], [escalation_time], [escalation_time_until], [linkprofile1], [linkprofile2], [linkprofile3], [linkprofile4], [linkprofile5], [linkprofile6], [linktable1], [linktable2], [linktable3], [linktable4], [linktable5], [linktable6], [peer_review], [prevent_complete], [prevent_refer], [printer_category], [priority], [reschedule_days], [restrict_to_branch], [type], [work_category])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_actioncondition]'
GO
CREATE TABLE [dbo].[work_actioncondition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_action] [bigint] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_actioncondition] on [dbo].[work_actioncondition]'
GO
ALTER TABLE [dbo].[work_actioncondition] ADD CONSTRAINT [PK_work_actioncondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_actioncondition_FK_rowid_condition] on [dbo].[work_actioncondition]'
GO
CREATE NONCLUSTERED INDEX [IX_work_actioncondition_FK_rowid_condition] ON [dbo].[work_actioncondition] ([FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_actioncondition_FK_rowid_work_action] on [dbo].[work_actioncondition]'
GO
CREATE NONCLUSTERED INDEX [IX_work_actioncondition_FK_rowid_work_action] ON [dbo].[work_actioncondition] ([FK_rowid_work_action])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_actioncondition]'
GO
ALTER TABLE [dbo].[work_actioncondition] ADD CONSTRAINT [IX_work_actioncondition] UNIQUE NONCLUSTERED  ([FK_rowid_work_action], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_attributeenumerated]'
GO
CREATE TABLE [dbo].[work_attributeenumerated]
(
[rowid] [bigint] NOT NULL,
[priority] [int] NULL,
[value] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_attribute] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_attributeenumerated] on [dbo].[work_attributeenumerated]'
GO
ALTER TABLE [dbo].[work_attributeenumerated] ADD CONSTRAINT [PK_work_attributeenumerated] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_attributeenumerated_work_attribute] on [dbo].[work_attributeenumerated]'
GO
CREATE NONCLUSTERED INDEX [IX_work_attributeenumerated_work_attribute] ON [dbo].[work_attributeenumerated] ([FK_rowid_work_attribute])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_attributeenumerated_priority] on [dbo].[work_attributeenumerated]'
GO
CREATE NONCLUSTERED INDEX [IX_work_attributeenumerated_priority] ON [dbo].[work_attributeenumerated] ([FK_rowid_work_attribute], [priority], [value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_attributeenumerated_c]'
GO
CREATE TABLE [dbo].[work_attributeenumerated_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_attributeenumerated] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_attributeenumerated_c] on [dbo].[work_attributeenumerated_c]'
GO
ALTER TABLE [dbo].[work_attributeenumerated_c] ADD CONSTRAINT [PK_work_attributeenumerated_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_attributeenumerated_c] on [dbo].[work_attributeenumerated_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_attributeenumerated_c] ON [dbo].[work_attributeenumerated_c] ([FK_rowid_work_attributeenumerated], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_category]'
GO
CREATE TABLE [dbo].[work_category]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[name] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_category] on [dbo].[work_category]'
GO
ALTER TABLE [dbo].[work_category] ADD CONSTRAINT [PK_work_category] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_category]'
GO
ALTER TABLE [dbo].[work_category] ADD CONSTRAINT [IX_work_category_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_category]'
GO
ALTER TABLE [dbo].[work_category] ADD CONSTRAINT [IX_work_category_name] UNIQUE NONCLUSTERED  ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_category_c]'
GO
CREATE TABLE [dbo].[work_category_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_category] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_category_c] on [dbo].[work_category_c]'
GO
ALTER TABLE [dbo].[work_category_c] ADD CONSTRAINT [PK_work_category_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_category_c] on [dbo].[work_category_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_category_c] ON [dbo].[work_category_c] ([FK_rowid_work_category], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_comment]'
GO
CREATE TABLE [dbo].[work_comment]
(
[rowid] [bigint] NOT NULL,
[id] [bigint] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[origin] [bigint] NULL,
[line1] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[empl] [int] NULL,
[comment_date] [datetime] NULL,
[comment_time] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_item] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_comment] on [dbo].[work_comment]'
GO
ALTER TABLE [dbo].[work_comment] ADD CONSTRAINT [PK_work_comment] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_comment_id] on [dbo].[work_comment]'
GO
CREATE NONCLUSTERED INDEX [IX_work_comment_id] ON [dbo].[work_comment] ([FK_rowid_work_item], [id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_comment_origin] on [dbo].[work_comment]'
GO
CREATE NONCLUSTERED INDEX [IX_work_comment_origin] ON [dbo].[work_comment] ([origin], [comment_date], [comment_time])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_comment_c]'
GO
CREATE TABLE [dbo].[work_comment_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_comment] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_comment_c] on [dbo].[work_comment_c]'
GO
ALTER TABLE [dbo].[work_comment_c] ADD CONSTRAINT [PK_work_comment_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_comment_c] on [dbo].[work_comment_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_comment_c] ON [dbo].[work_comment_c] ([FK_rowid_work_comment], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_condition]'
GO
CREATE TABLE [dbo].[work_condition]
(
[rowid] [bigint] NOT NULL,
[allow_status_change] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[condition_id] [int] NULL,
[truth] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_condition] on [dbo].[work_condition]'
GO
ALTER TABLE [dbo].[work_condition] ADD CONSTRAINT [PK_work_condition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_condition_id] on [dbo].[work_condition]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_condition_id] ON [dbo].[work_condition] ([FK_rowid_work_template], [allow_status_change], [condition_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_condition_c]'
GO
CREATE TABLE [dbo].[work_condition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_condition_c] on [dbo].[work_condition_c]'
GO
ALTER TABLE [dbo].[work_condition_c] ADD CONSTRAINT [PK_work_condition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_condition_c] on [dbo].[work_condition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_condition_c] ON [dbo].[work_condition_c] ([FK_rowid_work_condition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_decision]'
GO
CREATE TABLE [dbo].[work_decision]
(
[rowid] [bigint] NOT NULL,
[work_status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_decision] on [dbo].[work_decision]'
GO
ALTER TABLE [dbo].[work_decision] ADD CONSTRAINT [PK_work_decision] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_decision_work_template] on [dbo].[work_decision]'
GO
CREATE NONCLUSTERED INDEX [IX_work_decision_work_template] ON [dbo].[work_decision] ([FK_rowid_work_template])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_decision_unique] on [dbo].[work_decision]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_decision_unique] ON [dbo].[work_decision] ([FK_rowid_work_template], [work_status])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_decision_c]'
GO
CREATE TABLE [dbo].[work_decision_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_decision] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_decision_c] on [dbo].[work_decision_c]'
GO
ALTER TABLE [dbo].[work_decision_c] ADD CONSTRAINT [PK_work_decision_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_decision_c] on [dbo].[work_decision_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_decision_c] ON [dbo].[work_decision_c] ([FK_rowid_work_decision], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_decisioncondition]'
GO
CREATE TABLE [dbo].[work_decisioncondition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_decision] [bigint] NOT NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_decisioncondition] on [dbo].[work_decisioncondition]'
GO
ALTER TABLE [dbo].[work_decisioncondition] ADD CONSTRAINT [PK_work_decisioncondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_decisioncondition_work_decision] on [dbo].[work_decisioncondition]'
GO
CREATE NONCLUSTERED INDEX [IX_work_decisioncondition_work_decision] ON [dbo].[work_decisioncondition] ([FK_rowid_work_decision])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_decisioncondition]'
GO
ALTER TABLE [dbo].[work_decisioncondition] ADD CONSTRAINT [IX_work_decisioncondition] UNIQUE NONCLUSTERED  ([FK_rowid_work_decision], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_filtercategory]'
GO
CREATE TABLE [dbo].[work_filtercategory]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[tablename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[fieldname] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_filtercategory] on [dbo].[work_filtercategory]'
GO
ALTER TABLE [dbo].[work_filtercategory] ADD CONSTRAINT [PK_work_filtercategory] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_filtercategory]'
GO
ALTER TABLE [dbo].[work_filtercategory] ADD CONSTRAINT [IX_work_filtercategory_description] UNIQUE NONCLUSTERED  ([description])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_filtercategory]'
GO
ALTER TABLE [dbo].[work_filtercategory] ADD CONSTRAINT [IX_work_filtercategory_id] UNIQUE NONCLUSTERED  ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_filtercategory_c]'
GO
CREATE TABLE [dbo].[work_filtercategory_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_filtercategory] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_filtercategory_c] on [dbo].[work_filtercategory_c]'
GO
ALTER TABLE [dbo].[work_filtercategory_c] ADD CONSTRAINT [PK_work_filtercategory_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_filtercategory_c] on [dbo].[work_filtercategory_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_filtercategory_c] ON [dbo].[work_filtercategory_c] ([FK_rowid_work_filtercategory], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_item_c]'
GO
CREATE TABLE [dbo].[work_item_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_item] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_item_c] on [dbo].[work_item_c]'
GO
ALTER TABLE [dbo].[work_item_c] ADD CONSTRAINT [PK_work_item_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_item_c] on [dbo].[work_item_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_item_c] ON [dbo].[work_item_c] ([FK_rowid_work_item], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_itemwork_attribute]'
GO
CREATE TABLE [dbo].[work_itemwork_attribute]
(
[rowid] [bigint] NOT NULL,
[value] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[position] [int] NULL,
[link_rowid] [bigint] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formula_id] [int] NULL,
[user_id] [int] NULL,
[delimited_position] [int] NULL,
[tablename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_item] [bigint] NULL,
[FK_rowid_work_attribute] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_itemwork_attribute] on [dbo].[work_itemwork_attribute]'
GO
ALTER TABLE [dbo].[work_itemwork_attribute] ADD CONSTRAINT [PK_work_itemwork_attribute] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_FK_work_itemwork_attribute] on [dbo].[work_itemwork_attribute]'
GO
CREATE NONCLUSTERED INDEX [IX_FK_work_itemwork_attribute] ON [dbo].[work_itemwork_attribute] ([FK_rowid_work_item], [FK_rowid_work_attribute], [link_rowid], [position])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_itemwork_attribute] on [dbo].[work_itemwork_attribute]'
GO
CREATE NONCLUSTERED INDEX [IX_work_itemwork_attribute] ON [dbo].[work_itemwork_attribute] ([link_rowid], [position])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_manualdocumenttemplate]'
GO
CREATE TABLE [dbo].[work_manualdocumenttemplate]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[linktable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linktable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[linkprofile6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[documentprofile6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_manualdocumenttemplate] on [dbo].[work_manualdocumenttemplate]'
GO
ALTER TABLE [dbo].[work_manualdocumenttemplate] ADD CONSTRAINT [PK_work_manualdocumenttemplate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_manualdocumenttemplate_name] on [dbo].[work_manualdocumenttemplate]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_manualdocumenttemplate_name] ON [dbo].[work_manualdocumenttemplate] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_manualdocumentaction]'
GO
CREATE TABLE [dbo].[work_manualdocumentaction]
(
[rowid] [bigint] NOT NULL,
[priority] [int] NULL,
[coded_action_id] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_manualdocumenttemplate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_manualdocumentaction] on [dbo].[work_manualdocumentaction]'
GO
ALTER TABLE [dbo].[work_manualdocumentaction] ADD CONSTRAINT [PK_work_manualdocumentaction] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_manualdocumentaction_priority] on [dbo].[work_manualdocumentaction]'
GO
CREATE NONCLUSTERED INDEX [IX_work_manualdocumentaction_priority] ON [dbo].[work_manualdocumentaction] ([FK_rowid_work_manualdocumenttemplate], [priority])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_manualdocumentcondition]'
GO
CREATE TABLE [dbo].[work_manualdocumentcondition]
(
[rowid] [bigint] NOT NULL,
[truth] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[FK_rowid_work_manualdocumentaction] [bigint] NULL,
[FK_rowid_condition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_manualdocumentcondition] on [dbo].[work_manualdocumentcondition]'
GO
ALTER TABLE [dbo].[work_manualdocumentcondition] ADD CONSTRAINT [PK_work_manualdocumentcondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[work_manualdocumentcondition]'
GO
ALTER TABLE [dbo].[work_manualdocumentcondition] ADD CONSTRAINT [IX_work_manualdocumentcondition] UNIQUE NONCLUSTERED  ([FK_rowid_work_manualdocumentaction], [FK_rowid_condition])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_manualdocumenttemplate_c]'
GO
CREATE TABLE [dbo].[work_manualdocumenttemplate_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_manualdocumenttemplate] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_manualdocumenttemplate_c] on [dbo].[work_manualdocumenttemplate_c]'
GO
ALTER TABLE [dbo].[work_manualdocumenttemplate_c] ADD CONSTRAINT [PK_work_manualdocumenttemplate_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_manualdocumenttemplate_c] on [dbo].[work_manualdocumenttemplate_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_manualdocumenttemplate_c] ON [dbo].[work_manualdocumenttemplate_c] ([FK_rowid_work_manualdocumenttemplate], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[dataselector_action_c]'
GO
CREATE TABLE [dbo].[dataselector_action_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_dataselector_action] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_dataselector_action_c] on [dbo].[dataselector_action_c]'
GO
ALTER TABLE [dbo].[dataselector_action_c] ADD CONSTRAINT [PK_dataselector_action_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_dataselector_action_c] on [dbo].[dataselector_action_c]'
GO
CREATE NONCLUSTERED INDEX [IX_dataselector_action_c] ON [dbo].[dataselector_action_c] ([FK_rowid_dataselector_action], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_status]'
GO
CREATE TABLE [dbo].[work_status]
(
[rowid] [bigint] NOT NULL,
[name] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[future_tense] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[future_tense_description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[required] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[user_selectable] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_status] on [dbo].[work_status]'
GO
ALTER TABLE [dbo].[work_status] ADD CONSTRAINT [PK_work_status] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_status_future_tense] on [dbo].[work_status]'
GO
CREATE NONCLUSTERED INDEX [IX_work_status_future_tense] ON [dbo].[work_status] ([future_tense])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_status_name] on [dbo].[work_status]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_status_name] ON [dbo].[work_status] ([name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_status_c]'
GO
CREATE TABLE [dbo].[work_status_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_status] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_status_c] on [dbo].[work_status_c]'
GO
ALTER TABLE [dbo].[work_status_c] ADD CONSTRAINT [PK_work_status_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_status_c] on [dbo].[work_status_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_status_c] ON [dbo].[work_status_c] ([FK_rowid_work_status], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_template_c]'
GO
CREATE TABLE [dbo].[work_template_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_template_c] on [dbo].[work_template_c]'
GO
ALTER TABLE [dbo].[work_template_c] ADD CONSTRAINT [PK_work_template_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_template_c] on [dbo].[work_template_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_template_c] ON [dbo].[work_template_c] ([FK_rowid_work_template], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatework_attribute]'
GO
CREATE TABLE [dbo].[work_templatework_attribute]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[formula_id] [int] NULL,
[position] [int] NULL,
[optional] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[delimited] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[default_value] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_template] [bigint] NOT NULL,
[FK_rowid_work_attribute] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatework_attribute] on [dbo].[work_templatework_attribute]'
GO
ALTER TABLE [dbo].[work_templatework_attribute] ADD CONSTRAINT [PK_work_templatework_attribute] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_attribute] on [dbo].[work_templatework_attribute]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_attribute] ON [dbo].[work_templatework_attribute] ([FK_rowid_work_template], [FK_rowid_work_attribute], [position])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_attribute_position] on [dbo].[work_templatework_attribute]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_attribute_position] ON [dbo].[work_templatework_attribute] ([FK_rowid_work_template], [position])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatemodel]'
GO
CREATE TABLE [dbo].[work_templatemodel]
(
[rowid] [bigint] NOT NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_template] [bigint] NULL,
[FK_rowid_model] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatemodel] on [dbo].[work_templatemodel]'
GO
ALTER TABLE [dbo].[work_templatemodel] ADD CONSTRAINT [PK_work_templatemodel] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatemodel_FKmodel] on [dbo].[work_templatemodel]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatemodel_FKmodel] ON [dbo].[work_templatemodel] ([FK_rowid_model])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_template_model_rowid] on [dbo].[work_templatemodel]'
GO
CREATE NONCLUSTERED INDEX [IX_work_template_model_rowid] ON [dbo].[work_templatemodel] ([FK_rowid_model], [rowid], [FK_rowid_work_template])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatemodel_FKwork_template] on [dbo].[work_templatemodel]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatemodel_FKwork_template] ON [dbo].[work_templatemodel] ([FK_rowid_work_template])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatemodel] on [dbo].[work_templatemodel]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatemodel] ON [dbo].[work_templatemodel] ([FK_rowid_work_template], [FK_rowid_model])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatework_attribute_c]'
GO
CREATE TABLE [dbo].[work_templatework_attribute_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_templatework_attribute] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatework_attribute_c] on [dbo].[work_templatework_attribute_c]'
GO
ALTER TABLE [dbo].[work_templatework_attribute_c] ADD CONSTRAINT [PK_work_templatework_attribute_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_attribute_c] on [dbo].[work_templatework_attribute_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_attribute_c] ON [dbo].[work_templatework_attribute_c] ([FK_rowid_work_templatework_attribute], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatework_attributecondition]'
GO
CREATE TABLE [dbo].[work_templatework_attributecondition]
(
[rowid] [bigint] NOT NULL,
[condition_id] [int] NULL,
[truth] [varchar] (5) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_templatework_attribute] [bigint] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatework_attributecondition] on [dbo].[work_templatework_attributecondition]'
GO
ALTER TABLE [dbo].[work_templatework_attributecondition] ADD CONSTRAINT [PK_work_templatework_attributecondition] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_attributecondition_FK_work_templatework_condition] on [dbo].[work_templatework_attributecondition]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_attributecondition_FK_work_templatework_condition] ON [dbo].[work_templatework_attributecondition] ([FK_rowid_work_templatework_attribute], [condition_id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatework_attributecondition_c]'
GO
CREATE TABLE [dbo].[work_templatework_attributecondition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_templatework_attributecondition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatework_attributecondition_c] on [dbo].[work_templatework_attributecondition_c]'
GO
ALTER TABLE [dbo].[work_templatework_attributecondition_c] ADD CONSTRAINT [PK_work_templatework_attributecondition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_attributecondition_c] on [dbo].[work_templatework_attributecondition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_attributecondition_c] ON [dbo].[work_templatework_attributecondition_c] ([FK_rowid_work_templatework_attributecondition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_templatework_status]'
GO
CREATE TABLE [dbo].[work_templatework_status]
(
[rowid] [bigint] NOT NULL,
[default_status] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_work_status] [bigint] NULL,
[FK_rowid_work_template] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_templatework_status] on [dbo].[work_templatework_status]'
GO
ALTER TABLE [dbo].[work_templatework_status] ADD CONSTRAINT [PK_work_templatework_status] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_unique] on [dbo].[work_templatework_status]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_work_templatework_unique] ON [dbo].[work_templatework_status] ([FK_rowid_work_status], [FK_rowid_work_template])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_templatework_status_FK_rowid_work_template] on [dbo].[work_templatework_status]'
GO
CREATE NONCLUSTERED INDEX [IX_work_templatework_status_FK_rowid_work_template] ON [dbo].[work_templatework_status] ([FK_rowid_work_template])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[yearend]'
GO
CREATE TABLE [dbo].[yearend]
(
[rowid] [bigint] NOT NULL,
[yearend] [datetime] NULL,
[crint] [decimal] (12, 2) NULL,
[tax] [decimal] (12, 2) NULL,
[drint] [decimal] (12, 2) NULL,
[deposit] [dbo].[balance] NULL,
[deposit_previous] [dbo].[balance] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_acct] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_yearend] on [dbo].[yearend]'
GO
ALTER TABLE [dbo].[yearend] ADD CONSTRAINT [PK_yearend] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_yearend_FKacctyearend] on [dbo].[yearend]'
GO
CREATE NONCLUSTERED INDEX [IX_yearend_FKacctyearend] ON [dbo].[yearend] ([FK_rowid_acct], [yearend])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[alert_messages]'
GO
CREATE TABLE [dbo].[alert_messages]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[message] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL,
[FK_rowid_people] [bigint] NULL,
[FK_rowid_nonpers] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_alert_messages] on [dbo].[alert_messages]'
GO
ALTER TABLE [dbo].[alert_messages] ADD CONSTRAINT [PK_alert_messages] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_alert_messages_FK_rowid_nonpers] on [dbo].[alert_messages]'
GO
CREATE NONCLUSTERED INDEX [IX_alert_messages_FK_rowid_nonpers] ON [dbo].[alert_messages] ([FK_rowid_nonpers])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_alert_messages_FK_rowid_people] on [dbo].[alert_messages]'
GO
CREATE NONCLUSTERED INDEX [IX_alert_messages_FK_rowid_people] ON [dbo].[alert_messages] ([FK_rowid_people])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[calculation]'
GO
CREATE TABLE [dbo].[calculation]
(
[rowid] [bigint] NOT NULL,
[rec_crint] [decimal] (19, 2) NULL,
[rec_drint] [decimal] (19, 2) NULL,
[rec_charge] [decimal] (19, 2) NULL,
[rec_tax] [decimal] (19, 2) NULL,
[rec_pnint] [decimal] (19, 2) NULL,
[rec_redemption] [decimal] (19, 2) NULL,
[calc_flags] [int] NULL,
[antilocksub] [int] NULL,
[last_rate_row] [bigint] NULL,
[last_balance] [dbo].[balance] NULL,
[last_baserate_row] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_calculation] on [dbo].[calculation]'
GO
ALTER TABLE [dbo].[calculation] ADD CONSTRAINT [PK_calculation] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chart1]'
GO
CREATE TABLE [dbo].[chart1]
(
[rowid] [bigint] NOT NULL,
[code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[product] [dbo].[product_id] NULL,
[sortcode] [int] NULL,
[ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[accno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chart1] on [dbo].[chart1]'
GO
ALTER TABLE [dbo].[chart1] ADD CONSTRAINT [PK_chart1] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[chart]'
GO
CREATE TABLE [dbo].[chart]
(
[rowid] [bigint] NOT NULL,
[code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[product] [dbo].[product_id] NULL,
[ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[method] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[extgl] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[title] [varchar] (40) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[type] [varchar] (8) COLLATE Latin1_General_CI_AS NULL,
[model_lookup] [bigint] NULL,
[currency_lookup] [bigint] NULL,
[product_lookup] [bigint] NULL,
[ledger_lookup] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[category] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[locked] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[subaccts] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_chart] on [dbo].[chart]'
GO
ALTER TABLE [dbo].[chart] ADD CONSTRAINT [PK_chart] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chart_code] on [dbo].[chart]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_chart_code] ON [dbo].[chart] ([code], [currency], [product], [ledger1], [ledger2], [ledger3])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_chart_lookup] on [dbo].[chart]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_chart_lookup] ON [dbo].[chart] ([model_lookup], [currency_lookup], [product_lookup], [ledger_lookup])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[client_globals]'
GO
CREATE TABLE [dbo].[client_globals]
(
[rowid] [bigint] NOT NULL,
[last_authorised_ibnkuser] [bigint] NULL,
[last_searched_sortcode] [int] NULL,
[last_searched_accno] [dbo].[accno] NULL,
[last_searched_sub] [int] NULL,
[profilename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[profiletable] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[profilerowid] [bigint] NULL,
[username] [dbo].[ibnkusername] NULL,
[extra_string] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[extra_bigint] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_client_globals] on [dbo].[client_globals]'
GO
ALTER TABLE [dbo].[client_globals] ADD CONSTRAINT [PK_client_globals] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[data_action]'
GO
CREATE TABLE [dbo].[data_action]
(
[rowid] [bigint] NOT NULL,
[id] [int] NULL,
[type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[tablename] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[parentname6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[field1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring1] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint1] [int] NULL,
[valuebigint1] [bigint] NULL,
[valuedecimal1] [decimal] (18, 5) NULL,
[valuedatetime1] [datetime] NULL,
[variable1] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula1] [int] NULL,
[field2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring2] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint2] [int] NULL,
[valuebigint2] [bigint] NULL,
[valuedecimal2] [decimal] (18, 5) NULL,
[valuedatetime2] [datetime] NULL,
[variable2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula2] [int] NULL,
[field3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring3] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint3] [int] NULL,
[valuebigint3] [bigint] NULL,
[valuedecimal3] [decimal] (18, 5) NULL,
[valuedatetime3] [datetime] NULL,
[variable3] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula3] [int] NULL,
[field4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring4] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint4] [int] NULL,
[valuebigint4] [bigint] NULL,
[valuedecimal4] [decimal] (18, 5) NULL,
[valuedatetime4] [datetime] NULL,
[variable4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula4] [int] NULL,
[field5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring5] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint5] [int] NULL,
[valuebigint5] [bigint] NULL,
[valuedecimal5] [decimal] (18, 5) NULL,
[valuedatetime5] [datetime] NULL,
[variable5] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula5] [int] NULL,
[field6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring6] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint6] [int] NULL,
[valuebigint6] [bigint] NULL,
[valuedecimal6] [decimal] (18, 5) NULL,
[valuedatetime6] [datetime] NULL,
[variable6] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula6] [int] NULL,
[field7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring7] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint7] [int] NULL,
[valuebigint7] [bigint] NULL,
[valuedecimal7] [decimal] (18, 5) NULL,
[valuedatetime7] [datetime] NULL,
[variable7] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula7] [int] NULL,
[field8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring8] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint8] [int] NULL,
[valuebigint8] [bigint] NULL,
[valuedecimal8] [decimal] (18, 5) NULL,
[valuedatetime8] [datetime] NULL,
[variable8] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula8] [int] NULL,
[field9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring9] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint9] [int] NULL,
[valuebigint9] [bigint] NULL,
[valuedecimal9] [decimal] (18, 5) NULL,
[valuedatetime9] [datetime] NULL,
[variable9] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula9] [int] NULL,
[field10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring10] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint10] [int] NULL,
[valuebigint10] [bigint] NULL,
[valuedecimal10] [decimal] (18, 5) NULL,
[valuedatetime10] [datetime] NULL,
[variable10] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula10] [int] NULL,
[field11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring11] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint11] [int] NULL,
[valuebigint11] [bigint] NULL,
[valuedecimal11] [decimal] (18, 5) NULL,
[valuedatetime11] [datetime] NULL,
[variable11] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula11] [int] NULL,
[field12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring12] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint12] [int] NULL,
[valuebigint12] [bigint] NULL,
[valuedecimal12] [decimal] (18, 5) NULL,
[valuedatetime12] [datetime] NULL,
[variable12] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula12] [int] NULL,
[field13] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit13] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring13] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint13] [int] NULL,
[valuebigint13] [bigint] NULL,
[valuedecimal13] [decimal] (18, 5) NULL,
[valuedatetime13] [datetime] NULL,
[variable13] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula13] [int] NULL,
[field14] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit14] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring14] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint14] [int] NULL,
[valuebigint14] [bigint] NULL,
[valuedecimal14] [decimal] (18, 5) NULL,
[valuedatetime14] [datetime] NULL,
[variable14] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula14] [int] NULL,
[field15] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit15] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring15] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint15] [int] NULL,
[valuebigint15] [bigint] NULL,
[valuedecimal15] [decimal] (18, 5) NULL,
[valuedatetime15] [datetime] NULL,
[variable15] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula15] [int] NULL,
[field16] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit16] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring16] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint16] [int] NULL,
[valuebigint16] [bigint] NULL,
[valuedecimal16] [decimal] (18, 5) NULL,
[valuedatetime16] [datetime] NULL,
[variable16] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula16] [int] NULL,
[field17] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit17] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring17] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint17] [int] NULL,
[valuebigint17] [bigint] NULL,
[valuedecimal17] [decimal] (18, 5) NULL,
[valuedatetime17] [datetime] NULL,
[variable17] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula17] [int] NULL,
[field18] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit18] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring18] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint18] [int] NULL,
[valuebigint18] [bigint] NULL,
[valuedecimal18] [decimal] (18, 5) NULL,
[valuedatetime18] [datetime] NULL,
[variable18] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula18] [int] NULL,
[field19] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit19] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring19] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint19] [int] NULL,
[valuebigint19] [bigint] NULL,
[valuedecimal19] [decimal] (18, 5) NULL,
[valuedatetime19] [datetime] NULL,
[variable19] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula19] [int] NULL,
[field20] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit20] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring20] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint20] [int] NULL,
[valuebigint20] [bigint] NULL,
[valuedecimal20] [decimal] (18, 5) NULL,
[valuedatetime20] [datetime] NULL,
[variable20] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula20] [int] NULL,
[field21] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit21] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring21] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint21] [int] NULL,
[valuebigint21] [bigint] NULL,
[valuedecimal21] [decimal] (18, 5) NULL,
[valuedatetime21] [datetime] NULL,
[variable21] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula21] [int] NULL,
[field22] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit22] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring22] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint22] [int] NULL,
[valuebigint22] [bigint] NULL,
[valuedecimal22] [decimal] (18, 5) NULL,
[valuedatetime22] [datetime] NULL,
[variable22] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula22] [int] NULL,
[field23] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit23] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring23] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint23] [int] NULL,
[valuebigint23] [bigint] NULL,
[valuedecimal23] [decimal] (18, 5) NULL,
[valuedatetime23] [datetime] NULL,
[variable23] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula23] [int] NULL,
[field24] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit24] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring24] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint24] [int] NULL,
[valuebigint24] [bigint] NULL,
[valuedecimal24] [decimal] (18, 5) NULL,
[valuedatetime24] [datetime] NULL,
[variable24] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula24] [int] NULL,
[field25] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit25] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring25] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint25] [int] NULL,
[valuebigint25] [bigint] NULL,
[valuedecimal25] [decimal] (18, 5) NULL,
[valuedatetime25] [datetime] NULL,
[variable25] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula25] [int] NULL,
[field26] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit26] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring26] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint26] [int] NULL,
[valuebigint26] [bigint] NULL,
[valuedecimal26] [decimal] (18, 5) NULL,
[valuedatetime26] [datetime] NULL,
[variable26] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula26] [int] NULL,
[field27] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit27] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring27] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint27] [int] NULL,
[valuebigint27] [bigint] NULL,
[valuedecimal27] [decimal] (18, 5) NULL,
[valuedatetime27] [datetime] NULL,
[variable27] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula27] [int] NULL,
[field28] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit28] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring28] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint28] [int] NULL,
[valuebigint28] [bigint] NULL,
[valuedecimal28] [decimal] (18, 5) NULL,
[valuedatetime28] [datetime] NULL,
[variable28] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula28] [int] NULL,
[field29] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit29] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring29] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint29] [int] NULL,
[valuebigint29] [bigint] NULL,
[valuedecimal29] [decimal] (18, 5) NULL,
[valuedatetime29] [datetime] NULL,
[variable29] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula29] [int] NULL,
[field30] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit30] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring30] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint30] [int] NULL,
[valuebigint30] [bigint] NULL,
[valuedecimal30] [decimal] (18, 5) NULL,
[valuedatetime30] [datetime] NULL,
[variable30] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula30] [int] NULL,
[field31] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit31] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring31] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint31] [int] NULL,
[valuebigint31] [bigint] NULL,
[valuedecimal31] [decimal] (18, 5) NULL,
[valuedatetime31] [datetime] NULL,
[variable31] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula31] [int] NULL,
[field32] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit32] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring32] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint32] [int] NULL,
[valuebigint32] [bigint] NULL,
[valuedecimal32] [decimal] (18, 5) NULL,
[valuedatetime32] [datetime] NULL,
[variable32] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula32] [int] NULL,
[field33] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit33] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring33] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint33] [int] NULL,
[valuebigint33] [bigint] NULL,
[valuedecimal33] [decimal] (18, 5) NULL,
[valuedatetime33] [datetime] NULL,
[variable33] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula33] [int] NULL,
[field34] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit34] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring34] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint34] [int] NULL,
[valuebigint34] [bigint] NULL,
[valuedecimal34] [decimal] (18, 5) NULL,
[valuedatetime34] [datetime] NULL,
[variable34] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula34] [int] NULL,
[field35] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit35] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring35] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint35] [int] NULL,
[valuebigint35] [bigint] NULL,
[valuedecimal35] [decimal] (18, 5) NULL,
[valuedatetime35] [datetime] NULL,
[variable35] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula35] [int] NULL,
[field36] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[dbexplicit36] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[valuestring36] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[valueint36] [int] NULL,
[valuebigint36] [bigint] NULL,
[valuedecimal36] [decimal] (18, 5) NULL,
[valuedatetime36] [datetime] NULL,
[variable36] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[formula36] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_data_action] on [dbo].[data_action]'
GO
ALTER TABLE [dbo].[data_action] ADD CONSTRAINT [PK_data_action] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_data_action_id] on [dbo].[data_action]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_data_action_id] ON [dbo].[data_action] ([id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[eftrequest]'
GO
CREATE TABLE [dbo].[eftrequest]
(
[rowid] [bigint] NOT NULL,
[requestdate] [datetime] NULL,
[requesttime] [datetime] NULL,
[dc] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[dd] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[fps] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chaps] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[auddis] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[auddisret] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[addacs] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[arudd] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[arucs] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[awacs] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[chqret] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_eftrequest] on [dbo].[eftrequest]'
GO
ALTER TABLE [dbo].[eftrequest] ADD CONSTRAINT [PK_eftrequest] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_eftrequest_requestdate] on [dbo].[eftrequest]'
GO
CREATE NONCLUSTERED INDEX [IX_eftrequest_requestdate] ON [dbo].[eftrequest] ([requestdate], [requesttime])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[filter]'
GO
CREATE TABLE [dbo].[filter]
(
[rowid] [bigint] NOT NULL,
[code] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[currency] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[product] [dbo].[product_id] NULL,
[ledger1] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger2] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[ledger3] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[status] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[flip] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[filter]'
GO
ALTER TABLE [dbo].[filter] ADD CONSTRAINT [PK_filter] UNIQUE CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_filter_1] on [dbo].[filter]'
GO
ALTER TABLE [dbo].[filter] ADD CONSTRAINT [PK_filter_1] PRIMARY KEY NONCLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[formula_result]'
GO
CREATE TABLE [dbo].[formula_result]
(
[rowid] [bigint] NOT NULL,
[return_string] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[return_decimal] [decimal] (28, 9) NULL,
[return_date] [datetime] NULL,
[return_int] [int] NULL,
[return_bigint] [bigint] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_formula_result] on [dbo].[formula_result]'
GO
ALTER TABLE [dbo].[formula_result] ADD CONSTRAINT [PK_formula_result] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[hold]'
GO
CREATE TABLE [dbo].[hold]
(
[rowid] [bigint] NOT NULL,
[start] [datetime] NULL,
[expire] [datetime] NULL,
[days] [int] NULL,
[amount] [decimal] (19, 2) NULL,
[reason] [varchar] (50) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_hold] on [dbo].[hold]'
GO
ALTER TABLE [dbo].[hold] ADD CONSTRAINT [PK_hold] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ibnk_search]'
GO
CREATE TABLE [dbo].[ibnk_search]
(
[rowid] [bigint] NOT NULL,
[str0] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str1] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str2] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str3] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str4] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str5] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str6] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[str7] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[int0] [int] NULL,
[int1] [int] NULL,
[int2] [int] NULL,
[int3] [int] NULL,
[int4] [int] NULL,
[int5] [int] NULL,
[bigint0] [bigint] NULL,
[bigint1] [bigint] NULL,
[bigint2] [bigint] NULL,
[bigint3] [bigint] NULL,
[bigint4] [bigint] NULL,
[bigint5] [bigint] NULL,
[dec0] [decimal] (28, 9) NULL,
[dec1] [decimal] (28, 9) NULL,
[dec2] [decimal] (28, 9) NULL,
[dec3] [decimal] (28, 9) NULL,
[dec4] [decimal] (28, 9) NULL,
[dec5] [decimal] (28, 9) NULL,
[dt0] [datetime] NULL,
[dt1] [datetime] NULL,
[dt2] [datetime] NULL,
[dt3] [datetime] NULL,
[dt4] [datetime] NULL,
[dt5] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ibnk_search] on [dbo].[ibnk_search]'
GO
ALTER TABLE [dbo].[ibnk_search] ADD CONSTRAINT [PK_ibnk_search] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[mis]'
GO
CREATE TABLE [dbo].[mis]
(
[rowid] [bigint] NOT NULL,
[rep_by] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[rep_for] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[rep_for_value] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[bal_type] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[rep_on] [varchar] (20) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_mis] on [dbo].[mis]'
GO
ALTER TABLE [dbo].[mis] ADD CONSTRAINT [PK_mis] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[web_response]'
GO
CREATE TABLE [dbo].[web_response] (
    [rowid]              BIGINT       NOT NULL,
    [sequence]           INT          NULL,
    [type]               VARCHAR (10) COLLATE Latin1_General_CI_AS NULL,
    [json]               IMAGE        NULL,
    [createempl]         INT          NULL,
    [createdate]         DATETIME     NULL,
    [createtime]         DATETIME     NULL,
    [amendempl]          INT          NULL,
    [amenddate]          DATETIME     NULL,
    [amendtime]          DATETIME     NULL,
    [FK_rowid_work_item] BIGINT       NOT NULL,
    CONSTRAINT [PK_web_response] PRIMARY KEY CLUSTERED ([rowid] ASC)
);
GO
IF @@ERROR <> 0 SET NOEXEC ON
Go
PRINT N'Adding foreign keys to [dbo].[web_response]'
GO
ALTER TABLE [dbo].[web_response] ADD CONSTRAINT [Fk_web_response_work_item] FOREIGN KEY ([FK_rowid_work_item]) REFERENCES [dbo].[work_item] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_web_response_FK_rowid_work_item] on [dbo].[web_response]'
GO
CREATE NONCLUSTERED INDEX [IX_web_response_FK_rowid_work_item] ON [dbo].[web_response] ([FK_rowid_work_item])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[search]'
GO
CREATE TABLE [dbo].[search]
(
[rowid] [bigint] NOT NULL,
[custacct] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[searchby] [varchar] (32) COLLATE Latin1_General_CI_AS NULL,
[filterstring] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterint] [bigint] NULL,
[filteracct] [bigint] NULL,
[filtersortcode] [int] NULL,
[filtercardpan] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filterdatetime] [datetime] NULL,
[searchby2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filterstring2] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterint2] [bigint] NULL,
[warning] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[results] [int] NULL,
[custtype] [varchar] (30) COLLATE Latin1_General_CI_AS NULL,
[searchby3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[searchby3type] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filterint3] [int] NULL,
[filterdecimal3start] [decimal] (21, 2) NULL,
[filterdecimal3end] [decimal] (21, 2) NULL,
[filterdatetime3start] [datetime] NULL,
[filterdatetime3end] [datetime] NULL,
[filterstring3] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[filterstring5] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring6] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring7] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring8] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring9] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filterstring10] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[searchby4] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[searchby5] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[searchby6] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[searchby7] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[searchby8] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filteronline] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[filteronline2] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[filterofficer] [varchar] (20) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_search] on [dbo].[search]'
GO
ALTER TABLE [dbo].[search] ADD CONSTRAINT [PK_search] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[stmtt]'
GO
CREATE TABLE [dbo].[stmtt]
(
[rowid] [bigint] NOT NULL,
[owner_type] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[owner_id] [bigint] NULL,
[prodtype] [dbo].[product_id] NULL,
[stmt] [bigint] NULL,
[stmthdr] [bigint] NULL,
[stmtcontact] [bigint] NULL,
[sortcode] [int] NULL,
[accno] [bigint] NULL,
[txndate] [datetime] NULL,
[valuedate] [datetime] NULL,
[sequence] [bigint] NULL,
[trantype] [int] NULL,
[trancode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[clrcode] [varchar] (2) COLLATE Latin1_General_CI_AS NULL,
[suppcode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[stmtrecon] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[reconcode] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[supplist] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[supprecon] [varchar] (18) COLLATE Latin1_General_CI_AS NULL,
[reconciliation] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[amount] [decimal] (19, 2) NULL,
[category] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[descr] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc1] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc2] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc3] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc4] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[desc5] [varchar] (63) COLLATE Latin1_General_CI_AS NULL,
[serialno] [bigint] NULL,
[source] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[tfrsortcode] [int] NULL,
[tfraccno] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_stmtt] on [dbo].[stmtt]'
GO
ALTER TABLE [dbo].[stmtt] ADD CONSTRAINT [PK_stmtt] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[taxrate]'
GO
CREATE TABLE [dbo].[taxrate]
(
[rowid] [bigint] NOT NULL,
[startdate] [datetime] NULL,
[taxrate] [decimal] (4, 2) NULL,
[vat_rate1] [decimal] (4, 2) NULL,
[vat_rate2] [decimal] (4, 2) NULL,
[vat_rate3] [decimal] (4, 2) NULL,
[vat_rate4] [decimal] (4, 2) NULL,
[nextdate] [datetime] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_taxrate] on [dbo].[taxrate]'
GO
ALTER TABLE [dbo].[taxrate] ADD CONSTRAINT [PK_taxrate] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[taxrate]'
GO
ALTER TABLE [dbo].[taxrate] ADD CONSTRAINT [IX_taxrate_startdate] UNIQUE NONCLUSTERED  ([startdate])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[watchlist_category]'
GO
CREATE TABLE [dbo].[watchlist_category]
(
[rowid] [bigint] NOT NULL,
[type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[code] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[parent_code] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[description] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_watchlist_category] on [dbo].[watchlist_category]'
GO
ALTER TABLE [dbo].[watchlist_category] ADD CONSTRAINT [PK_watchlist_category] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_category_code] on [dbo].[watchlist_category]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_category_code] ON [dbo].[watchlist_category] ([type], [code])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_category_subcode] on [dbo].[watchlist_category]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_category_subcode] ON [dbo].[watchlist_category] ([type], [code], [parent_code])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[watchlist_entity]'
GO
CREATE TABLE [dbo].[watchlist_entity]
(
[rowid] [bigint] NOT NULL,
[entity] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[entity_id] [bigint] NULL,
[compact_name] [varchar] (70) COLLATE Latin1_General_CI_AS NULL,
[name] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[birth_date] [datetime] NULL,
[nationality] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[domicile] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[alternative] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_watchlist_entity] on [dbo].[watchlist_entity]'
GO
ALTER TABLE [dbo].[watchlist_entity] ADD CONSTRAINT [PK_watchlist_entity] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_birthdate] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_birthdate] ON [dbo].[watchlist_entity] ([birth_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_compact_name] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_compact_name] ON [dbo].[watchlist_entity] ([compact_name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_domicile] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_domicile] ON [dbo].[watchlist_entity] ([domicile])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_entity_birthdate] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_entity_birthdate] ON [dbo].[watchlist_entity] ([entity], [birth_date])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_entity_compact_name] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_entity_compact_name] ON [dbo].[watchlist_entity] ([entity], [compact_name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_entity_domicle] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_entity_domicle] ON [dbo].[watchlist_entity] ([entity], [domicile])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_entity_nationality] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_entity_nationality] ON [dbo].[watchlist_entity] ([entity], [nationality])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_entity_nationality] on [dbo].[watchlist_entity]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_entity_nationality] ON [dbo].[watchlist_entity] ([nationality])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[watchlist_match]'
GO
CREATE TABLE [dbo].[watchlist_match]
(
[rowid] [bigint] NOT NULL,
[entity] [varchar] (10) COLLATE Latin1_General_CI_AS NULL,
[entity_id] [bigint] NULL,
[watchlist_id] [bigint] NULL,
[match] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[match_type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL,
[match_value] [varchar] (100) COLLATE Latin1_General_CI_AS NULL,
[match_notes] [varchar] (2048) COLLATE Latin1_General_CI_AS NULL,
[sequence] [int] NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_watchlist_match] on [dbo].[watchlist_match]'
GO
ALTER TABLE [dbo].[watchlist_match] ADD CONSTRAINT [PK_watchlist_match] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_match_value] on [dbo].[watchlist_match]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_match_value] ON [dbo].[watchlist_match] ([watchlist_id], [entity], [entity_id], [match_type], [match_value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_watchlist_match_sequence] on [dbo].[watchlist_match]'
GO
CREATE NONCLUSTERED INDEX [IX_watchlist_match_sequence] ON [dbo].[watchlist_match] ([watchlist_id], [entity], [entity_id], [sequence])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[webservice_log]'
GO
CREATE TABLE [dbo].[webservice_log]
(
[rowid] [bigint] NOT NULL,
[logid] [bigint] NULL,
[req_type] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[req_bookdate] [datetime] NULL,
[req_date] [datetime] NULL,
[req_time] [datetime] NULL,
[err_code] [varchar] (7) COLLATE Latin1_General_CI_AS NULL,
[err_message] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[err_warning] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[req_ipaddress] [varchar] (15) COLLATE Latin1_General_CI_AS NULL,
[session_id] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[branch_number] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[user_id] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[workstation_id] [varchar] (48) COLLATE Latin1_General_CI_AS NULL,
[createempl] [int] NULL,
[createdate] [datetime] NULL,
[createtime] [datetime] NULL,
[amendempl] [int] NULL,
[amenddate] [datetime] NULL,
[amendtime] [datetime] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_webservice_log] on [dbo].[webservice_log]'
GO
ALTER TABLE [dbo].[webservice_log] ADD CONSTRAINT [PK_webservice_log] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_webservice_log] on [dbo].[webservice_log]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_webservice_log] ON [dbo].[webservice_log] ([logid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_decisioncondition_c]'
GO
CREATE TABLE [dbo].[work_decisioncondition_c]
(
[rowid] [bigint] NOT NULL,
[fieldname] [varchar] (50) COLLATE Latin1_General_CI_AS NULL,
[oldvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[newvalue] [varchar] (250) COLLATE Latin1_General_CI_AS NULL,
[datestamp] [datetime] NULL,
[timestamp] [datetime] NULL,
[emplstamp] [int] NULL,
[FK_rowid_work_decisioncondition] [bigint] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_decisioncondition_c] on [dbo].[work_decisioncondition_c]'
GO
ALTER TABLE [dbo].[work_decisioncondition_c] ADD CONSTRAINT [PK_work_decisioncondition_c] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_work_decisioncondition_c] on [dbo].[work_decisioncondition_c]'
GO
CREATE NONCLUSTERED INDEX [IX_work_decisioncondition_c] ON [dbo].[work_decisioncondition_c] ([FK_rowid_work_decisioncondition], [datestamp], [timestamp])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[work_filters]'
GO
CREATE TABLE [dbo].[work_filters]
(
[rowid] [bigint] NOT NULL,
[filter_status] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filter_status2] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filter_status3] [varchar] (20) COLLATE Latin1_General_CI_AS NULL,
[filter_assigned] [int] NULL,
[filter_template_id] [int] NULL,
[filter_from] [datetime] NULL,
[filter_to] [datetime] NULL,
[filter_maxrows] [int] NULL,
[filter_showfuture] [varchar] (3) COLLATE Latin1_General_CI_AS NULL,
[filter_category] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filter_tablename] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filter_fieldname] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filter_fieldvalue_string] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[filter_fieldvalue_bigint] [bigint] NULL,
[filter_fieldvalue_int] [int] NULL,
[filter_fieldvalue_datetime] [datetime] NULL,
[filter_fieldvalue_decimal] [decimal] (21, 5) NULL,
[filter_type] [varchar] (25) COLLATE Latin1_General_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_work_filters] on [dbo].[work_filters]'
GO
ALTER TABLE [dbo].[work_filters] ADD CONSTRAINT [PK_work_filters] PRIMARY KEY CLUSTERED  ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_createchange]'
GO

CREATE procedure [dbo].[SDK_createchange]
  @MASTERTABLE sysname = ''
as
                declare @strWORK varchar(2048)
                begin transaction
                                if (@mastertable = '')
                                begin
                                                print 'SDK_createchange : Missing tablename.'
                                                rollback transaction
                                                return (0)
                                end
                                if not exists (select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME = @MASTERTABLE)
                                begin
                                                print 'SDK_createchange : Table does not exist.'
                                                rollback transaction
                                                return (0)
                                end
                                -- Create new table
                                select @strWORK = 'CREATE TABLE [' + @MASTERTABLE + '_c] ( [rowid] BIGINT NOT NULL)'
                                exec (@strWORK)
                                -- Add extra columns
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [fieldname] VARCHAR(50) NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [oldvalue] VARCHAR(250) NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [newvalue] VARCHAR(250) NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [datestamp] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [timestamp] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [emplstamp] INT NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD [FK_rowid_' + @MASTERTABLE + '] BIGINT NULL'
                                exec (@strWORK)
                                -- Add primary key
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] ADD CONSTRAINT [PK_' + @MASTERTABLE + '_c] PRIMARY KEY CLUSTERED ([rowid])'
                                exec (@strWORK)
                                -- Add index
                                select @strWORK = 'CREATE NONCLUSTERED INDEX [IX_' + @MASTERTABLE + '_c] on [dbo].[' + @MASTERTABLE + '_c] ([FK_rowid_' + @MASTERTABLE + '], [datestamp], [timestamp])'
                                exec (@strWORK)
                                -- Add foreign key
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_c] WITH NOCHECK ADD CONSTRAINT [FK_' + @MASTERTABLE + '_c_' + @MASTERTABLE + '] FOREIGN KEY ([FK_rowid_' + @MASTERTABLE + ']) REFERENCES [dbo].[' + @MASTERTABLE + '] ([rowid])'
                                exec (@strWORK)

                                print 'Change table ' + @MASTERTABLE + '_c created.'
                                print ''
                commit
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_createsavepoint]'
GO

CREATE procedure [dbo].[SDK_createsavepoint]
  @MASTERTABLE sysname = ''
as
                declare @strWORK varchar(2048)
                begin transaction
                                if (@mastertable = '')
                                begin
                                                print 'SDK_createsavepoint : Missing tablename.'
                                                rollback transaction
                                                return (0)
                                end
                                if not exists (select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME = @MASTERTABLE)
                                begin
                                                print 'SDK_createsavepoint : Table does not exist.'
                                                rollback transaction
                                                return (0)
                                end
                                -- Create new table
                                select @strWORK = 'CREATE TABLE [' + @MASTERTABLE + '_s] ( [rowid] BIGINT NOT NULL)'
                                exec (@strWORK)
                                -- Add extra columns
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD [datestamp] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD [timestamp] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD [emplstamp] INT NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD [bookstamp] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD [FK_rowid_' + @MASTERTABLE + '] BIGINT NULL'
                                exec (@strWORK)
                                -- Add primary key
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] ADD CONSTRAINT [PK_' + @MASTERTABLE + '_s] PRIMARY KEY CLUSTERED ([rowid])'
                                exec (@strWORK)
                                -- Add index
                                select @strWORK = 'CREATE NONCLUSTERED INDEX [IX_bookstamp] on [dbo].[' + @MASTERTABLE + '_s] ([FK_rowid_' + @MASTERTABLE + '], [datestamp], [timestamp])'
                                exec (@strWORK)
                                -- Add foreign key
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '_s] WITH NOCHECK ADD CONSTRAINT [FK_' + @MASTERTABLE + '_s_' + @MASTERTABLE + '] FOREIGN KEY ([FK_rowid_' + @MASTERTABLE + ']) REFERENCES [dbo].[' + @MASTERTABLE + '] ([rowid])'
                                exec (@strWORK)

                                print 'Savepoint table ' + @MASTERTABLE + '_s created.'
                                print ''
                commit
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SDK_createtable]'
GO

CREATE procedure [dbo].[SDK_createtable]
  @MASTERTABLE sysname = ''
as
                declare @strWORK varchar(2048)
                begin transaction
                                if (@mastertable = '')
                                begin
                                                print 'SDK_createtable : Missing tablename.'
                                                rollback transaction
                                                return (0)
                                end
                                if exists (select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_NAME = @MASTERTABLE)
                                begin
                                                print 'SDK_createtable : Table already exists.'
                                                rollback transaction
                                                return (0)
                                end
                                -- Create new table
                                begin transaction
                                                select @strWORK = 'CREATE TABLE [' + @MASTERTABLE + '] ( [rowid] BIGINT NOT NULL)'
                                                exec (@strWORK)
                                commit
                                -- Add extra columns
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [createempl] INT NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [createdate] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [createtime] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [amendempl] INT NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [amenddate] DATETIME NULL'
                                exec (@strWORK)
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD [amendtime] DATETIME NULL'
                                exec (@strWORK)
                                -- Add primary key
                                select @strWORK = 'ALTER TABLE [dbo].[' + @MASTERTABLE + '] ADD CONSTRAINT [PK_' + @MASTERTABLE + '] PRIMARY KEY CLUSTERED ([rowid])'
                                exec (@strWORK)
                                -- Add NOLOG properties
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''createempl'''
                                exec (@strWORK)
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''createdate'''
                                exec (@strWORK)
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''createtime'''
                                exec (@strWORK)
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''amendempl'''
                                exec (@strWORK)
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''amenddate'''
                                exec (@strWORK)
                                select @strwork = 'sp_addextendedproperty N''MS_Description'', N''NOLOG'', ''SCHEMA'', N''dbo'', ''TABLE'', N''' + @MASTERTABLE + ''', ''COLUMN'', N''amendtime'''
                                exec (@strWORK)
                                print 'Table ' + @MASTERTABLE + ' created.'
                                print ''
                commit
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkCheckDigit]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2005 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkCheckDigit
-- 
--	Notes:		
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	24jul14		jonl	SDK-198		Schema split
--	08may12		mgf		SDK-135		Changed into resource file
--	20oct2006	mgf		ABT0875		Corrected missing orderby 
--	03jun2006	amr		ABT0849		Include indexes
--	09may2006	amr		ABT0831		Don't use global temp tables for check digit
--	Dec-Jan06	amr		ABT0748		Convert to VS2005
--	- - - - - - - -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--	02aug05		amr		ABT0647		Fix inconsitencies in index order
--	08apr05		amr		ABT0631		Handle column names in indexes
--	11mar05		mgf		ABT0587		Fixed order by problem
--	28jan05		amr		ABT0587		Fix opt problems with buf_cmp
--	21jan05		amr		ABT0581		Added indexes and constraints
--	18jan05		amr		ABT0581		Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkCheckDigit] @results INT, @schema VARCHAR(50) WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT  on

	declare @UNIONSIZE int
	declare @chunk int
	declare @chkdigit int
	declare @big bigint
	declare @c int
	declare @objid int
	declare @check_rows_exist int

	declare @indexid int
	declare @indexname varchar(255)
	declare @maxindexid int
	declare @indexloop int

	declare @colid int
	declare @colindexname varchar(255)


	select @UNIONSIZE = 49152

	declare @MAXVARBINARYSIZE int
	select @MAXVARBINARYSIZE = @UNIONSIZE-1024
	declare @objectcount int

	declare @temp varchar(255)
	declare @a varchar(8000)
	declare @b varchar(8000)
	declare @out varchar(8000)

	declare @fieldcount int
	declare @syscolumnsid int
	declare @maxfields int
	declare @nummatches int
	declare @temptype int
	declare @lz varchar(255)
	declare @tempdim varchar(255)
	declare @ilength int
	declare @maxobjects int

	create table #c_types 
	(
		id     int,
		resolve varchar(28),
		fieldtype varchar(50),
		c_macro varchar(50),
		length int,
	)

	truncate table #c_types

	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(50,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(47,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(61,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(111,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(55,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(106,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(62,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(109,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(56,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(38,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(60,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(122,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(110,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(108,'SdkInt64','SdkInt64','SDK_INT64',8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(59,'SdkBaseDecimal','SdkBaseDecimal','SDK_DECIMAL',20)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(58,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(52,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(35,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(45,'SdkDateTime','SdkDateTime','SDK_DATETIME',8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(48,'SdkInt32','SdkInt32','SDK_INT32',4)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(39,'SdkBaseString','SdkBaseString','SDK_STRING',0)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(63, 'SdkInt64', 'SdkInt64', 'SDK_INT64', 8)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(37, 'SdkBaseVarbinary','SdkBaseVarbinary','SDK_VARBINARY',0)
	insert into #c_types (id, resolve, fieldtype, c_macro, length) VALUES(34, 'SdkBaseVarbinary','Image','SDK_VARBINARY',0)

	create unique index #IX_c_types on #c_types ( id ) 

	--------------------------------------- Create and populate #tmpobjects table -----------------------------------------------

	select IDENTITY(int, 1,1) id, name, intid into #tmpobjects from 
	(select TOP 100 PERCENT o.name, o.id as intid from sysobjects o where o.type = 'U' and o.name != 'dtproperties' and o.name != 'sysdiagrams' and uid = (select schema_id from sys.schemas where name = @schema)) as so order by so.name

	create unique index #IX_tmpobjects on #tmpobjects ( id )	

	---------------------------------- Create and populate #primarykeys table ------------------------------------------------
	-- This section produces a table containing primary key information that is used later when generating PK lookup functions
	-- in a format that is much simpler for the later functions to upderstand than the format stored in sysindexes
	-------------------------------------------------------------------------------------------------------------------------- 

	create table #primarykeys
	(
		tablename varchar(500),
		primaryrow varchar(500),
	)

	truncate table #primarykeys
	create unique index #IX_primarykeys on #primarykeys (tablename)

	DECLARE @table_id		int
	DECLARE @full_table_name varchar(255)
	declare @primarykey varchar(500)
	declare @tablename varchar(500)
	declare @keycount int

	select @maxobjects = (select max(id) from #tmpobjects)

	alter table #tmpobjects add hashcode int

	declare @hashcode int
	declare @hashcount int

	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		select @hashcode = BINARY_CHECKSUM(name) from #tmpobjects where id = @objectcount
			
		set @hashcount = 1
		while @hashcount > 0
		begin
			select @hashcount = count(*) from #tmpobjects where BINARY_CHECKSUM(name) = @hashcode and id != @objectcount
			if @hashcount > 0 set @hashcode = @hashcode + 1
		end
			
		update #tmpobjects set hashcode = @hashcode where id = @objectcount
		
		set @objectcount = @objectcount + 1
	end

	select @objectcount = 1
	while @objectcount <= @maxobjects
	begin
		select @tablename = null
		select @primarykey = null
		select @full_table_name = (select name from #tmpobjects where id = @objectcount)
			select @table_id = 
			(
				select id from sysobjects where name = 
				(
					 select name from #tmpobjects where id = @objectcount
				) and uid = (select schema_id from sys.schemas where name = @schema)
			)
			select @primarykey = convert(sysname, c.name), @tablename = convert(sysname, o.name)
		from sysindexes i, syscolumns c, sysobjects o --, syscolumns c1
		where
			o.id = @table_id
			and o.id = c.id
			and o.id = i.id
			and (i.status & 0x800) = 0x800
			--and c.name = index_col (@full_table_name, i.indid, c1.colid)
			and (c.name = index_col (@full_table_name, i.indid,  1) or
				 c.name = index_col (@full_table_name, i.indid,  2) or
				 c.name = index_col (@full_table_name, i.indid,  3) or
				 c.name = index_col (@full_table_name, i.indid,  4) or
				 c.name = index_col (@full_table_name, i.indid,  5) or
				 c.name = index_col (@full_table_name, i.indid,  6) or
				 c.name = index_col (@full_table_name, i.indid,  7) or
				 c.name = index_col (@full_table_name, i.indid,  8) or
				 c.name = index_col (@full_table_name, i.indid,  9) or
				 c.name = index_col (@full_table_name, i.indid, 10) or
				 c.name = index_col (@full_table_name, i.indid, 11) or
				 c.name = index_col (@full_table_name, i.indid, 12) or
				 c.name = index_col (@full_table_name, i.indid, 13) or
				 c.name = index_col (@full_table_name, i.indid, 14) or
				 c.name = index_col (@full_table_name, i.indid, 15) or
				 c.name = index_col (@full_table_name, i.indid, 16)
		)
			if @tablename is not null and @primarykey is not null
		begin
			insert into #primarykeys (tablename, primaryrow) VALUES (@tablename, @primarykey)
		end

		select @objectcount = @objectcount + 1
	end

	select @maxobjects = (select max(id) from #tmpobjects)
	set @objectcount = 1


	if @results = 0
	begin
		select '//'
		select '// SDK Generated on ' + CONVERT(varchar, GETDATE(), 113)
		select '//'
		select ''
		select 'array<Int32>^ checkDigit = gcnew array<Int32>(8 * ' + convert(varchar, @maxobjects) + ') {'
	end

	while @objectcount <= @maxobjects
	begin
		select @a = name from #tmpobjects where id = @objectcount  
		select @objid = id from sysobjects where name = @a and uid = (select schema_id from sys.schemas where name = @schema)

		set @b = @a
		
		select @fieldcount = 1
		select @syscolumnsid = 1
		select @maxfields = (select count(*) from syscolumns where id = @objid)
		while @fieldcount <= @maxfields
		begin
			select @temptype = type, @temp = name from syscolumns where colid = @syscolumnsid and id = @objid

			set @tempdim = ''
		
			select @lz = LEFT(RIGHT(convert(varchar, (select value from sys.extended_properties 
				where sys.extended_properties.major_id = @objid and sys.extended_properties.minor_id = @syscolumnsid 
				and sys.extended_properties.name = 'MS_Description' 
				and convert(varchar, sys.extended_properties.value) like 'LEADINGZEROES(%)')), 2), 1)

			set @ilength = 0
			
			select @ilength = convert(int, (select value from sys.extended_properties 
				where sys.extended_properties.major_id = @objid 
				and sys.extended_properties.minor_id = @syscolumnsid 
				and sys.extended_properties.name = 'MS_Description' 
				and convert(varchar, sys.extended_properties.value) like '[0-9]%'))
		
			if @lz is null 
			begin
				set @lz = ''	
			end
			
			if @ilength is null 
			begin
				set @lz = ''	
			end
				
			select @tempdim = convert(varchar,syscolumns.xprec) + convert(varchar,syscolumns.xscale)
	 			  from sysobjects, syscolumns, #tmpobjects, #c_types 
	       			where sysobjects.name = #tmpobjects.name 
	            		and syscolumns.id = sysobjects.id
	            		and syscolumns.type = #c_types.id
	            		and #c_types.resolve = 'SdkBaseDecimal'
	            		and #tmpobjects.id = @objectcount 
				and syscolumns.colid = @syscolumnsid         
				and sysobjects.uid = (select schema_id from sys.schemas where name = @schema)
		         
			if @tempdim = '' 
			begin  
				select @tempdim = convert(varchar,syscolumns.length)
					  from sysobjects, syscolumns, #tmpobjects, #c_types 
			      		where sysobjects.name = #tmpobjects.name 
		        		and syscolumns.id = sysobjects.id
		            		and syscolumns.type = #c_types.id
		            		and #c_types.resolve = 'SdkBaseString'
		            		and #tmpobjects.id = @objectcount
			    		and syscolumns.colid = @syscolumnsid     
			    		and sysobjects.uid = (select schema_id from sys.schemas where name = @schema)    
			end
		
			if @tempdim = '' 
			begin  
				select @tempdim = convert(varchar,syscolumns.length)
					  from sysobjects, syscolumns, #tmpobjects, #c_types 
			      		where sysobjects.name = #tmpobjects.name 
		        		and syscolumns.id = sysobjects.id
		            		and syscolumns.type = #c_types.id
		            		and #c_types.fieldtype = 'SdkBaseVarbinary'
		            		and #tmpobjects.id = @objectcount
			    		and syscolumns.colid = @syscolumnsid   
			    		and sysobjects.uid = (select schema_id from sys.schemas where name = @schema)
			end
		
			if @tempdim = '' 
			begin  
				select @tempdim = convert(varchar,@ilength)
					  from sysobjects, syscolumns, #tmpobjects, #c_types 
			      		where sysobjects.name = #tmpobjects.name 
		        		and syscolumns.id = sysobjects.id
		            		and syscolumns.type = #c_types.id
		            		and #c_types.fieldtype = 'Image'
		            		and #tmpobjects.id = @objectcount
			    		and syscolumns.colid = @syscolumnsid   
			    		and sysobjects.uid = (select schema_id from sys.schemas where name = @schema)
			end
		
			select @nummatches = (select count(*) from syscolumns where colid = @syscolumnsid and id = @objid)
			if @nummatches > 0 
			begin
				select @a = @a + @temp + convert(varchar, @temptype) + @tempdim + @lz
				select @b = @lz + convert(varchar, @temptype) + @temp + @b
				select @fieldcount = @fieldcount + 1
			end
			select @syscolumnsid = @syscolumnsid + 1
		end

		select @a = @a + name, @b = name + @b from sysindexes where keys is not null and name not like '_WA_Sys_%' and id = @objid order by name
		
	--------------------------------- INDEXES ---------------------------------------

		select IDENTITY(int, 1,1) id, indid, name into #tmpindexes from (select TOP 100 PERCENT o.indid, o.name from sysindexes o where o.name not like '_WA_Sys_%' and o.id = @objid order by o.name) as so order by so.name
		select @maxindexid = (select count(*) from #tmpindexes)

		set @indexname = ''
		set @indexid = 1
		set @indexloop = 1

		while (@indexloop <= @maxindexid) 
		begin			
			select @indexname = (select name from #tmpindexes where id = @indexloop)
		
			set @colid = 1
			set @colindexname = ''
				
			select @a = @a + @indexname, @b = @indexname + @b
				
			select @indexid = (select indid from #tmpindexes where id = @indexloop)

			while (@colindexname is not NULL and @colid < 17)
			begin
				select @colindexname = (select index_col((select name from #tmpobjects where id = @objectcount), @indexid, @colid) from sysindexes where name not like '_WA_Sys_%' and id = @objid and indid = @indexid)
				select @colid = @colid + 1
				if @colindexname is not NULL 
				begin
					select @a = @a + @colindexname, @b = @colindexname + @b
				end
			end 

			select @indexloop = @indexloop + 1
		end

		drop table #tmpindexes

	--------------------------------- /INDEXES ---------------------------------------
			
		select @a = @a + name, @b = name + @b from sysobjects where xtype = 'F' and parent_obj = @objid and uid = (select schema_id from sys.schemas where name = @schema) order by name
		select @a  = @a + @b
		
		select @chunk = len(@a) / 8
		set @out = ''
		set @c = 0
		while @c < 7
		begin
			select @b = SUBSTRING(@a, @chunk * @c, @chunk)
			select @out = @out + convert(varchar, BINARY_CHECKSUM(@b)) + ','
			select @c = @c + 1
		end
		select @b = SUBSTRING(@a, @chunk * 7, len(@a) - @chunk * 7 + 1)
		if @results = 1
		begin
			select @out = @out + convert(varchar, BINARY_CHECKSUM(@b))
		end
		else
		begin
			select @out = @out + convert(varchar, BINARY_CHECKSUM(@b))
			if @objectcount < @maxobjects 
			begin
				select @out = @out + ', '
			end
			else
			begin
				select @out = @out + '};'
			end
		end
		
		if @results = 1
		begin
			select @out
		end
		else
		begin
			select @out
		end

		select @objectcount = @objectcount + 1
	end

	drop index #c_types.#IX_c_types
	drop index #tmpobjects.#IX_tmpobjects
	drop table #tmpobjects
	drop table #c_types
	drop table #primarykeys
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkCreateGlobal]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkCreateGlobal
-- 
--	Notes:		Creates the global table
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	Dec-Jan06	amr		ABT0748		Convert to VS2005 - formerly schemaa.sql
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--	10oct05		amr		ABT0705		Minimum rebuild
--	15may04		amr		ABT0415		Use more sensible scale for global
--	11jan04		amr		ABT0266		Extra global fields for bigints
--	02aug03		jonl	APB0045		Create global table
--	31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	23oct02		amr					Separated into two new functions
--	10oct02		jonl				Created
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkCreateGlobal] WITH ENCRYPTION AS
BEGIN
	SET NOCOUNT ON
	SET ANSI_PADDING ON

	IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'global')
	BEGIN
		DROP TABLE [global]
	END

	CREATE TABLE [global]
	(
		rowid [bigint] NOT NULL,
		dt0 [datetime] NULL,
		dt1 [datetime] NULL,
 		dt2 [datetime] NULL,
		dt3 [datetime] NULL,
		dt4 [datetime] NULL,
		dt5 [datetime] NULL,
		dt6 [datetime] NULL,
		dt7 [datetime] NULL,
		dec0 [decimal] (28, 9) NULL,
		dec1 [decimal] (28, 9) NULL,
		dec2 [decimal] (28, 9) NULL,
		dec3 [decimal] (28, 9) NULL,
		dec4 [decimal] (28, 9) NULL,
		dec5 [decimal] (28, 9) NULL,
		dec6 [decimal] (28, 9) NULL,
		dec7 [decimal] (28, 9) NULL,
		int0 [int] NULL,
		int1 [int] NULL,
		int2 [int] NULL,
		int3 [int] NULL,
		int4 [int] NULL,
		int5 [int] NULL,
		int6 [int] NULL,
		int7 [int] NULL,
		str0 [varchar] (250) NULL,
		str1 [varchar] (250) NULL,
		str2 [varchar] (250) NULL,
		str3 [varchar] (250) NULL,
		str4 [varchar] (250) NULL,
		str5 [varchar] (250) NULL,
		str6 [varchar] (250) NULL,
		str7 [varchar] (250) NULL,
		bigint0 [bigint] NULL,
		bigint1 [bigint] NULL,
		bigint2 [bigint] NULL,
		bigint3 [bigint] NULL,
		bigint4 [bigint] NULL,
		bigint5 [bigint] NULL,
		bigint6 [bigint] NULL,
		bigint7 [bigint] NULL,
		CONSTRAINT [PK_global] PRIMARY KEY CLUSTERED 
		(
		[rowid] ASC
		)
	)
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[SdkDropTables]'
GO
--	----------------------------------------------------------------------------- 
--	Copyright (c) 2003 APAK Group plc
--	-----------------------------------------------------------------------------
--
--	Filename:	SdkDropTables.sql
-- 
--	Notes:		Removes the global table, if it exists
--
--	Changes:
--	Date		Author	A/S No		Change
--	-----------------------------------------------------------------------------
--	08may12		mgf		SDK-135		Changed into resource file
--	Dec-Jan06	amr		ABT0748		Convert to VS2005 - formerly droptables.sql
--	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--  13feb04		mgf		ABT0305		Changed SQL syntax for reduced file sizes
--  31jul03		jonl	APB0060		Turn include_sql scripts into encrypted stored procedures
--	-----------------------------------------------------------------------------  

CREATE PROCEDURE [dbo].[SdkDropTables] WITH ENCRYPTION AS
BEGIN
	IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'global')
	BEGIN
		DROP TABLE [global]
	END
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[sp_housekeeping]'
GO
create procedure [dbo].[sp_housekeeping] 
as 
        declare @tablename sysname 
        declare @sql sysname 
        declare curtable cursor for select TABLE_NAME from INFORMATION_SCHEMA.TABLES 
        open curtable 
        fetch next from curtable into @tablename 
        while @@fetch_status = 0 
        begin 
				print 'Processing ' + @tablename
                select @sql = 'update statistics ' + @tablename 
                exec (@sql) 
                select @sql = 'ALTER INDEX ALL ON ' + @tablename + ' REBUILD' 
                exec (@sql) 
                fetch next from curtable into @tablename 
        end 
        close curtable 
        deallocate curtable 
GO
PRINT N'Adding foreign keys to [dbo].[bacstxnhdr]'
GO
ALTER TABLE [dbo].[bacstxnhdr] WITH NOCHECK  ADD CONSTRAINT [FK_bacstxnhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_actioncondition_c]'
GO
ALTER TABLE [dbo].[dataselector_actioncondition_c] WITH NOCHECK  ADD CONSTRAINT [FK_dataselector_actioncondition_c_dataselector_actioncondition] FOREIGN KEY ([FK_rowid_dataselector_actioncondition]) REFERENCES [dbo].[dataselector_actioncondition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_condition_c]'
GO
ALTER TABLE [dbo].[dataselector_condition_c] WITH NOCHECK  ADD CONSTRAINT [FK_dataselector_condition_c_dataselector_condition] FOREIGN KEY ([FK_rowid_dataselector_condition]) REFERENCES [dbo].[dataselector_condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsinhdr_c]'
GO
ALTER TABLE [dbo].[fpsinhdr_c] WITH NOCHECK  ADD CONSTRAINT [FK_fpsinhdr_c_fpsinhdr] FOREIGN KEY ([FK_rowid_fpsinhdr]) REFERENCES [dbo].[fpsinhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkbrowserretirement_c]'
GO
ALTER TABLE [dbo].[ibnkbrowserretirement_c] WITH NOCHECK  ADD CONSTRAINT [FK_ibnkbrowserretirement_c_ibnkbrowserretirement] FOREIGN KEY ([FK_rowid_ibnkbrowserretirement]) REFERENCES [dbo].[ibnkbrowserretirement] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SDKLoginSDKitem]'
GO
ALTER TABLE [dbo].[SDKLoginSDKitem] ADD CONSTRAINT [FK_SDKskipwizard_SDKitem] FOREIGN KEY ([FK_rowid_SDKitem]) REFERENCES [dbo].[SDKitem] ([rowid])
GO
ALTER TABLE [dbo].[SDKLoginSDKitem] ADD CONSTRAINT [FK_SDKskipwizard_SDKLogin] FOREIGN KEY ([FK_rowid_SDKlogin]) REFERENCES [dbo].[SDKLogin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[term_v]'
GO
ALTER TABLE [dbo].[term_v] WITH NOCHECK  ADD CONSTRAINT [FK_term_v_term] FOREIGN KEY ([FK_rowid_term]) REFERENCES [dbo].[term] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[call_v]'
GO
ALTER TABLE [dbo].[call_v] WITH NOCHECK  ADD CONSTRAINT [FK_call_v_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan_v]'
GO
ALTER TABLE [dbo].[loan_v] WITH NOCHECK  ADD CONSTRAINT [FK_loan_v_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[nonpers_v]'
GO
ALTER TABLE [dbo].[nonpers_v] WITH NOCHECK  ADD CONSTRAINT [FK_nonpers_v_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[people_v]'
GO
ALTER TABLE [dbo].[people_v] WITH NOCHECK  ADD CONSTRAINT [FK_people_v_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SDKLogin_c]'
GO
ALTER TABLE [dbo].[SDKLogin_c] ADD CONSTRAINT [FK_SDKLogin_c_SDKLogin] FOREIGN KEY ([FK_rowid_SDKLogin]) REFERENCES [dbo].[SDKLogin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privSDKdetail]'
GO
ALTER TABLE [dbo].[privSDKdetail] ADD CONSTRAINT [FK_privSDKdetail_SDKdetail] FOREIGN KEY ([FK_rowid_SDKdetail]) REFERENCES [dbo].[SDKdetail] ([rowid])
GO
ALTER TABLE [dbo].[privSDKdetail] ADD CONSTRAINT [FK_privSDKdetail_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SDKpossiblevalues]'
GO
ALTER TABLE [dbo].[SDKpossiblevalues] ADD CONSTRAINT [FK_SDKpossiblevalues_SDKdetail] FOREIGN KEY ([FK_rowid_SDKdetail]) REFERENCES [dbo].[SDKdetail] ([rowid]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SDKdetail]'
GO
ALTER TABLE [dbo].[SDKdetail] ADD CONSTRAINT [FK_SDKdetail_SDKitem] FOREIGN KEY ([FK_rowid_SDKitem]) REFERENCES [dbo].[SDKitem] ([rowid]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privSDKitem]'
GO
ALTER TABLE [dbo].[privSDKitem] ADD CONSTRAINT [FK_privSDKitem_SDKitem] FOREIGN KEY ([FK_rowid_SDKitem]) REFERENCES [dbo].[SDKitem] ([rowid]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[privSDKitem] ADD CONSTRAINT [FK_privSDKitem_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[acctcontact]'
GO
ALTER TABLE [dbo].[acctcontact] ADD CONSTRAINT [FK_acctcontact_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[acctcontact] ADD CONSTRAINT [FK_acctcontact_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[appl]'
GO
ALTER TABLE [dbo].[appl] ADD CONSTRAINT [FK_appl_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[audititem]'
GO
ALTER TABLE [dbo].[audititem] ADD CONSTRAINT [FK_audititem_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[audititem] ADD CONSTRAINT [FK_audititem_audit] FOREIGN KEY ([FK_rowid_audit]) REFERENCES [dbo].[audit] ([rowid])
GO
ALTER TABLE [dbo].[audititem] ADD CONSTRAINT [FK_audititem_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[autopymt]'
GO
ALTER TABLE [dbo].[autopymt] ADD CONSTRAINT [FK_autopymt_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[autopymt] ADD CONSTRAINT [FK_rowid_ibnkuser_autopymt_submitter] FOREIGN KEY ([FK_rowid_ibnkuser_submitter]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[book]'
GO
ALTER TABLE [dbo].[book] ADD CONSTRAINT [FK_book_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[book] ADD CONSTRAINT [FK_book_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[call]'
GO
ALTER TABLE [dbo].[call] ADD CONSTRAINT [FK_call_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[card]'
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_carddef] FOREIGN KEY ([FK_rowid_carddef]) REFERENCES [dbo].[carddef] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_cardholder] FOREIGN KEY ([FK_rowid_cardholder]) REFERENCES [dbo].[cardholder] ([rowid])
GO
ALTER TABLE [dbo].[card] ADD CONSTRAINT [FK_card_corppay] FOREIGN KEY ([FK_rowid_corppay]) REFERENCES [dbo].[corppay] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[charge]'
GO
ALTER TABLE [dbo].[charge] ADD CONSTRAINT [FK_charge_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[charge] ADD CONSTRAINT [FK_charge_acctgroup] FOREIGN KEY ([FK_rowid_acctgroup]) REFERENCES [dbo].[acctgroup] ([rowid])
GO
ALTER TABLE [dbo].[charge] ADD CONSTRAINT [FK_charge_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[corppay]'
GO
ALTER TABLE [dbo].[corppay] ADD CONSTRAINT [FK_corppay_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[corppay] ADD CONSTRAINT [FK_corppay_carddef] FOREIGN KEY ([FK_rowid_carddef]) REFERENCES [dbo].[carddef] ([rowid])
GO
ALTER TABLE [dbo].[corppay] ADD CONSTRAINT [FK_corppay_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
ALTER TABLE [dbo].[corppay] ADD CONSTRAINT [FK_corppay_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddiout]'
GO
ALTER TABLE [dbo].[ddiout] ADD CONSTRAINT [FK_ddiout_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[ddiout] ADD CONSTRAINT [FK_rowid_ibnkuser_ddiout_submitter] FOREIGN KEY ([FK_rowid_ibnkuser_submitter]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[ddiout] ADD CONSTRAINT [FK_ddiout_ddorigin] FOREIGN KEY ([FK_rowid_ddorigin]) REFERENCES [dbo].[ddorigin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dw_stage]'
GO
ALTER TABLE [dbo].[dw_stage] ADD CONSTRAINT [FK_dw_stage_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[feeoverride]'
GO
ALTER TABLE [dbo].[feeoverride] ADD CONSTRAINT [FK_feeoverride_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[feeoverride] ADD CONSTRAINT [FK_feeoverride_acctgroup] FOREIGN KEY ([FK_rowid_acctgroup]) REFERENCES [dbo].[acctgroup] ([rowid])
GO
ALTER TABLE [dbo].[feeoverride] ADD CONSTRAINT [FK_feeoverride_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[gl]'
GO
ALTER TABLE [dbo].[gl] ADD CONSTRAINT [FK_gl_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan]'
GO
ALTER TABLE [dbo].[loan] ADD CONSTRAINT [FK_loan_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlrule_log]'
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [FK_mlrule_log_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [FK_mlrule_log_mlrule] FOREIGN KEY ([FK_rowid_mlrule]) REFERENCES [dbo].[mlrule] ([rowid])
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [FK_mlrule_log_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [FK_mlrule_log_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[mlrule_log] ADD CONSTRAINT [FK_mlrule_log_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[payout]'
GO
ALTER TABLE [dbo].[payout] ADD CONSTRAINT [FK_payout_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[payout] ADD CONSTRAINT [FK_payout_loanred] FOREIGN KEY ([FK_rowid_loanred]) REFERENCES [dbo].[loanred] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[proof]'
GO
ALTER TABLE [dbo].[proof] ADD CONSTRAINT [FK_proof_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[proof] ADD CONSTRAINT [FK_proof_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
ALTER TABLE [dbo].[proof] ADD CONSTRAINT [FK_proof_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[proof] ADD CONSTRAINT [FK_proof_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[rate]'
GO
ALTER TABLE [dbo].[rate] ADD CONSTRAINT [FK_rate_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[rate] ADD CONSTRAINT [FK_rate_acctgroup] FOREIGN KEY ([FK_rowid_acctgroup]) REFERENCES [dbo].[acctgroup] ([rowid])
GO
ALTER TABLE [dbo].[rate] ADD CONSTRAINT [FK_rate_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
ALTER TABLE [dbo].[rate] ADD CONSTRAINT [FK_rate_prograte] FOREIGN KEY ([FK_rowid_prograte]) REFERENCES [dbo].[prograte] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[rateused]'
GO
ALTER TABLE [dbo].[rateused] ADD CONSTRAINT [FK_rateused_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[rateused] ADD CONSTRAINT [FK_rateused_rate] FOREIGN KEY ([FK_rowid_rate]) REFERENCES [dbo].[rate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[relate]'
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [FK_relate_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [FK_relate_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [FK_relate_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [FK_relate_relate2] FOREIGN KEY ([FK_rowid_relate2]) REFERENCES [dbo].[relate2] ([rowid])
GO
ALTER TABLE [dbo].[relate] ADD CONSTRAINT [FK_relate_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[relate2]'
GO
ALTER TABLE [dbo].[relate2] ADD CONSTRAINT [FK_relate2_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[relate2] ADD CONSTRAINT [FK_relate2_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[relate2] ADD CONSTRAINT [FK_relate2_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[relate2] ADD CONSTRAINT [FK_relate2_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stats]'
GO
ALTER TABLE [dbo].[stats] ADD CONSTRAINT [FK_stats_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmthdr]'
GO
ALTER TABLE [dbo].[stmthdr] ADD CONSTRAINT [FK_stmthdr_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[term]'
GO
ALTER TABLE [dbo].[term] ADD CONSTRAINT [FK_term_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[term] ADD CONSTRAINT [FK_term_mmperiod] FOREIGN KEY ([FK_rowid_mmperiod]) REFERENCES [dbo].[mmperiod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txns]'
GO
ALTER TABLE [dbo].[txns] ADD CONSTRAINT [FK_txns_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
ALTER TABLE [dbo].[txns] ADD CONSTRAINT [FK_txns_loanred] FOREIGN KEY ([FK_rowid_loanred]) REFERENCES [dbo].[loanred] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txns_post]'
GO
ALTER TABLE [dbo].[txns_post] ADD CONSTRAINT [FK_txns_post_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txnstop]'
GO
ALTER TABLE [dbo].[txnstop] ADD CONSTRAINT [FK_txnstop_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[yearend]'
GO
ALTER TABLE [dbo].[yearend] ADD CONSTRAINT [FK_yearend_acct] FOREIGN KEY ([FK_rowid_acct]) REFERENCES [dbo].[acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[acct]'
GO
ALTER TABLE [dbo].[acct] ADD CONSTRAINT [FK_acct_ddiin] FOREIGN KEY ([FK_rowid_ddiin]) REFERENCES [dbo].[ddiin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[acctcontact_c]'
GO
ALTER TABLE [dbo].[acctcontact_c] ADD CONSTRAINT [FK_acctcontact_c_acctcontact] FOREIGN KEY ([FK_rowid_acctcontact]) REFERENCES [dbo].[acctcontact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[acctgroup_c]'
GO
ALTER TABLE [dbo].[acctgroup_c] ADD CONSTRAINT [FK_acctgroup_c_acctgroup] FOREIGN KEY ([FK_rowid_acctgroup]) REFERENCES [dbo].[acctgroup] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[exposure]'
GO
ALTER TABLE [dbo].[exposure] ADD CONSTRAINT [FK_exposure_acctgroup] FOREIGN KEY ([FK_rowid_acctgroup]) REFERENCES [dbo].[acctgroup] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[acctsubst_c]'
GO
ALTER TABLE [dbo].[acctsubst_c] ADD CONSTRAINT [FK_acctsubst_c_acctsubst] FOREIGN KEY ([FK_rowid_acctsubst]) REFERENCES [dbo].[acctsubst] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsinhdr_c]'
GO
ALTER TABLE [dbo].[addacsinhdr_c] ADD CONSTRAINT [FK_addacsinhdr_c_addacsinhdr] FOREIGN KEY ([FK_rowid_addacsinhdr]) REFERENCES [dbo].[addacsinhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsintxn]'
GO
ALTER TABLE [dbo].[addacsintxn] ADD CONSTRAINT [FK_addacsintxn_addacsinhdr] FOREIGN KEY ([FK_rowid_addacsinhdr]) REFERENCES [dbo].[addacsinhdr] ([rowid])
GO
ALTER TABLE [dbo].[addacsintxn] ADD CONSTRAINT [FK_addacsintxn_ddiin] FOREIGN KEY ([FK_rowid_ddiin]) REFERENCES [dbo].[ddiin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsinhdr]'
GO
ALTER TABLE [dbo].[addacsinhdr] ADD CONSTRAINT [FK_addacsinhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsintxn_c]'
GO
ALTER TABLE [dbo].[addacsintxn_c] ADD CONSTRAINT [FK_addacsintxn_c_addacsintxn] FOREIGN KEY ([FK_rowid_addacsintxn]) REFERENCES [dbo].[addacsintxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsouttxn]'
GO
ALTER TABLE [dbo].[addacsouttxn] ADD CONSTRAINT [FK_addacsouttxn_addacsouthdr] FOREIGN KEY ([FK_rowid_addacsouthdr]) REFERENCES [dbo].[addacsouthdr] ([rowid])
GO
ALTER TABLE [dbo].[addacsouttxn] ADD CONSTRAINT [FK_addacstxn_ddiout] FOREIGN KEY ([FK_rowid_ddiout]) REFERENCES [dbo].[ddiout] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsouthdr]'
GO
ALTER TABLE [dbo].[addacsouthdr] ADD CONSTRAINT [FK_addacsouthdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[addacsouttxn_c]'
GO
ALTER TABLE [dbo].[addacsouttxn_c] ADD CONSTRAINT [FK_addacsouttxn_c_addacsouttxn] FOREIGN KEY ([FK_rowid_addacsouttxn]) REFERENCES [dbo].[addacsouttxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[additionalfields_enumerated]'
GO
ALTER TABLE [dbo].[additionalfields_enumerated] ADD CONSTRAINT [FK_additionalfields_enumerated_additionalfields_field] FOREIGN KEY ([FK_rowid_additionalfields_field]) REFERENCES [dbo].[additionalfields_field] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[additionalfields_value]'
GO
ALTER TABLE [dbo].[additionalfields_value] ADD CONSTRAINT [FK_user_field_value_user_field] FOREIGN KEY ([FK_rowid_additionalfields_field]) REFERENCES [dbo].[additionalfields_field] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[additionalfields_field]'
GO
ALTER TABLE [dbo].[additionalfields_field] ADD CONSTRAINT [FK_user_field_user_field_table] FOREIGN KEY ([FK_rowid_additionalfields_table]) REFERENCES [dbo].[additionalfields_table] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[agency_claim_c]'
GO
ALTER TABLE [dbo].[agency_claim_c] ADD CONSTRAINT [FK_agency_claim_c_agency_claim] FOREIGN KEY ([FK_rowid_agency_claim]) REFERENCES [dbo].[agency_claim] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[agency_claim]'
GO
ALTER TABLE [dbo].[agency_claim] ADD CONSTRAINT [FK_agency_claim_encashment] FOREIGN KEY ([FK_rowid_encashment]) REFERENCES [dbo].[encashment] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_condition_c]'
GO
ALTER TABLE [dbo].[aml_condition_c] ADD CONSTRAINT [FK_aml_condition_c_aml_condition] FOREIGN KEY ([FK_rowid_aml_condition]) REFERENCES [dbo].[aml_condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_condition]'
GO
ALTER TABLE [dbo].[aml_condition] ADD CONSTRAINT [FK_aml_condition_aml_ruleset] FOREIGN KEY ([FK_rowid_aml_ruleset]) REFERENCES [dbo].[aml_ruleset] ([rowid])
GO
ALTER TABLE [dbo].[aml_condition] ADD CONSTRAINT [FK_aml_condition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_rule_c]'
GO
ALTER TABLE [dbo].[aml_rule_c] ADD CONSTRAINT [FK_aml_rule_c_aml_rule] FOREIGN KEY ([FK_rowid_aml_rule]) REFERENCES [dbo].[aml_rule] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_rule_log]'
GO
ALTER TABLE [dbo].[aml_rule_log] ADD CONSTRAINT [FK_aml_rule_log_aml_rule] FOREIGN KEY ([FK_rowid_aml_rule]) REFERENCES [dbo].[aml_rule] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_rule]'
GO
ALTER TABLE [dbo].[aml_rule] ADD CONSTRAINT [FK_aml_rule_aml_ruleset] FOREIGN KEY ([FK_rowid_aml_ruleset]) REFERENCES [dbo].[aml_ruleset] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_rule_log_c]'
GO
ALTER TABLE [dbo].[aml_rule_log_c] ADD CONSTRAINT [FK_aml_rule_log_c_aml_rule_log] FOREIGN KEY ([FK_rowid_aml_rule_log]) REFERENCES [dbo].[aml_rule_log] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[aml_ruleset_c]'
GO
ALTER TABLE [dbo].[aml_ruleset_c] ADD CONSTRAINT [FK_aml_ruleset_c_aml_ruleset] FOREIGN KEY ([FK_rowid_aml_ruleset]) REFERENCES [dbo].[aml_ruleset] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[appl_c]'
GO
ALTER TABLE [dbo].[appl_c] ADD CONSTRAINT [FK_appl_c_appl] FOREIGN KEY ([FK_rowid_appl]) REFERENCES [dbo].[appl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[contact]'
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_appl] FOREIGN KEY ([FK_rowid_appl]) REFERENCES [dbo].[appl] ([rowid])
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_property] FOREIGN KEY ([FK_rowid_property]) REFERENCES [dbo].[property] ([rowid])
GO
ALTER TABLE [dbo].[contact] ADD CONSTRAINT [FK_contact_development] FOREIGN KEY ([FK_rowid_development]) REFERENCES [dbo].[development] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[kyc_history]'
GO
ALTER TABLE [dbo].[kyc_history] ADD CONSTRAINT [FK_kyc_history_appl] FOREIGN KEY ([FK_rowid_appl]) REFERENCES [dbo].[appl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan_condition]'
GO
ALTER TABLE [dbo].[loan_condition] ADD CONSTRAINT [FK_loan_condition_appl] FOREIGN KEY ([FK_rowid_appl]) REFERENCES [dbo].[appl] ([rowid])
GO
ALTER TABLE [dbo].[loan_condition] ADD CONSTRAINT [FK_loan_condition_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[lsched]'
GO
ALTER TABLE [dbo].[lsched] ADD CONSTRAINT [FK_lsched_appl] FOREIGN KEY ([FK_rowid_appl]) REFERENCES [dbo].[appl] ([rowid])
GO
ALTER TABLE [dbo].[lsched] ADD CONSTRAINT [FK_lsched_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[appl_default_c]'
GO
ALTER TABLE [dbo].[appl_default_c] ADD CONSTRAINT [FK_appl_default_c_appl_default] FOREIGN KEY ([FK_rowid_appl_default]) REFERENCES [dbo].[appl_default] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[arucsouttxn]'
GO
ALTER TABLE [dbo].[arucsouttxn] ADD CONSTRAINT [FK_arucsouttxn_arucsouthdr] FOREIGN KEY ([FK_rowid_arucsouthdr]) REFERENCES [dbo].[arucsouthdr] ([rowid])
GO
ALTER TABLE [dbo].[arucsouttxn] ADD CONSTRAINT [FK_arucsouttxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[arucsouthdr]'
GO
ALTER TABLE [dbo].[arucsouthdr] ADD CONSTRAINT [FK_arucsouthdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[arucsouttxn_c]'
GO
ALTER TABLE [dbo].[arucsouttxn_c] ADD CONSTRAINT [FK_arucsouttxn_c_arucsouttxn] FOREIGN KEY ([FK_rowid_arucsouttxn]) REFERENCES [dbo].[arucsouttxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisintxn]'
GO
ALTER TABLE [dbo].[auddisintxn] ADD CONSTRAINT [FK_auddisintxn_auddisinhdr] FOREIGN KEY ([FK_rowid_auddisinhdr]) REFERENCES [dbo].[auddisinhdr] ([rowid])
GO
ALTER TABLE [dbo].[auddisintxn] ADD CONSTRAINT [FK_auddisintxn_ddiout] FOREIGN KEY ([FK_rowid_ddiout]) REFERENCES [dbo].[ddiout] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisinhdr]'
GO
ALTER TABLE [dbo].[auddisinhdr] ADD CONSTRAINT [FK_auddisinhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisouttxn]'
GO
ALTER TABLE [dbo].[auddisouttxn] ADD CONSTRAINT [FK_auddisouttxn_auddisouthdr] FOREIGN KEY ([FK_rowid_auddisouthdr]) REFERENCES [dbo].[auddisouthdr] ([rowid])
GO
ALTER TABLE [dbo].[auddisouttxn] ADD CONSTRAINT [FK_auddistxn_ddiin] FOREIGN KEY ([FK_rowid_ddiin]) REFERENCES [dbo].[ddiin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisouthdr]'
GO
ALTER TABLE [dbo].[auddisouthdr] ADD CONSTRAINT [FK_auddisouthdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisouttxn_c]'
GO
ALTER TABLE [dbo].[auddisouttxn_c] ADD CONSTRAINT [FK_auddisouttxn_c_auddisouttxn] FOREIGN KEY ([FK_rowid_auddisouttxn]) REFERENCES [dbo].[auddisouttxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisrettxn]'
GO
ALTER TABLE [dbo].[auddisrettxn] ADD CONSTRAINT [FK_auddisrettxn_auddisrethdr] FOREIGN KEY ([FK_rowid_auddisrethdr]) REFERENCES [dbo].[auddisrethdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisrethdr]'
GO
ALTER TABLE [dbo].[auddisrethdr] ADD CONSTRAINT [FK_auddisrethdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisretintxn_c]'
GO
ALTER TABLE [dbo].[auddisretintxn_c] ADD CONSTRAINT [FK_auddisretintxn_c_auddisretintxn] FOREIGN KEY ([FK_rowid_auddisretintxn]) REFERENCES [dbo].[auddisretintxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisretintxn]'
GO
ALTER TABLE [dbo].[auddisretintxn] ADD CONSTRAINT [FK_auddisretintxn_ddiin] FOREIGN KEY ([FK_rowid_ddiin]) REFERENCES [dbo].[ddiin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[auddisrettxn_c]'
GO
ALTER TABLE [dbo].[auddisrettxn_c] ADD CONSTRAINT [FK_auddisrettxn_c_auddisrettxn] FOREIGN KEY ([FK_rowid_auddisrettxn]) REFERENCES [dbo].[auddisrettxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[audit_c]'
GO
ALTER TABLE [dbo].[audit_c] ADD CONSTRAINT [FK_audit_c_audit] FOREIGN KEY ([FK_rowid_audit]) REFERENCES [dbo].[audit] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[audit]'
GO
ALTER TABLE [dbo].[audit] ADD CONSTRAINT [FK_audit_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
ALTER TABLE [dbo].[audit] ADD CONSTRAINT [FK_audit_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[audititem_c]'
GO
ALTER TABLE [dbo].[audititem_c] ADD CONSTRAINT [FK_audititem_c_audititem] FOREIGN KEY ([FK_rowid_audititem]) REFERENCES [dbo].[audititem] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[autopyin_c]'
GO
ALTER TABLE [dbo].[autopyin_c] ADD CONSTRAINT [FK_autopyin_c_autopyin] FOREIGN KEY ([FK_rowid_autopyin]) REFERENCES [dbo].[autopyin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[autopyin]'
GO
ALTER TABLE [dbo].[autopyin] ADD CONSTRAINT [FK_rowid_ibnkuser_autopyin_submitter] FOREIGN KEY ([FK_rowid_ibnkuser_submitter]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[autopyin] ADD CONSTRAINT [FK_autopyin_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[autopyin] ADD CONSTRAINT [FK_autopyin_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[autopymt_c]'
GO
ALTER TABLE [dbo].[autopymt_c] ADD CONSTRAINT [FK_autopymt_c_autopymt] FOREIGN KEY ([FK_rowid_autopymt]) REFERENCES [dbo].[autopymt] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dcouttxns]'
GO
ALTER TABLE [dbo].[dcouttxns] ADD CONSTRAINT [FK_dcouttxns_autopymt] FOREIGN KEY ([FK_rowid_autopymt]) REFERENCES [dbo].[autopymt] ([rowid])
GO
ALTER TABLE [dbo].[dcouttxns] ADD CONSTRAINT [FK_dcouttxns_bacstxnhdr] FOREIGN KEY ([FK_rowid_bacstxnhdr]) REFERENCES [dbo].[bacstxnhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsouttxn]'
GO
ALTER TABLE [dbo].[fpsouttxn] ADD CONSTRAINT [FK_fpsouttxn_autopymt] FOREIGN KEY ([FK_rowid_autopymt]) REFERENCES [dbo].[autopymt] ([rowid])
GO
ALTER TABLE [dbo].[fpsouttxn] ADD CONSTRAINT [FK_fpsouttxn_fpsouthdr] FOREIGN KEY ([FK_rowid_fpsouthdr]) REFERENCES [dbo].[fpsouthdr] ([rowid])
GO
ALTER TABLE [dbo].[fpsouttxn] ADD CONSTRAINT [FK_fpsouttxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[awacsouttxn]'
GO
ALTER TABLE [dbo].[awacsouttxn] ADD CONSTRAINT [FK_awacsouttxn_awacsouthdr] FOREIGN KEY ([FK_rowid_awacsouthdr]) REFERENCES [dbo].[awacsouthdr] ([rowid])
GO
ALTER TABLE [dbo].[awacsouttxn] ADD CONSTRAINT [FK_awacsouttxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[awacsouthdr]'
GO
ALTER TABLE [dbo].[awacsouthdr] ADD CONSTRAINT [FK_awacsouthdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[awacsouttxn_c]'
GO
ALTER TABLE [dbo].[awacsouttxn_c] ADD CONSTRAINT [FK_awacsouttxn_c_awacsouttxn] FOREIGN KEY ([FK_rowid_awacsouttxn]) REFERENCES [dbo].[awacsouttxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsacct_c]'
GO
ALTER TABLE [dbo].[bacsacct_c] ADD CONSTRAINT [FK_bacsacct_c_bacsacct] FOREIGN KEY ([FK_rowid_bacsacct]) REFERENCES [dbo].[bacsacct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsconfig_c]'
GO
ALTER TABLE [dbo].[bacsconfig_c] ADD CONSTRAINT [FK_bacsconfig_c_bacsconfig] FOREIGN KEY ([FK_rowid_bacsconfig]) REFERENCES [dbo].[bacsconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsconfig]'
GO
ALTER TABLE [dbo].[bacsconfig] ADD CONSTRAINT [FK_bacsconfig_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsinhdr_c]'
GO
ALTER TABLE [dbo].[bacsinhdr_c] ADD CONSTRAINT [FK_bacsinhdr_c_bacsinhdr] FOREIGN KEY ([FK_rowid_bacsinhdr]) REFERENCES [dbo].[bacsinhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsintxn]'
GO
ALTER TABLE [dbo].[bacsintxn] ADD CONSTRAINT [FK_bacsintxns_bacsinhdr] FOREIGN KEY ([FK_rowid_bacsinhdr]) REFERENCES [dbo].[bacsinhdr] ([rowid])
GO
ALTER TABLE [dbo].[bacsintxn] ADD CONSTRAINT [FK_bacsintxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
ALTER TABLE [dbo].[bacsintxn] ADD CONSTRAINT [FK_bacsintxn_ddiout] FOREIGN KEY ([FK_rowid_ddiout]) REFERENCES [dbo].[ddiout] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsinhdr]'
GO
ALTER TABLE [dbo].[bacsinhdr] ADD CONSTRAINT [FK_bacsinhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacsintxn_c]'
GO
ALTER TABLE [dbo].[bacsintxn_c] ADD CONSTRAINT [FK_bacsintxn_c_bacsintxn] FOREIGN KEY ([FK_rowid_bacsintxn]) REFERENCES [dbo].[bacsintxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bacssort_c]'
GO
ALTER TABLE [dbo].[bacssort_c] ADD CONSTRAINT [FK_bacssort_c_bacssort] FOREIGN KEY ([FK_rowid_bacssort]) REFERENCES [dbo].[bacssort] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddintxns]'
GO
ALTER TABLE [dbo].[ddintxns] ADD CONSTRAINT [FK_ddintxns_bacstxnhdr] FOREIGN KEY ([FK_rowid_bacstxnhdr]) REFERENCES [dbo].[bacstxnhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bank_c]'
GO
ALTER TABLE [dbo].[bank_c] ADD CONSTRAINT [FK_bank_c_bank] FOREIGN KEY ([FK_rowid_bank]) REFERENCES [dbo].[bank] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[base_c]'
GO
ALTER TABLE [dbo].[base_c] ADD CONSTRAINT [FK_base_c_base] FOREIGN KEY ([FK_rowid_base]) REFERENCES [dbo].[base] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[baserate]'
GO
ALTER TABLE [dbo].[baserate] ADD CONSTRAINT [FK_baserate_base] FOREIGN KEY ([FK_rowno_base]) REFERENCES [dbo].[base] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodbase]'
GO
ALTER TABLE [dbo].[prodbase] ADD CONSTRAINT [FK_prodbase_base] FOREIGN KEY ([FK_rowid_base]) REFERENCES [dbo].[base] ([rowid])
GO
ALTER TABLE [dbo].[prodbase] ADD CONSTRAINT [FK_prodbase_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[baserate_c]'
GO
ALTER TABLE [dbo].[baserate_c] ADD CONSTRAINT [FK_baserate_c_baserate] FOREIGN KEY ([FK_rowid_baserate]) REFERENCES [dbo].[baserate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[batch_c]'
GO
ALTER TABLE [dbo].[batch_c] ADD CONSTRAINT [FK_batch_c_batch] FOREIGN KEY ([FK_rowid_batch]) REFERENCES [dbo].[batch] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[batchtxns]'
GO
ALTER TABLE [dbo].[batchtxns] ADD CONSTRAINT [FK_rowid_batch] FOREIGN KEY ([FK_rowid_batch]) REFERENCES [dbo].[batch] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[batchtxns_c]'
GO
ALTER TABLE [dbo].[batchtxns_c] ADD CONSTRAINT [FK_batchtxns_c_batchtxns] FOREIGN KEY ([FK_rowid_batchtxns]) REFERENCES [dbo].[batchtxns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[book_c]'
GO
ALTER TABLE [dbo].[book_c] ADD CONSTRAINT [FK_book_c_book] FOREIGN KEY ([FK_rowid_book]) REFERENCES [dbo].[book] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[bookdef_c]'
GO
ALTER TABLE [dbo].[bookdef_c] ADD CONSTRAINT [FK_bookdef_c_bookdef] FOREIGN KEY ([FK_rowid_bookdef]) REFERENCES [dbo].[bookdef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodbook]'
GO
ALTER TABLE [dbo].[prodbook] ADD CONSTRAINT [FK_prodbook_bookdef] FOREIGN KEY ([FK_rowid_bookdef]) REFERENCES [dbo].[bookdef] ([rowid])
GO
ALTER TABLE [dbo].[prodbook] ADD CONSTRAINT [FK_prodbook_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[brokerfirm_c]'
GO
ALTER TABLE [dbo].[brokerfirm_c] ADD CONSTRAINT [FK_brokerfirm_c_brokerfirm] FOREIGN KEY ([FK_rowid_brokerfirm]) REFERENCES [dbo].[brokerfirm] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[brokerfirm]'
GO
ALTER TABLE [dbo].[brokerfirm] ADD CONSTRAINT [FK_brokerfirm_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[businessarea_c]'
GO
ALTER TABLE [dbo].[businessarea_c] ADD CONSTRAINT [FK_businessarea_c_businessarea] FOREIGN KEY ([FK_rowid_businessarea]) REFERENCES [dbo].[businessarea] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[call_c]'
GO
ALTER TABLE [dbo].[call_c] ADD CONSTRAINT [FK_call_c_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[call_s]'
GO
ALTER TABLE [dbo].[call_s] ADD CONSTRAINT [FK_call_s_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[call_prenotification]'
GO
ALTER TABLE [dbo].[call_prenotification] ADD CONSTRAINT [FK_call_prenotification_stmt] FOREIGN KEY ([FK_rowid_stmt]) REFERENCES [dbo].[stmt] ([rowid])
ALTER TABLE [dbo].[call_prenotification] ADD CONSTRAINT [FK_call_prenotification_stmthdr] FOREIGN KEY ([FK_rowid_stmthdr]) REFERENCES [dbo].[stmthdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[encashment]'
GO
ALTER TABLE [dbo].[encashment] ADD CONSTRAINT [FK_encashment_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[payment_transmission]'
GO
ALTER TABLE [dbo].[payment_transmission] ADD CONSTRAINT [FK_payment_transmission_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[sigdetail]'
GO
ALTER TABLE [dbo].[sigdetail] ADD CONSTRAINT [FK_sigdetail_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
ALTER TABLE [dbo].[sigdetail] ADD CONSTRAINT [FK_sigdetail_term] FOREIGN KEY ([FK_rowid_term]) REFERENCES [dbo].[term] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[tfrbank]'
GO
ALTER TABLE [dbo].[tfrbank] ADD CONSTRAINT [FK_tfrbank_call] FOREIGN KEY ([FK_rowid_call]) REFERENCES [dbo].[call] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[calldef_c]'
GO
ALTER TABLE [dbo].[calldef_c] ADD CONSTRAINT [FK_calldef_c_calldef] FOREIGN KEY ([FK_rowid_calldef]) REFERENCES [dbo].[calldef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[calldef]'
GO
ALTER TABLE [dbo].[calldef] ADD CONSTRAINT [FK_calldef_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[card_c]'
GO
ALTER TABLE [dbo].[card_c] ADD CONSTRAINT [FK_card_c_card] FOREIGN KEY ([FK_rowid_card]) REFERENCES [dbo].[card] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[carddisburse]'
GO
ALTER TABLE [dbo].[carddisburse] ADD CONSTRAINT [FK_carddisburse_card] FOREIGN KEY ([FK_rowid_card]) REFERENCES [dbo].[card] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[cardconfig_c]'
GO
ALTER TABLE [dbo].[cardconfig_c] ADD CONSTRAINT [FK_cardconfig_c_cardconfig] FOREIGN KEY ([FK_rowid_cardconfig]) REFERENCES [dbo].[cardconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[cardcontrol_c]'
GO
ALTER TABLE [dbo].[cardcontrol_c] ADD CONSTRAINT [FK_cardcontrol_c_cardcontrol] FOREIGN KEY ([FK_rowid_cardcontrol]) REFERENCES [dbo].[cardcontrol] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[carddef_c]'
GO
ALTER TABLE [dbo].[carddef_c] ADD CONSTRAINT [FK_carddef_c_carddef] FOREIGN KEY ([FK_rowid_carddef]) REFERENCES [dbo].[carddef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodcarddef]'
GO
ALTER TABLE [dbo].[prodcarddef] ADD CONSTRAINT [FK_prodcarddef_carddef] FOREIGN KEY ([FK_rowid_carddef]) REFERENCES [dbo].[carddef] ([rowid])
GO
ALTER TABLE [dbo].[prodcarddef] ADD CONSTRAINT [FK_prodcarddef_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[carddisburse_c]'
GO
ALTER TABLE [dbo].[carddisburse_c] ADD CONSTRAINT [FK_carddisburse_c_carddisburse] FOREIGN KEY ([FK_rowid_carddisburse]) REFERENCES [dbo].[carddisburse] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[cardholder_c]'
GO
ALTER TABLE [dbo].[cardholder_c] ADD CONSTRAINT [FK_cardholder_c_cardholder] FOREIGN KEY ([FK_rowid_cardholder]) REFERENCES [dbo].[cardholder] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[cardholder]'
GO
ALTER TABLE [dbo].[cardholder] ADD CONSTRAINT [FK_cardholder_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ccy_c]'
GO
ALTER TABLE [dbo].[ccy_c] ADD CONSTRAINT [FK_ccy_c_ccy] FOREIGN KEY ([FK_rowid_ccy]) REFERENCES [dbo].[ccy] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mminterestmargins]'
GO
ALTER TABLE [dbo].[mminterestmargins] ADD CONSTRAINT [FK_mminterestmargins_ccy] FOREIGN KEY ([FK_rowid_ccy]) REFERENCES [dbo].[ccy] ([rowid])
GO
ALTER TABLE [dbo].[mminterestmargins] ADD CONSTRAINT [FK_mminterestmargins_mmperiod] FOREIGN KEY ([FK_rowid_mmperiod]) REFERENCES [dbo].[mmperiod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mmrate]'
GO
ALTER TABLE [dbo].[mmrate] ADD CONSTRAINT [FK_mmrate_ccy] FOREIGN KEY ([FK_rowid_ccy]) REFERENCES [dbo].[ccy] ([rowid])
GO
ALTER TABLE [dbo].[mmrate] ADD CONSTRAINT [FK_mmrate_mmperiod] FOREIGN KEY ([FK_rowid_mmperiod]) REFERENCES [dbo].[mmperiod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[charge_c]'
GO
ALTER TABLE [dbo].[charge_c] ADD CONSTRAINT [FK_charge_c_charge] FOREIGN KEY ([FK_rowid_charge]) REFERENCES [dbo].[charge] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chgtype_c]'
GO
ALTER TABLE [dbo].[chgtype_c] ADD CONSTRAINT [FK_chgtype_c_chgtype] FOREIGN KEY ([FK_rowid_chgtype]) REFERENCES [dbo].[chgtype] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqinhdr_c]'
GO
ALTER TABLE [dbo].[chqinhdr_c] ADD CONSTRAINT [FK_chqinhdr_c_chqinhdr] FOREIGN KEY ([FK_rowid_chqinhdr]) REFERENCES [dbo].[chqinhdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqintxn]'
GO
ALTER TABLE [dbo].[chqintxn] ADD CONSTRAINT [FK_chqintxn_chqinhdr] FOREIGN KEY ([FK_rowid_chqinhdr]) REFERENCES [dbo].[chqinhdr] ([rowid])
GO
ALTER TABLE [dbo].[chqintxn] ADD CONSTRAINT [FK_chqintxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqinhdr]'
GO
ALTER TABLE [dbo].[chqinhdr] ADD CONSTRAINT [FK_chqinhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqintxn_c]'
GO
ALTER TABLE [dbo].[chqintxn_c] ADD CONSTRAINT [FK_chqintxn_c_chqintxn] FOREIGN KEY ([FK_rowid_chqintxn]) REFERENCES [dbo].[chqintxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqrevtxns]'
GO
ALTER TABLE [dbo].[chqrevtxns] ADD CONSTRAINT [FK_chqrevtxns_chqrevhdr] FOREIGN KEY ([FK_rowid_chqrevhdr]) REFERENCES [dbo].[chqrevhdr] ([rowid])
GO
ALTER TABLE [dbo].[chqrevtxns] ADD CONSTRAINT [FK_chqrevtxns_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqrevhdr]'
GO
ALTER TABLE [dbo].[chqrevhdr] ADD CONSTRAINT [FK_chqrevhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[chqrevtxns_c]'
GO
ALTER TABLE [dbo].[chqrevtxns_c] ADD CONSTRAINT [FK_chqrevtxns_c_chqrevtxns] FOREIGN KEY ([FK_rowid_chqrevtxns]) REFERENCES [dbo].[chqrevtxns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[coded_action_c]'
GO
ALTER TABLE [dbo].[coded_action_c] ADD CONSTRAINT [FK_coded_action_c_coded_action] FOREIGN KEY ([FK_rowid_coded_action]) REFERENCES [dbo].[coded_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[coded_template]'
GO
ALTER TABLE [dbo].[coded_template] ADD CONSTRAINT [FK_coded_template_coded_action] FOREIGN KEY ([FK_rowid_coded_action]) REFERENCES [dbo].[coded_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[condition_c]'
GO
ALTER TABLE [dbo].[condition_c] ADD CONSTRAINT [FK_condition_c_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_condition]'
GO
ALTER TABLE [dbo].[dataselector_condition] ADD CONSTRAINT [FK_dataselector_condition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[dataselector_condition] ADD CONSTRAINT [FK_dataselector_condition_dataselector] FOREIGN KEY ([FK_rowid_dataselector]) REFERENCES [dbo].[dataselector] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[eventdef_condition]'
GO
ALTER TABLE [dbo].[eventdef_condition] ADD CONSTRAINT [FK_eventdef_condition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[eventdef_condition] ADD CONSTRAINT [FK_eventdef_condition_eventdef] FOREIGN KEY ([FK_rowid_eventdef]) REFERENCES [dbo].[eventdef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_actioncondition]'
GO
ALTER TABLE [dbo].[work_actioncondition] ADD CONSTRAINT [FK_work_actioncondition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[work_actioncondition] ADD CONSTRAINT [FK_work_actioncondition_work_action] FOREIGN KEY ([FK_rowid_work_action]) REFERENCES [dbo].[work_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_decisioncondition]'
GO
ALTER TABLE [dbo].[work_decisioncondition] ADD CONSTRAINT [FK_work_decisioncondition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[work_decisioncondition] ADD CONSTRAINT [FK_work_decisioncondition_work_decision] FOREIGN KEY ([FK_rowid_work_decision]) REFERENCES [dbo].[work_decision] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_manualdocumentcondition]'
GO
ALTER TABLE [dbo].[work_manualdocumentcondition] ADD CONSTRAINT [FK_work_manualdocumentcondition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[work_manualdocumentcondition] ADD CONSTRAINT [FK_work_manualdocumentcondition_work_manualdocumentaction] FOREIGN KEY ([FK_rowid_work_manualdocumentaction]) REFERENCES [dbo].[work_manualdocumentaction] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_actioncondition]'
GO
ALTER TABLE [dbo].[dataselector_actioncondition] ADD CONSTRAINT [FK_work_originatecondition_condition] FOREIGN KEY ([FK_rowid_condition]) REFERENCES [dbo].[condition] ([rowid])
GO
ALTER TABLE [dbo].[dataselector_actioncondition] ADD CONSTRAINT [FK_work_originatecondition_work_originate] FOREIGN KEY ([FK_rowid_dataselector_action]) REFERENCES [dbo].[dataselector_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[config_c]'
GO
ALTER TABLE [dbo].[config_c] ADD CONSTRAINT [FK_config_c_config] FOREIGN KEY ([FK_rowid_config]) REFERENCES [dbo].[config] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[contact_c]'
GO
ALTER TABLE [dbo].[contact_c] ADD CONSTRAINT [FK_contact_c_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmtrecipient]'
GO
ALTER TABLE [dbo].[stmtrecipient] ADD CONSTRAINT [FK_stmtrecipient_contact] FOREIGN KEY ([FK_rowid_contact]) REFERENCES [dbo].[contact] ([rowid])
GO
ALTER TABLE [dbo].[stmtrecipient] ADD CONSTRAINT [FK_stmtrecipient_stmthdr] FOREIGN KEY ([FK_rowid_stmthdr]) REFERENCES [dbo].[stmthdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[corppay_c]'
GO
ALTER TABLE [dbo].[corppay_c] ADD CONSTRAINT [FK_corppay_c_corppay] FOREIGN KEY ([FK_rowid_corppay]) REFERENCES [dbo].[corppay] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[corppaydisburse]'
GO
ALTER TABLE [dbo].[corppaydisburse] ADD CONSTRAINT [FK_corppaydisburse_corppay] FOREIGN KEY ([FK_rowid_corppay]) REFERENCES [dbo].[corppay] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[corppaydisburse_c]'
GO
ALTER TABLE [dbo].[corppaydisburse_c] ADD CONSTRAINT [FK_corppaydisburse_c_corppaydisburse] FOREIGN KEY ([FK_rowid_corppaydisburse]) REFERENCES [dbo].[corppaydisburse] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[credentials_c]'
GO
ALTER TABLE [dbo].[credentials_c] ADD CONSTRAINT [FK_credentials_c_credentials] FOREIGN KEY ([FK_rowid_credentials]) REFERENCES [dbo].[credentials] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ctry_c]'
GO
ALTER TABLE [dbo].[ctry_c] ADD CONSTRAINT [FK_ctry_c_ctry] FOREIGN KEY ([FK_rowid_ctry]) REFERENCES [dbo].[ctry] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlsanctioned]'
GO
ALTER TABLE [dbo].[mlsanctioned] ADD CONSTRAINT [FK_mlsanctioned_ctry] FOREIGN KEY ([FK_rowid_ctry]) REFERENCES [dbo].[ctry] ([rowid])
GO
ALTER TABLE [dbo].[mlsanctioned] ADD CONSTRAINT [FK_mlsanctioned_mlrule] FOREIGN KEY ([FK_rowid_mlrule]) REFERENCES [dbo].[mlrule] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[territory]'
GO
ALTER TABLE [dbo].[territory] ADD CONSTRAINT [FK_territory_ctry] FOREIGN KEY ([FK_rowid_ctry]) REFERENCES [dbo].[ctry] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_action]'
GO
ALTER TABLE [dbo].[dataselector_action] ADD CONSTRAINT [FK_dataselector_action_dataselector] FOREIGN KEY ([FK_rowid_dataselector]) REFERENCES [dbo].[dataselector] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_c]'
GO
ALTER TABLE [dbo].[dataselector_c] ADD CONSTRAINT [FK_dataselector_c_dataselector] FOREIGN KEY ([FK_rowid_dataselector]) REFERENCES [dbo].[dataselector] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dataselector_action_c]'
GO
ALTER TABLE [dbo].[dataselector_action_c] ADD CONSTRAINT [FK_work_originate_c_work_originate] FOREIGN KEY ([FK_rowid_dataselector_action]) REFERENCES [dbo].[dataselector_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddiin]'
GO
ALTER TABLE [dbo].[ddiin] ADD CONSTRAINT [FK_DDIIN_extbank] FOREIGN KEY ([FK_rowid_extacct]) REFERENCES [dbo].[extacct] ([rowid])
GO
ALTER TABLE [dbo].[ddiin] ADD CONSTRAINT [FK_DDIIN_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[ddiin] ADD CONSTRAINT [FK_DDIIN_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddiout_c]'
GO
ALTER TABLE [dbo].[ddiout_c] ADD CONSTRAINT [FK_ddiout_c_ddiout] FOREIGN KEY ([FK_rowid_ddiout]) REFERENCES [dbo].[ddiout] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddorigin_acct]'
GO
ALTER TABLE [dbo].[ddorigin_acct] ADD CONSTRAINT [FK_ddorigin_acct_ddorigin] FOREIGN KEY ([FK_rowid_ddorigin]) REFERENCES [dbo].[ddorigin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddorigin_c]'
GO
ALTER TABLE [dbo].[ddorigin_c] ADD CONSTRAINT [FK_ddorigin_c_ddorigin] FOREIGN KEY ([FK_rowid_ddorigin]) REFERENCES [dbo].[ddorigin] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddorigin_acct_c]'
GO
ALTER TABLE [dbo].[ddorigin_acct_c] ADD CONSTRAINT [FK_ddorigin_acct_c_ddorigin_acct] FOREIGN KEY ([FK_rowid_ddorigin_acct]) REFERENCES [dbo].[ddorigin_acct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddrevtxns]'
GO
ALTER TABLE [dbo].[ddrevtxns] ADD CONSTRAINT [FK_ddrevtxns_ddrevhdr] FOREIGN KEY ([FK_rowid_ddrevhdr]) REFERENCES [dbo].[ddrevhdr] ([rowid])
GO
ALTER TABLE [dbo].[ddrevtxns] ADD CONSTRAINT [FK_ddrevtxns_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddrevhdr]'
GO
ALTER TABLE [dbo].[ddrevhdr] ADD CONSTRAINT [FK_ddrevhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ddrevtxns_c]'
GO
ALTER TABLE [dbo].[ddrevtxns_c] ADD CONSTRAINT [FK_ddrevtxns_c_ddrevtxns] FOREIGN KEY ([FK_rowid_ddrevtxns]) REFERENCES [dbo].[ddrevtxns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[deal]'
GO
ALTER TABLE [dbo].[deal] ADD CONSTRAINT [FK_deal_trea] FOREIGN KEY ([FK_rowid_trea]) REFERENCES [dbo].[trea] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[development_c]'
GO
ALTER TABLE [dbo].[development_c] ADD CONSTRAINT [FK_development_c_development] FOREIGN KEY ([FK_rowid_development]) REFERENCES [dbo].[development] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[insurance]'
GO
ALTER TABLE [dbo].[insurance] ADD CONSTRAINT [FK_insurance_development] FOREIGN KEY ([FK_rowid_development]) REFERENCES [dbo].[development] ([rowid])
GO
ALTER TABLE [dbo].[insurance] ADD CONSTRAINT [FK_insurance_property] FOREIGN KEY ([FK_rowid_property]) REFERENCES [dbo].[property] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[plot]'
GO
ALTER TABLE [dbo].[plot] ADD CONSTRAINT [FK_plot_development] FOREIGN KEY ([FK_rowid_development]) REFERENCES [dbo].[development] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[development]'
GO
ALTER TABLE [dbo].[development] ADD CONSTRAINT [FK_development_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dm_index_c]'
GO
ALTER TABLE [dbo].[dm_index_c] ADD CONSTRAINT [FK_dm_index_c_dm_index] FOREIGN KEY ([FK_rowid_dm_index]) REFERENCES [dbo].[dm_index] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[dm_index]'
GO
ALTER TABLE [dbo].[dm_index] ADD CONSTRAINT [FK_dm_index_documentconfig] FOREIGN KEY ([FK_rowid_documentconfig]) REFERENCES [dbo].[documentconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[document_image]'
GO
ALTER TABLE [dbo].[document_image] ADD CONSTRAINT [FK_document_image_document] FOREIGN KEY ([FK_rowid_document]) REFERENCES [dbo].[document] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[document]'
GO
ALTER TABLE [dbo].[document] ADD CONSTRAINT [FK_document_work_item] FOREIGN KEY ([FK_rowid_work_item]) REFERENCES [dbo].[work_item] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[documentconfig_c]'
GO
ALTER TABLE [dbo].[documentconfig_c] ADD CONSTRAINT [FK_documentconfig_c_documentconfig] FOREIGN KEY ([FK_rowid_documentconfig]) REFERENCES [dbo].[documentconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[empl_c]'
GO
ALTER TABLE [dbo].[empl_c] ADD CONSTRAINT [FK_empl_c_empl] FOREIGN KEY ([FK_rowid_empl]) REFERENCES [dbo].[empl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[emplmodel]'
GO
ALTER TABLE [dbo].[emplmodel] ADD CONSTRAINT [FK_emplmodel_empl] FOREIGN KEY ([FK_rowid_empl]) REFERENCES [dbo].[empl] ([rowid])
GO
ALTER TABLE [dbo].[emplmodel] ADD CONSTRAINT [FK_emplmodel_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[post]'
GO
ALTER TABLE [dbo].[post] ADD CONSTRAINT [FK_post_empl] FOREIGN KEY ([FK_rowid_empl]) REFERENCES [dbo].[empl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privempl]'
GO
ALTER TABLE [dbo].[privempl] ADD CONSTRAINT [FK_privempl_empl] FOREIGN KEY ([FK_rowid_empl]) REFERENCES [dbo].[empl] ([rowid])
GO
ALTER TABLE [dbo].[privempl] ADD CONSTRAINT [FK_privempl_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[emplconfig_c]'
GO
ALTER TABLE [dbo].[emplconfig_c] ADD CONSTRAINT [FK_emplconfig_c_emplconfig] FOREIGN KEY ([FK_rowid_emplconfig]) REFERENCES [dbo].[emplconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[emplmodel_c]'
GO
ALTER TABLE [dbo].[emplmodel_c] ADD CONSTRAINT [FK_emplmodel_c_emplmodel] FOREIGN KEY ([FK_rowid_emplmodel]) REFERENCES [dbo].[emplmodel] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[encashment_c]'
GO
ALTER TABLE [dbo].[encashment_c] ADD CONSTRAINT [FK_encashment_c_encashment] FOREIGN KEY ([FK_rowid_encashment]) REFERENCES [dbo].[encashment] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[eventdef_c]'
GO
ALTER TABLE [dbo].[eventdef_c] ADD CONSTRAINT [FK_eventdef_c_eventdef] FOREIGN KEY ([FK_rowid_eventdef]) REFERENCES [dbo].[eventdef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[eventdef]'
GO
ALTER TABLE [dbo].[eventdef] ADD CONSTRAINT [FK_eventdef_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[exch_c]'
GO
ALTER TABLE [dbo].[exch_c] ADD CONSTRAINT [FK_exch_c_exch] FOREIGN KEY ([FK_rowid_exch]) REFERENCES [dbo].[exch] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[exchrate]'
GO
ALTER TABLE [dbo].[exchrate] ADD CONSTRAINT [FK_exchrate_exch] FOREIGN KEY ([FK_rowid_exch]) REFERENCES [dbo].[exch] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[exchrate_c]'
GO
ALTER TABLE [dbo].[exchrate_c] ADD CONSTRAINT [FK_exchrate_c_exchrate] FOREIGN KEY ([FK_rowid_exchrate]) REFERENCES [dbo].[exchrate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[exposure_c]'
GO
ALTER TABLE [dbo].[exposure_c] ADD CONSTRAINT [FK_exposure_c_exposure] FOREIGN KEY ([FK_rowid_exposure]) REFERENCES [dbo].[exposure] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[extacct_c]'
GO
ALTER TABLE [dbo].[extacct_c] ADD CONSTRAINT [FK_extacct_c_extacct] FOREIGN KEY ([FK_rowid_extacct]) REFERENCES [dbo].[extacct] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loanadv]'
GO
ALTER TABLE [dbo].[loanadv] ADD CONSTRAINT [FK_loanadv_extacct] FOREIGN KEY ([FK_rowid_extacct]) REFERENCES [dbo].[extacct] ([rowid])
GO
ALTER TABLE [dbo].[loanadv] ADD CONSTRAINT [FK_advance_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
ALTER TABLE [dbo].[loanadv] ADD CONSTRAINT [FK_loanadv_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[extacct]'
GO
ALTER TABLE [dbo].[extacct] ADD CONSTRAINT [FK_extacct_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[extacct] ADD CONSTRAINT [FK_extbank_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fee_c]'
GO
ALTER TABLE [dbo].[fee_c] ADD CONSTRAINT [FK_fee_c_fee] FOREIGN KEY ([FK_rowid_fee]) REFERENCES [dbo].[fee] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[feeoverride_c]'
GO
ALTER TABLE [dbo].[feeoverride_c] ADD CONSTRAINT [FK_feeoverride_c_feeoverride] FOREIGN KEY ([FK_rowid_feeoverride]) REFERENCES [dbo].[feeoverride] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[formula_c]'
GO
ALTER TABLE [dbo].[formula_c] ADD CONSTRAINT [FK_formula_c_formula] FOREIGN KEY ([FK_rowid_formula]) REFERENCES [dbo].[formula] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsintxn]'
GO
ALTER TABLE [dbo].[fpsintxn] ADD CONSTRAINT [FK_fpsintxn_fpsinhdr] FOREIGN KEY ([FK_rowid_fpsinhdr]) REFERENCES [dbo].[fpsinhdr] ([rowid])
GO
ALTER TABLE [dbo].[fpsintxn] ADD CONSTRAINT [FK_fpsintxn_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsinhdr]'
GO
ALTER TABLE [dbo].[fpsinhdr] ADD CONSTRAINT [FK_fpsinhdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsintxn_c]'
GO
ALTER TABLE [dbo].[fpsintxn_c] ADD CONSTRAINT [FK_fpsintxn_c_fpsintxn] FOREIGN KEY ([FK_rowid_fpsintxn]) REFERENCES [dbo].[fpsintxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsouthdr]'
GO
ALTER TABLE [dbo].[fpsouthdr] ADD CONSTRAINT [FK_fpsouthdr_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[fpsouttxn_c]'
GO
ALTER TABLE [dbo].[fpsouttxn_c] ADD CONSTRAINT [FK_fpsouttxn_c_fpsouttxn] FOREIGN KEY ([FK_rowid_fpsouttxn]) REFERENCES [dbo].[fpsouttxn] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[gl_c]'
GO
ALTER TABLE [dbo].[gl_c] ADD CONSTRAINT [FK_gl_c_gl] FOREIGN KEY ([FK_rowid_gl]) REFERENCES [dbo].[gl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[hols_c]'
GO
ALTER TABLE [dbo].[hols_c] ADD CONSTRAINT [FK_hols_c_hols] FOREIGN KEY ([FK_rowid_hols]) REFERENCES [dbo].[hols] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[hols]'
GO
ALTER TABLE [dbo].[hols] ADD CONSTRAINT [FK_hols_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnk_payment_limit_c]'
GO
ALTER TABLE [dbo].[ibnk_payment_limit_c] ADD CONSTRAINT [FK_ibnk_payment_limit_c_ibnk_payment_limit] FOREIGN KEY ([FK_rowid_ibnk_payment_limit]) REFERENCES [dbo].[ibnk_payment_limit] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnk_payment_limit]'
GO
ALTER TABLE [dbo].[ibnk_payment_limit] ADD CONSTRAINT [FK_ibnk_payment_limit_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser_authority1]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[ibnk_payment_limit] ADD CONSTRAINT [FK_ibnk_payment_limit_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkaccountblock_c]'
GO
ALTER TABLE [dbo].[ibnkaccountblock_c] ADD CONSTRAINT [FK_ibnkaccountblock_c_ibnkaccountblock] FOREIGN KEY ([FK_rowid_ibnkaccountblock]) REFERENCES [dbo].[ibnkaccountblock] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkaccountblock]'
GO
ALTER TABLE [dbo].[ibnkaccountblock] ADD CONSTRAINT [FK_ibnkaccountblock_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkbrowserretirement]'
GO
ALTER TABLE [dbo].[ibnkbrowserretirement] ADD CONSTRAINT [FK_ibnkbrowserretirement_ibnkconfig] FOREIGN KEY ([FK_rowid_ibnkconfig]) REFERENCES [dbo].[ibnkconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkconfig_c]'
GO
ALTER TABLE [dbo].[ibnkconfig_c] ADD CONSTRAINT [FK_ibnkconfig_c_ibnkconfig] FOREIGN KEY ([FK_rowid_ibnkconfig]) REFERENCES [dbo].[ibnkconfig] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnklog_error]'
GO
ALTER TABLE [dbo].[ibnklog_error] ADD CONSTRAINT [FK_ibnklog_error_ibnklog] FOREIGN KEY ([FK_rowid_ibnklog]) REFERENCES [dbo].[ibnklog] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkprevpasswords]'
GO
ALTER TABLE [dbo].[ibnkprevpasswords] ADD CONSTRAINT [FK_ibnkprevpasswords_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkprevusernames]'
GO
ALTER TABLE [dbo].[ibnkprevusernames] ADD CONSTRAINT [FK_ibnkprevusernames_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txnsibnkuser]'
GO
ALTER TABLE [dbo].[txnsibnkuser] ADD CONSTRAINT [FK_txnsibnkuser_ibnktxns] FOREIGN KEY ([FK_rowid_ibnktxns]) REFERENCES [dbo].[ibnktxns] ([rowid])
GO
ALTER TABLE [dbo].[txnsibnkuser] ADD CONSTRAINT [FK_txnsibnkuser_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[txnsibnkuser] ADD CONSTRAINT [FK_txnsibnkuser_txns1] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnktxns]'
GO
ALTER TABLE [dbo].[ibnktxns] ADD CONSTRAINT [FK_rowid_ibnkuser_submitter] FOREIGN KEY ([FK_rowid_ibnkuser_submitter]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuact_c]'
GO
ALTER TABLE [dbo].[ibnkuact_c] ADD CONSTRAINT [FK_ibnkuact_c_ibnkuact] FOREIGN KEY ([FK_rowid_ibnkuact]) REFERENCES [dbo].[ibnkuact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuact]'
GO
ALTER TABLE [dbo].[ibnkuact] ADD CONSTRAINT [FK_ibnkuact_ibnkugrp] FOREIGN KEY ([FK_rowid_ibnkugrp]) REFERENCES [dbo].[ibnkugrp] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkugrp_c]'
GO
ALTER TABLE [dbo].[ibnkugrp_c] ADD CONSTRAINT [FK_ibnkugrp_c_ibnkugrp] FOREIGN KEY ([FK_rowid_ibnkugrp]) REFERENCES [dbo].[ibnkugrp] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkugrp]'
GO
ALTER TABLE [dbo].[ibnkugrp] ADD CONSTRAINT [FK_ibnkugrp_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuser_c]'
GO
ALTER TABLE [dbo].[ibnkuser_c] ADD CONSTRAINT [FK_ibnkuser_c_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuser_search]'
GO
ALTER TABLE [dbo].[ibnkuser_search] ADD CONSTRAINT [FK_ibnkuser_search_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[ibnkuser_search] ADD CONSTRAINT [FK_ibnkuser_search_ibnkuser_format] FOREIGN KEY ([FK_rowid_ibnkuser_format]) REFERENCES [dbo].[ibnkuser_format] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuser_session]'
GO
ALTER TABLE [dbo].[ibnkuser_session] ADD CONSTRAINT [FK_ibnkuser_session_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuser_format]'
GO
ALTER TABLE [dbo].[ibnkuser_format] ADD CONSTRAINT [FK_rowid_ibnkuser] FOREIGN KEY ([FK_rowid_ibnkuser]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txnsextra]'
GO
ALTER TABLE [dbo].[txnsextra] ADD CONSTRAINT [FK_rowid_ibnkuser_txnsextra_submitter] FOREIGN KEY ([FK_rowid_ibnkuser_submitter]) REFERENCES [dbo].[ibnkuser] ([rowid])
GO
ALTER TABLE [dbo].[txnsextra] ADD CONSTRAINT [FK_txnsextra_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ibnkuser]'
GO
ALTER TABLE [dbo].[ibnkuser] ADD CONSTRAINT [FK_ibnkuser_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
ALTER TABLE [dbo].[ibnkuser] ADD CONSTRAINT [FK_ibnkuser_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[instrument_c]'
GO
ALTER TABLE [dbo].[instrument_c] ADD CONSTRAINT [FK_instrument_c_instrument] FOREIGN KEY ([FK_rowid_instrument]) REFERENCES [dbo].[instrument] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[instrument]'
GO
ALTER TABLE [dbo].[instrument] ADD CONSTRAINT [FK_instrument_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[insurance_c]'
GO
ALTER TABLE [dbo].[insurance_c] ADD CONSTRAINT [FK_insurance_c_insurance] FOREIGN KEY ([FK_rowid_insurance]) REFERENCES [dbo].[insurance] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ivr_channel]'
GO
ALTER TABLE [dbo].[ivr_channel] ADD CONSTRAINT [FK_ivr_channel_ivr_machine] FOREIGN KEY ([FK_rowid_ivr_machine]) REFERENCES [dbo].[ivr_machine] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ledger_c]'
GO
ALTER TABLE [dbo].[ledger_c] ADD CONSTRAINT [FK_ledger_c_ledger] FOREIGN KEY ([FK_rowid_ledger]) REFERENCES [dbo].[ledger] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[level_c]'
GO
ALTER TABLE [dbo].[level_c] ADD CONSTRAINT [FK_level_c_level] FOREIGN KEY ([FK_rowid_level]) REFERENCES [dbo].[level] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[limit_c]'
GO
ALTER TABLE [dbo].[limit_c] ADD CONSTRAINT [FK_limits_c_limits] FOREIGN KEY ([FK_rowid_limit]) REFERENCES [dbo].[limit] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privlimit]'
GO
ALTER TABLE [dbo].[privlimit] ADD CONSTRAINT [FK_privlimits_limits] FOREIGN KEY ([FK_rowid_limit]) REFERENCES [dbo].[limit] ([rowid])
GO
ALTER TABLE [dbo].[privlimit] ADD CONSTRAINT [FK_privlimits_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan_c]'
GO
ALTER TABLE [dbo].[loan_c] ADD CONSTRAINT [FK_loan_c_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan_s]'
GO
ALTER TABLE [dbo].[loan_s] ADD CONSTRAINT [FK_loan_s_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loanred]'
GO
ALTER TABLE [dbo].[loanred] ADD CONSTRAINT [FK_loanred_loan] FOREIGN KEY ([FK_rowid_loan]) REFERENCES [dbo].[loan] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loan_condition_c]'
GO
ALTER TABLE [dbo].[loan_condition_c] ADD CONSTRAINT [FK_loan_condition_c_loan_condition] FOREIGN KEY ([FK_rowid_loan_condition]) REFERENCES [dbo].[loan_condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loanadv_c]'
GO
ALTER TABLE [dbo].[loanadv_c] ADD CONSTRAINT [FK_loanadv_c_loanadv] FOREIGN KEY ([FK_rowid_loanadv]) REFERENCES [dbo].[loanadv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loandef_c]'
GO
ALTER TABLE [dbo].[loandef_c] ADD CONSTRAINT [FK_loandef_c_loandef] FOREIGN KEY ([FK_rowid_loandef]) REFERENCES [dbo].[loandef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loandef]'
GO
ALTER TABLE [dbo].[loandef] ADD CONSTRAINT [FK_loandef_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loanelement_c]'
GO
ALTER TABLE [dbo].[loanelement_c] ADD CONSTRAINT [FK_loanelement_c_loanelement] FOREIGN KEY ([FK_rowid_loanelement]) REFERENCES [dbo].[loanelement] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodloanelement]'
GO
ALTER TABLE [dbo].[prodloanelement] ADD CONSTRAINT [FK_prodloanelement_loanelement] FOREIGN KEY ([FK_rowid_loanelement]) REFERENCES [dbo].[loanelement] ([rowid])
GO
ALTER TABLE [dbo].[prodloanelement] ADD CONSTRAINT [FK_prodloanelement_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[loanred_c]'
GO
ALTER TABLE [dbo].[loanred_c] ADD CONSTRAINT [FK_loanred_c_loanred] FOREIGN KEY ([FK_rowid_loanred]) REFERENCES [dbo].[loanred] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[lsched_c]'
GO
ALTER TABLE [dbo].[lsched_c] ADD CONSTRAINT [FK_lsched_c_lsched] FOREIGN KEY ([FK_rowid_lsched]) REFERENCES [dbo].[lsched] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[lsched_txns]'
GO
ALTER TABLE [dbo].[lsched_txns] ADD CONSTRAINT [FK_lsched_txns_lsched] FOREIGN KEY ([FK_rowid_lsched]) REFERENCES [dbo].[lsched] ([rowid])
GO
ALTER TABLE [dbo].[lsched_txns] ADD CONSTRAINT [FK_lsched_txns_txns] FOREIGN KEY ([FK_rowid_txns]) REFERENCES [dbo].[txns] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlrule_c]'
GO
ALTER TABLE [dbo].[mlrule_c] ADD CONSTRAINT [FK_mlrule_c_mlrule] FOREIGN KEY ([FK_rowid_mlrule]) REFERENCES [dbo].[mlrule] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlrule_condition]'
GO
ALTER TABLE [dbo].[mlrule_condition] ADD CONSTRAINT [FK_mlrule_condition_mlrule] FOREIGN KEY ([FK_rowid_mlrule]) REFERENCES [dbo].[mlrule] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlrule_condition_c]'
GO
ALTER TABLE [dbo].[mlrule_condition_c] ADD CONSTRAINT [FK_mlrule_condition_c_mlrule_condition] FOREIGN KEY ([FK_rowid_mlrule_condition]) REFERENCES [dbo].[mlrule_condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mlsanctioned_c]'
GO
ALTER TABLE [dbo].[mlsanctioned_c] ADD CONSTRAINT [FK_mlsanctioned_c_mlsanctioned] FOREIGN KEY ([FK_rowid_mlsanctioned]) REFERENCES [dbo].[mlsanctioned] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mminterestmargins_c]'
GO
ALTER TABLE [dbo].[mminterestmargins_c] ADD CONSTRAINT [FK_mminterestmargins_c_mminterestmargins] FOREIGN KEY ([FK_rowid_mminterestmargins]) REFERENCES [dbo].[mminterestmargins] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mmperiod_c]'
GO
ALTER TABLE [dbo].[mmperiod_c] ADD CONSTRAINT [FK_mmperiod_c_mmperiod] FOREIGN KEY ([FK_rowid_mmperiod]) REFERENCES [dbo].[mmperiod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[mmrate_c]'
GO
ALTER TABLE [dbo].[mmrate_c] ADD CONSTRAINT [FK_mmrate_c_mmrate] FOREIGN KEY ([FK_rowid_mmrate]) REFERENCES [dbo].[mmrate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[model_c]'
GO
ALTER TABLE [dbo].[model_c] ADD CONSTRAINT [FK_model_c_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[printer]'
GO
ALTER TABLE [dbo].[printer] ADD CONSTRAINT [FK_printer_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[sequence]'
GO
ALTER TABLE [dbo].[sequence] ADD CONSTRAINT [FK_sequence_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatemodel]'
GO
ALTER TABLE [dbo].[work_templatemodel] ADD CONSTRAINT [FK_work_templatemodel_model] FOREIGN KEY ([FK_rowid_model]) REFERENCES [dbo].[model] ([rowid])
GO
ALTER TABLE [dbo].[work_templatemodel] ADD CONSTRAINT [FK_work_templatemodel_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[nonpers_c]'
GO
ALTER TABLE [dbo].[nonpers_c] ADD CONSTRAINT [FK_nonpers_c_nonpers] FOREIGN KEY ([FK_rowid_nonpers]) REFERENCES [dbo].[nonpers] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[payment_transmission_c]'
GO
ALTER TABLE [dbo].[payment_transmission_c] ADD CONSTRAINT [FK_payment_transmission_c_payment_transmission] FOREIGN KEY ([FK_rowid_payment_transmission]) REFERENCES [dbo].[payment_transmission] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[payment_transmission_history]'
GO
ALTER TABLE [dbo].[payment_transmission_history] ADD CONSTRAINT [FK_payment_transmission_history_payment_transmission] FOREIGN KEY ([FK_rowid_payment_transmission]) REFERENCES [dbo].[payment_transmission] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[payment_transmission_product_c]'
GO
ALTER TABLE [dbo].[payment_transmission_product_c] ADD CONSTRAINT [FK_payment_transmission_product_c_payment_transmission_product] FOREIGN KEY ([FK_rowid_payment_transmission_product]) REFERENCES [dbo].[payment_transmission_product] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[people_c]'
GO
ALTER TABLE [dbo].[people_c] ADD CONSTRAINT [FK_people_c_people] FOREIGN KEY ([FK_rowid_people]) REFERENCES [dbo].[people] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[plot_c]'
GO
ALTER TABLE [dbo].[plot_c] ADD CONSTRAINT [FK_plot_c_plot] FOREIGN KEY ([FK_rowid_plot]) REFERENCES [dbo].[plot] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[policy_c]'
GO
ALTER TABLE [dbo].[policy_c] ADD CONSTRAINT [FK_policy_c_policy] FOREIGN KEY ([FK_rowid_policy]) REFERENCES [dbo].[policy] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[policy]'
GO
ALTER TABLE [dbo].[policy] ADD CONSTRAINT [FK_policy_security] FOREIGN KEY ([FK_rowid_security]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[printer_c]'
GO
ALTER TABLE [dbo].[printer_c] ADD CONSTRAINT [FK_printer_c_printer] FOREIGN KEY ([FK_rowid_printer]) REFERENCES [dbo].[printer] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privSDKdetail_c]'
GO
ALTER TABLE [dbo].[privSDKdetail_c] ADD CONSTRAINT [FK_privSDKdetail_c_privSDKdetail] FOREIGN KEY ([FK_rowid_privSDKdetail]) REFERENCES [dbo].[privSDKdetail] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privSDKitem_c]'
GO
ALTER TABLE [dbo].[privSDKitem_c] ADD CONSTRAINT [FK_privSDKitem_c_privSDKitem] FOREIGN KEY ([FK_rowid_privSDKitem]) REFERENCES [dbo].[privSDKitem] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[priv_c]'
GO
ALTER TABLE [dbo].[priv_c] ADD CONSTRAINT [FK_priv_c_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privpriv_action]'
GO
ALTER TABLE [dbo].[privpriv_action] ADD CONSTRAINT [FK_privpriv_action_priv] FOREIGN KEY ([FK_rowid_priv]) REFERENCES [dbo].[priv] ([rowid])
GO
ALTER TABLE [dbo].[privpriv_action] ADD CONSTRAINT [FK_privpriv_action_priv_action] FOREIGN KEY ([FK_rowid_priv_action]) REFERENCES [dbo].[priv_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[priv_action_c]'
GO
ALTER TABLE [dbo].[priv_action_c] ADD CONSTRAINT [FK_priv_action_c_priv_action] FOREIGN KEY ([FK_rowid_priv_action]) REFERENCES [dbo].[priv_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privempl_c]'
GO
ALTER TABLE [dbo].[privempl_c] ADD CONSTRAINT [FK_privempl_c_privempl] FOREIGN KEY ([FK_rowid_privempl]) REFERENCES [dbo].[privempl] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privlimit_c]'
GO
ALTER TABLE [dbo].[privlimit_c] ADD CONSTRAINT [FK_privlimit_c_privlimit] FOREIGN KEY ([FK_rowid_privlimit]) REFERENCES [dbo].[privlimit] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[privpriv_action_c]'
GO
ALTER TABLE [dbo].[privpriv_action_c] ADD CONSTRAINT [FK_privpriv_action_c_privpriv_action] FOREIGN KEY ([FK_rowid_privpriv_action]) REFERENCES [dbo].[privpriv_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prod_c]'
GO
ALTER TABLE [dbo].[prod_c] ADD CONSTRAINT [FK_prod_c_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodccy]'
GO
ALTER TABLE [dbo].[prodccy] ADD CONSTRAINT [FK_prodccy_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodcondition]'
GO
ALTER TABLE [dbo].[prodcondition] ADD CONSTRAINT [FK_prodcondition_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodmodel]'
GO
ALTER TABLE [dbo].[prodmodel] ADD CONSTRAINT [FK_prodmodel_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodprograte]'
GO
ALTER TABLE [dbo].[prodprograte] ADD CONSTRAINT [FK_prodprograte_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
ALTER TABLE [dbo].[prodprograte] ADD CONSTRAINT [FK_prodprograte_prograte] FOREIGN KEY ([FK_rowid_prograte]) REFERENCES [dbo].[prograte] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[termdef]'
GO
ALTER TABLE [dbo].[termdef] ADD CONSTRAINT [FK_termdef_prod] FOREIGN KEY ([FK_rowid_prod]) REFERENCES [dbo].[prod] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodbase_c]'
GO
ALTER TABLE [dbo].[prodbase_c] ADD CONSTRAINT [FK_prodbase_c_prodbase] FOREIGN KEY ([FK_rowid_prodbase]) REFERENCES [dbo].[prodbase] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodbook_c]'
GO
ALTER TABLE [dbo].[prodbook_c] ADD CONSTRAINT [FK_prodbook_c_prodbook] FOREIGN KEY ([FK_rowid_prodbook]) REFERENCES [dbo].[prodbook] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodcarddef_c]'
GO
ALTER TABLE [dbo].[prodcarddef_c] ADD CONSTRAINT [FK_prodcarddef_c_prodcarddef] FOREIGN KEY ([FK_rowid_prodcarddef]) REFERENCES [dbo].[prodcarddef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodccy_c]'
GO
ALTER TABLE [dbo].[prodccy_c] ADD CONSTRAINT [FK_prodccy_c_prodccy] FOREIGN KEY ([FK_rowid_prodccy]) REFERENCES [dbo].[prodccy] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodcondition_c]'
GO
ALTER TABLE [dbo].[prodcondition_c] ADD CONSTRAINT [FK_prodcondition_c_prodcondition] FOREIGN KEY ([FK_rowid_prodcondition]) REFERENCES [dbo].[prodcondition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodloanelement_c]'
GO
ALTER TABLE [dbo].[prodloanelement_c] ADD CONSTRAINT [FK_prodloanelement_c_prodloanelement] FOREIGN KEY ([FK_rowid_prodloanelement]) REFERENCES [dbo].[prodloanelement] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodmodel_c]'
GO
ALTER TABLE [dbo].[prodmodel_c] ADD CONSTRAINT [FK_prodmodel_c_prodmodel] FOREIGN KEY ([FK_rowid_prodmodel]) REFERENCES [dbo].[prodmodel] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prodprograte_c]'
GO
ALTER TABLE [dbo].[prodprograte_c] ADD CONSTRAINT [FK_prodprograte_c_prodprograte] FOREIGN KEY ([FK_rowid_prodprograte]) REFERENCES [dbo].[prodprograte] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[prograte_c]'
GO
ALTER TABLE [dbo].[prograte_c] ADD CONSTRAINT [FK_prograte_c_prograte] FOREIGN KEY ([FK_rowid_prograte]) REFERENCES [dbo].[prograte] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[proof_c]'
GO
ALTER TABLE [dbo].[proof_c] ADD CONSTRAINT [FK_proof_c_proof] FOREIGN KEY ([FK_rowid_proof]) REFERENCES [dbo].[proof] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[property_c]'
GO
ALTER TABLE [dbo].[property_c] ADD CONSTRAINT [FK_property_c_property] FOREIGN KEY ([FK_rowid_property]) REFERENCES [dbo].[property] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[property]'
GO
ALTER TABLE [dbo].[property] ADD CONSTRAINT [FK_property_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[rate_c]'
GO
ALTER TABLE [dbo].[rate_c] ADD CONSTRAINT [FK_rate_c_rate] FOREIGN KEY ([FK_rowid_rate]) REFERENCES [dbo].[rate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[relate_c]'
GO
ALTER TABLE [dbo].[relate_c] ADD CONSTRAINT [FK_relate_c_relate] FOREIGN KEY ([FK_rowid_relate]) REFERENCES [dbo].[relate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[relateextra]'
GO
ALTER TABLE [dbo].[relateextra] ADD CONSTRAINT [FK_relateextra_relate] FOREIGN KEY ([FK_rowid_relate]) REFERENCES [dbo].[relate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[relateextra_c]'
GO
ALTER TABLE [dbo].[relateextra_c] ADD CONSTRAINT [FK_relateextra_c_relateextra] FOREIGN KEY ([FK_rowid_relateextra]) REFERENCES [dbo].[relateextra] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[rules_c]'
GO
ALTER TABLE [dbo].[rules_c] ADD CONSTRAINT [FK_rules_c_rules] FOREIGN KEY ([FK_rowid_rules]) REFERENCES [dbo].[rules] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[rules]'
GO
ALTER TABLE [dbo].[rules] ADD CONSTRAINT [FK_rules_txndef] FOREIGN KEY ([FK_rowid_txndef]) REFERENCES [dbo].[txndef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[securities_c]'
GO
ALTER TABLE [dbo].[securities_c] ADD CONSTRAINT [FK_securities_c_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[securities_comment]'
GO
ALTER TABLE [dbo].[securities_comment] ADD CONSTRAINT [FK_securities_comment_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[vehicle]'
GO
ALTER TABLE [dbo].[vehicle] ADD CONSTRAINT [FK_vehicle_securities] FOREIGN KEY ([FK_rowid_securities]) REFERENCES [dbo].[securities] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[securities_comment_c]'
GO
ALTER TABLE [dbo].[securities_comment_c] ADD CONSTRAINT [FK_securities_comment_c_securities_comment] FOREIGN KEY ([FK_rowid_securities_comment]) REFERENCES [dbo].[securities_comment] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[sequence_c]'
GO
ALTER TABLE [dbo].[sequence_c] ADD CONSTRAINT [FK_sequence_c_sequence] FOREIGN KEY ([FK_rowid_sequence]) REFERENCES [dbo].[sequence] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[sigdetail_c]'
GO
ALTER TABLE [dbo].[sigdetail_c] ADD CONSTRAINT [FK_sigdetail_c_sigdetail] FOREIGN KEY ([FK_rowid_sigdetail]) REFERENCES [dbo].[sigdetail] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[source_c]'
GO
ALTER TABLE [dbo].[source_c] ADD CONSTRAINT [FK_source_c_source] FOREIGN KEY ([FK_rowid_source]) REFERENCES [dbo].[source] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmtsent]'
GO
ALTER TABLE [dbo].[stmtsent] ADD CONSTRAINT [FK_stmtsent_stmt] FOREIGN KEY ([FK_rowid_stmt]) REFERENCES [dbo].[stmt] ([rowid])
GO
ALTER TABLE [dbo].[stmtsent] ADD CONSTRAINT [FK_stmtsent_stmtcontact] FOREIGN KEY ([FK_rowid_stmtcontact]) REFERENCES [dbo].[stmtcontact] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmttxns]'
GO
ALTER TABLE [dbo].[stmttxns] ADD CONSTRAINT [FK_stmttxns_stmt] FOREIGN KEY ([FK_rowid_stmt]) REFERENCES [dbo].[stmt] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmt]'
GO
ALTER TABLE [dbo].[stmt] ADD CONSTRAINT [FK_stmt_stmthdr] FOREIGN KEY ([FK_rowid_stmthdr]) REFERENCES [dbo].[stmthdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmtcontact]'
GO
ALTER TABLE [dbo].[stmtcontact] ADD CONSTRAINT [FK_stmtcontact_stmtrecipient] FOREIGN KEY ([FK_rowid_stmtrecipient]) REFERENCES [dbo].[stmtrecipient] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmthdr_c]'
GO
ALTER TABLE [dbo].[stmthdr_c] ADD CONSTRAINT [FK_stmthdr_c_stmthdr] FOREIGN KEY ([FK_rowid_stmthdr]) REFERENCES [dbo].[stmthdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[suppitem]'
GO
ALTER TABLE [dbo].[suppitem] ADD CONSTRAINT [FK_suppitem_stmthdr] FOREIGN KEY ([FK_rowid_stmthdr]) REFERENCES [dbo].[stmthdr] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmtmssg_c]'
GO
ALTER TABLE [dbo].[stmtmssg_c] ADD CONSTRAINT [FK_stmtmssg_c_stmtmssg] FOREIGN KEY ([FK_rowid_stmtmssg]) REFERENCES [dbo].[stmtmssg] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[stmtrecipient_c]'
GO
ALTER TABLE [dbo].[stmtrecipient_c] ADD CONSTRAINT [FK_stmtrecipient_c_stmtrecipient] FOREIGN KEY ([FK_rowid_stmtrecipient]) REFERENCES [dbo].[stmtrecipient] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[suppitem_c]'
GO
ALTER TABLE [dbo].[suppitem_c] ADD CONSTRAINT [FK_suppitem_c_suppitem] FOREIGN KEY ([FK_rowid_suppitem]) REFERENCES [dbo].[suppitem] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[taxfreelimitdetails_c]'
GO
ALTER TABLE [dbo].[taxfreelimitdetails_c] ADD CONSTRAINT [FK_taxfreedetails_c_taxfreedetails] FOREIGN KEY ([FK_rowid_taxfreelimitdetails]) REFERENCES [dbo].[taxfreelimitdetails] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[taxfreelimitdetails]'
GO
ALTER TABLE [dbo].[taxfreelimitdetails] ADD CONSTRAINT [FK_taxfreedetails_taxfreeheader] FOREIGN KEY ([FK_rowid_taxfreelimitheader]) REFERENCES [dbo].[taxfreelimitheader] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[taxfreelimitheader_c]'
GO
ALTER TABLE [dbo].[taxfreelimitheader_c] ADD CONSTRAINT [FK_taxfreeheader_c_taxfreeheader] FOREIGN KEY ([FK_rowid_taxfreelimitheader]) REFERENCES [dbo].[taxfreelimitheader] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[term_c]'
GO
ALTER TABLE [dbo].[term_c] ADD CONSTRAINT [FK_term_c_term] FOREIGN KEY ([FK_rowid_term]) REFERENCES [dbo].[term] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[term_s]'
GO
ALTER TABLE [dbo].[term_s] ADD CONSTRAINT [FK_term_s_term] FOREIGN KEY ([FK_rowid_term]) REFERENCES [dbo].[term] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[termdef_c]'
GO
ALTER TABLE [dbo].[termdef_c] ADD CONSTRAINT [FK_termdef_c_termdef] FOREIGN KEY ([FK_rowid_termdef]) REFERENCES [dbo].[termdef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[territory_c]'
GO
ALTER TABLE [dbo].[territory_c] ADD CONSTRAINT [FK_territory_c_territory] FOREIGN KEY ([FK_rowid_territory]) REFERENCES [dbo].[territory] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[tfrbank_c]'
GO
ALTER TABLE [dbo].[tfrbank_c] ADD CONSTRAINT [FK_tfrbank_c_tfrbank] FOREIGN KEY ([FK_rowid_tfrbank]) REFERENCES [dbo].[tfrbank] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txndef_c]'
GO
ALTER TABLE [dbo].[txndef_c] ADD CONSTRAINT [FK_txndef_c_txndef] FOREIGN KEY ([FK_rowid_txndef]) REFERENCES [dbo].[txndef] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txns_post_c]'
GO
ALTER TABLE [dbo].[txns_post_c] ADD CONSTRAINT [FK_txns_post_c_txns_post] FOREIGN KEY ([FK_rowid_txns_post]) REFERENCES [dbo].[txns_post] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txnsextra_c]'
GO
ALTER TABLE [dbo].[txnsextra_c] ADD CONSTRAINT [FK_txnsextra_c_txnsextra] FOREIGN KEY ([FK_rowid_txnsextra]) REFERENCES [dbo].[txnsextra] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[txnstop_c]'
GO
ALTER TABLE [dbo].[txnstop_c] ADD CONSTRAINT [FK_txnstop_c_txnstop] FOREIGN KEY ([FK_rowid_txnstop]) REFERENCES [dbo].[txnstop] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[user_dv_c]'
GO
ALTER TABLE [dbo].[user_dv_c] ADD CONSTRAINT [FK_user_dv_c_user_dv] FOREIGN KEY ([FK_rowid_user_dv]) REFERENCES [dbo].[user_dv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[user_dvvalue]'
GO
ALTER TABLE [dbo].[user_dvvalue] ADD CONSTRAINT [FK_user_dvvalue_user_dv] FOREIGN KEY ([FK_rowid_user_dv]) REFERENCES [dbo].[user_dv] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[user_dvvalue_c]'
GO
ALTER TABLE [dbo].[user_dvvalue_c] ADD CONSTRAINT [FK_user_dvvalue_c_user_dvvalue] FOREIGN KEY ([FK_rowid_user_dvvalue]) REFERENCES [dbo].[user_dvvalue] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[vehicle_c]'
GO
ALTER TABLE [dbo].[vehicle_c] ADD CONSTRAINT [FK_vehicle_c_vehicle] FOREIGN KEY ([FK_rowid_vehicle]) REFERENCES [dbo].[vehicle] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[webservice_item]'
GO
ALTER TABLE [dbo].[webservice_item] ADD CONSTRAINT [FK_webservice_item_webservice_update] FOREIGN KEY ([FK_rowid_webservice_update]) REFERENCES [dbo].[webservice_update] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_action_c]'
GO
ALTER TABLE [dbo].[work_action_c] ADD CONSTRAINT [FK_work_action_c_work_action] FOREIGN KEY ([FK_rowid_work_action]) REFERENCES [dbo].[work_action] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_action]'
GO
ALTER TABLE [dbo].[work_action] ADD CONSTRAINT [FK_work_action_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_attribute_c]'
GO
ALTER TABLE [dbo].[work_attribute_c] ADD CONSTRAINT [FK_documentattributes_c_documentattributes] FOREIGN KEY ([FK_rowid_documentattributes]) REFERENCES [dbo].[work_attribute] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_attributeenumerated]'
GO
ALTER TABLE [dbo].[work_attributeenumerated] ADD CONSTRAINT [FK_work_attributeenumerated_work_attribute] FOREIGN KEY ([FK_rowid_work_attribute]) REFERENCES [dbo].[work_attribute] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_itemwork_attribute]'
GO
ALTER TABLE [dbo].[work_itemwork_attribute] ADD CONSTRAINT [FK_work_itemdocument_attributes_documentattributes] FOREIGN KEY ([FK_rowid_work_attribute]) REFERENCES [dbo].[work_attribute] ([rowid])
GO
ALTER TABLE [dbo].[work_itemwork_attribute] ADD CONSTRAINT [FK_work_itemdocument_attributes_work_item] FOREIGN KEY ([FK_rowid_work_item]) REFERENCES [dbo].[work_item] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatework_attribute]'
GO
ALTER TABLE [dbo].[work_templatework_attribute] ADD CONSTRAINT [FK_work_templatedocument_attributes_documentattributes] FOREIGN KEY ([FK_rowid_work_attribute]) REFERENCES [dbo].[work_attribute] ([rowid])
GO
ALTER TABLE [dbo].[work_templatework_attribute] ADD CONSTRAINT [FK_work_templatedocument_attributes_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_attributeenumerated_c]'
GO
ALTER TABLE [dbo].[work_attributeenumerated_c] ADD CONSTRAINT [FK_work_attributeenumerated_c_work_attributeenumerated] FOREIGN KEY ([FK_rowid_work_attributeenumerated]) REFERENCES [dbo].[work_attributeenumerated] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_category_c]'
GO
ALTER TABLE [dbo].[work_category_c] ADD CONSTRAINT [FK_work_category_c_work_category] FOREIGN KEY ([FK_rowid_work_category]) REFERENCES [dbo].[work_category] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_comment_c]'
GO
ALTER TABLE [dbo].[work_comment_c] ADD CONSTRAINT [FK_work_comment_c_work_comment] FOREIGN KEY ([FK_rowid_work_comment]) REFERENCES [dbo].[work_comment] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_comment]'
GO
ALTER TABLE [dbo].[work_comment] ADD CONSTRAINT [FK_work_comment_work_item] FOREIGN KEY ([FK_rowid_work_item]) REFERENCES [dbo].[work_item] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_condition_c]'
GO
ALTER TABLE [dbo].[work_condition_c] ADD CONSTRAINT [FK_work_condition_c_work_condition] FOREIGN KEY ([FK_rowid_work_condition]) REFERENCES [dbo].[work_condition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_condition]'
GO
ALTER TABLE [dbo].[work_condition] ADD CONSTRAINT [FK_work_item_template_condition_work_item_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_decision_c]'
GO
ALTER TABLE [dbo].[work_decision_c] ADD CONSTRAINT [FK_work_decision_c_work_decision] FOREIGN KEY ([FK_rowid_work_decision]) REFERENCES [dbo].[work_decision] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_decision]'
GO
ALTER TABLE [dbo].[work_decision] ADD CONSTRAINT [FK_work_decision_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_filtercategory_c]'
GO
ALTER TABLE [dbo].[work_filtercategory_c] ADD CONSTRAINT [FK_work_filtercategory_c_work_filtercategory] FOREIGN KEY ([FK_rowid_work_filtercategory]) REFERENCES [dbo].[work_filtercategory] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_item_c]'
GO
ALTER TABLE [dbo].[work_item_c] ADD CONSTRAINT [FK_work_item_c_work_item] FOREIGN KEY ([FK_rowid_work_item]) REFERENCES [dbo].[work_item] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_item]'
GO
ALTER TABLE [dbo].[work_item] ADD CONSTRAINT [FK_work_item_work_item_template] FOREIGN KEY ([FK_rowid_work_item_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_manualdocumentaction]'
GO
ALTER TABLE [dbo].[work_manualdocumentaction] ADD CONSTRAINT [FK_work_manualdocumentaction_work_manualdocumenttemplate] FOREIGN KEY ([FK_rowid_work_manualdocumenttemplate]) REFERENCES [dbo].[work_manualdocumenttemplate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_manualdocumenttemplate_c]'
GO
ALTER TABLE [dbo].[work_manualdocumenttemplate_c] ADD CONSTRAINT [FK_work_manualdocumenttemplate_c_work_manualdocumenttemplate] FOREIGN KEY ([FK_rowid_work_manualdocumenttemplate]) REFERENCES [dbo].[work_manualdocumenttemplate] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_status_c]'
GO
ALTER TABLE [dbo].[work_status_c] ADD CONSTRAINT [FK_work_status_c_work_status] FOREIGN KEY ([FK_rowid_work_status]) REFERENCES [dbo].[work_status] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatework_status]'
GO
ALTER TABLE [dbo].[work_templatework_status] ADD CONSTRAINT [FK_work_templatework_status_work_status] FOREIGN KEY ([FK_rowid_work_status]) REFERENCES [dbo].[work_status] ([rowid])
GO
ALTER TABLE [dbo].[work_templatework_status] ADD CONSTRAINT [FK_work_templatework_status_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_template_c]'
GO
ALTER TABLE [dbo].[work_template_c] ADD CONSTRAINT [FK_work_template_c_work_template] FOREIGN KEY ([FK_rowid_work_template]) REFERENCES [dbo].[work_template] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatework_attribute_c]'
GO
ALTER TABLE [dbo].[work_templatework_attribute_c] ADD CONSTRAINT [FK_work_templatework_attribute_c_work_templatework_attribute] FOREIGN KEY ([FK_rowid_work_templatework_attribute]) REFERENCES [dbo].[work_templatework_attribute] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatework_attributecondition]'
GO
ALTER TABLE [dbo].[work_templatework_attributecondition] ADD CONSTRAINT [FK_work_templatework_attributecondition_work_templatework_attribute] FOREIGN KEY ([FK_rowid_work_templatework_attribute]) REFERENCES [dbo].[work_templatework_attribute] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[work_templatework_attributecondition_c]'
GO
ALTER TABLE [dbo].[work_templatework_attributecondition_c] ADD CONSTRAINT [FK_work_templatework_attributecondition_c_work_templatework_attributecondition] FOREIGN KEY ([FK_rowid_work_templatework_attributecondition]) REFERENCES [dbo].[work_templatework_attributecondition] ([rowid])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Disabling constraints on [dbo].[bacstxnhdr]'
GO
ALTER TABLE [dbo].[bacstxnhdr] NOCHECK CONSTRAINT [FK_bacstxnhdr_model]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating extended properties'
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acct', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'acct', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctcontact', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'group definition', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'admin_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'admin_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'charge_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'charge_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'crint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'drint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'drint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'acctgroup', 'COLUMN', N'rowid'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'new_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'acctsubst', 'COLUMN', N'old_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsinhdr', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'newpayeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'newpayersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsintxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'newpayeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'newpayersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'addacsouttxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_enumerated', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_field', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_table', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'additionalfields_value', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'agency_claim', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_rule_log', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'aml_ruleset', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'prev_contactline4'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'appl', 'COLUMN', N'prev_contactpostcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'remitteracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'remittersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'arucsouttxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisinhdr', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'newpayeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'newpayersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'originatoracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'originatorsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisintxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisouthdr', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisouttxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrethdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'newpayeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'newpayersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'originatoracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'originatorsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisretintxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'newpayeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'newpayersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'auddisrettxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'charge_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'charge_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audit', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'audititem', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'autopyin', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'autopymt', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'newpayeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'newpayeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'remitteracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'remittersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'awacsouttxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsacct', 'COLUMN', N'sortcodeto'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsconfig', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsinhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'createtimed'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'destinationacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'destinationsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'originatoracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'originatorsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'referredacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'referredsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacsintxn', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bacssort', 'COLUMN', N'substsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bacstxnhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'cheqagency'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'mainbrsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'redirectcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'rowid'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'bank', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'base', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'baserate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batch', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'batchtxns', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'book', 'COLUMN', N'serialnoto'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'bookdef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'brokerfirm', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'businessarea', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'charge_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'charge_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'close_transfer_account'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'close_transfer_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'crint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'drint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'drint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'paytran_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'paytran_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'transfer_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call', 'COLUMN', N'transfer_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'charge_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'charge_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
   EXEC sys.sp_addextendedproperty N'MS_Description', N'', N'SCHEMA',N'dbo', 'TABLE', N'call_prenotification', 'COLUMN',N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
    EXEC sys.sp_addextendedproperty N'MS_Description', N'' , N'SCHEMA', N'dbo', 'TABLE', N'call_prenotification', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
    EXEC sys.sp_addextendedproperty N'MS_Description', N'' , N'SCHEMA', N'dbo', 'TABLE', N'call_prenotification', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
   EXEC sys.sp_addextendedproperty N'MS_Description', N'' , N'SCHEMA', N'dbo', 'TABLE', N'call_prenotification', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
    EXEC sys.sp_addextendedproperty N'MS_Description', N'' , N'SCHEMA', N'dbo', 'TABLE', N'call_prenotification', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
    EXEC sys.sp_addextendedproperty N'MS_Description', N'' , N'SCHEMA', N'dbo', 'TABLE', N'call_prenotification', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO	
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'crint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'drint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'drint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'transfer_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'call_s', 'COLUMN', N'transfer_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'chqserialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'calldef', 'COLUMN', N'payserialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(16)', 'SCHEMA', N'dbo', 'TABLE', N'card', 'COLUMN', N'pan'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardcontrol', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardcontrol', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardcontrol', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardcontrol', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardcontrol', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'altstyle'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'carddef', 'COLUMN', N'panhigh'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'carddisburse', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'cardholder', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ccy', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'charge', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chart', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chgtype', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqinhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'destinationacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'destinationsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'originatoracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'originatorsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'referredacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'referredsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROS(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqintxn', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'banksortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'chqrevtxns', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'client_globals', 'COLUMN', N'last_searched_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'client_globals', 'COLUMN', N'last_searched_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'coded_template', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'config', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'contact', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'acctref'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppay', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'corppaydisburse', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ctry', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'data_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_actioncondition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dataselector_condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'extacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'extsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'intacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'dcouttxns', 'COLUMN', N'intsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiin', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'extacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'extsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'intacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddintxns', 'COLUMN', N'intsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'lastclaimacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'lastclaimsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'transferinacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'transferinsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'transferoutacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddiout', 'COLUMN', N'transferoutsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddorigin_acct', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'destinationacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'destinationsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ddrevtxns', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'deal', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dm_index', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'document', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'98304', 'SCHEMA', N'dbo', 'TABLE', N'document_image', 'COLUMN', N'image'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'documentconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'dw_stage', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'eftrequest', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'empl', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplapprovalconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'emplconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'rowid'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'encashment', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exch', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'exchrate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'acctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'extacct', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fee', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'feeoverride', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'formula_result', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsinhdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'destinationacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'destinationsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'originatoracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'originatorsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'referredacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'fpsintxn', 'COLUMN', N'referredsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'payeeacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'payeesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'payeracctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'fpsouttxn', 'COLUMN', N'payersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'gl', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'hols', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_payment_limit', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnk_search', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ibnkaccountblock', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkbrowserretirement', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkconfig', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnklog_error', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkprevpasswords', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ibnktxns', 'COLUMN', N'from_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ibnktxns', 'COLUMN', N'from_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ibnktxns', 'COLUMN', N'to_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ibnktxns', 'COLUMN', N'to_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuact', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkugrp', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ibnkuser_session', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'instrument', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'insurance', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'98304', 'SCHEMA', N'dbo', 'TABLE', N'kyc_history', 'COLUMN', N'xml'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'ledger', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'level', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'limit', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'loan', 'COLUMN', N'internal_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'loan', 'COLUMN', N'internal_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loan_condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'loan_s', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'loan_s', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'loan_s', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'loan_s', 'COLUMN', N'internal_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'loan_s', 'COLUMN', N'internal_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'loanadv', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loandef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanelement', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'loanred', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'lsched_txns', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'report_acctaccno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'report_acctopened'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'report_acctsub'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'report_accttype'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlrule_log', 'COLUMN', N'report_txnamt'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mlsanctioned', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mminterestmargins', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmperiod', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'mmrate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'fscsfrn'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'model', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'boesector'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'closedtransfer'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'nonpers', 'COLUMN', N'siccode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_history', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payment_transmission_product', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'charge_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'charge_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'crint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'drint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'drint_pay_code'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'tfr_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'payout', 'COLUMN', N'tfr_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'closedtransfer'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'people', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'policy', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'printer', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKdetail', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privSDKitem', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'priv_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privempl', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privlimit', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privpriv_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'privtableaccess', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'amenddate';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																										 
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'amendempl';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																											 
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'amendtime';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																								 
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'createdate';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																		 
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'createempl';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																								 
	EXECUTE sp_addextendedproperty N'MS_Description', N'NOLOG', N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'createtime';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY																											 
	EXECUTE sp_addextendedproperty N'MS_Description', N'196612',N'SCHEMA', N'dbo', N'TABLE', N'web_response', N'COLUMN', N'json';
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prod', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbase', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodbook', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcarddef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodccy', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodcondition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodloanelement', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodmodel', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prodprograte', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'prograte', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'98304', 'SCHEMA', N'dbo', 'TABLE', N'proof', 'COLUMN', N'image'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'property', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate2', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'relateextra', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'rules', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'search', 'COLUMN', N'filteracct'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'search', 'COLUMN', N'filterint'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'search', 'COLUMN', N'filterint2'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'search', 'COLUMN', N'filtersortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'securities_comment', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'end_range'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'last_number'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'sortcode_weight'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'sequence', 'COLUMN', N'start_range'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'source', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stats', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stats', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmthdr', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'stmtrecipient', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'stmtt', 'COLUMN', N'tfraccno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'stmtt', 'COLUMN', N'tfrsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'suppitem', 'COLUMN', N'rowid'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitdetails', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxfreelimitheader', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'taxrate', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'crint_pay_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'mat_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'mat_pay_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'mm_contra_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term', 'COLUMN', N'mm_contra_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'crint_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'crint_pay_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'mat_pay_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'mat_pay_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'mm_contra_accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'term_s', 'COLUMN', N'mm_contra_sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'termdef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'territory', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'accno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'tfrbank', 'COLUMN', N'sortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'trea', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txndef', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txns', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txns', 'COLUMN', N'serviceuserno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'txns', 'COLUMN', N'tfraccno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txns', 'COLUMN', N'tfrsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txns_post', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'adviceacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'advicesortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(8)', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'returnacctno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txnsextra', 'COLUMN', N'returnsortcode'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'serialno'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'LEADINGZEROES(6)', 'SCHEMA', N'dbo', 'TABLE', N'txnstop', 'COLUMN', N'serialnoto'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dv', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'user_dvvalue', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'vehicle', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_category', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_entity', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'watchlist_match', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_item', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_log', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'webservice_update', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_action', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attribute', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_attributeenumerated', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_category', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_comment', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_condition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decision', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_decisioncondition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_filtercategory', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_item', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_itemwork_attribute', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_status', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_template', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatemodel', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attribute', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_attributecondition', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'work_templatework_status', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'amenddate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'amendempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'amendtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'createdate'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'createempl'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'NOLOG', 'SCHEMA', N'dbo', 'TABLE', N'yearend', 'COLUMN', N'createtime'
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'Version', '4.5.17.0', NULL, NULL, NULL, NULL, NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
-- This statement writes to the SQL Server Log so SQL Monitor can show this deployment.
IF HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
    DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
    SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
    SET @eventMessage = N'Redgate SQL Compare: { "deployment": { "description": "Redgate SQL Compare deployed to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
    EXECUTE sys.xp_logevent 55000, @eventMessage
END
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
	PRINT 'The database update failed'
END
GO

